{"version":3,"file":"main.js","mappings":"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","sources":["webpack://app/./apps/backend/src/app/config/firebase.config.ts","webpack://app/./apps/backend/src/app/constants/config/configuration.ts","webpack://app/./apps/backend/src/app/constants/config/swagger.config.ts","webpack://app/./apps/backend/src/app/constants/controllers/keycloak/path.constant.ts","webpack://app/./apps/backend/src/app/constants/exception.constant.ts","webpack://app/./apps/backend/src/app/constants/network/headers.constant.ts","webpack://app/./apps/backend/src/app/controllers/accounts-pagination.model.ts","webpack://app/./apps/backend/src/app/controllers/accounts.controller.ts","webpack://app/./apps/backend/src/app/controllers/app.controller.ts","webpack://app/./apps/backend/src/app/controllers/authentication.controller.ts","webpack://app/./apps/backend/src/app/controllers/booking-reason.controller.ts","webpack://app/./apps/backend/src/app/controllers/booking-room.controller.ts","webpack://app/./apps/backend/src/app/controllers/device-type.controller.ts","webpack://app/./apps/backend/src/app/controllers/devices-pagination.model.ts","webpack://app/./apps/backend/src/app/controllers/devices.controller.ts","webpack://app/./apps/backend/src/app/controllers/feedback-type.controller.ts","webpack://app/./apps/backend/src/app/controllers/feedback.controller.ts","webpack://app/./apps/backend/src/app/controllers/health-check.controller.ts","webpack://app/./apps/backend/src/app/controllers/index.ts","webpack://app/./apps/backend/src/app/controllers/notification-type.controller.ts","webpack://app/./apps/backend/src/app/controllers/notification.controller.ts","webpack://app/./apps/backend/src/app/controllers/pagination.model.ts","webpack://app/./apps/backend/src/app/controllers/role.controller.ts","webpack://app/./apps/backend/src/app/controllers/room-type.controller.ts","webpack://app/./apps/backend/src/app/controllers/rooms-pagination.model.ts","webpack://app/./apps/backend/src/app/controllers/rooms.controller.ts","webpack://app/./apps/backend/src/app/controllers/slots.controller.ts","webpack://app/./apps/backend/src/app/decorators/keycloak-user.decorator.ts","webpack://app/./apps/backend/src/app/decorators/role.decorator.ts","webpack://app/./apps/backend/src/app/decorators/typeorm-ex.decorator.ts","webpack://app/./apps/backend/src/app/dto/wishlist-booking-room.request.dto.ts","webpack://app/./apps/backend/src/app/enum/booking-room-status.enum.ts","webpack://app/./apps/backend/src/app/enum/roles.enum.ts","webpack://app/./apps/backend/src/app/enum/room-type.enum.ts","webpack://app/./apps/backend/src/app/guards/auth.guard.ts","webpack://app/./apps/backend/src/app/guards/role.guard.ts","webpack://app/./apps/backend/src/app/interceptors/fastify-file.interceptor.ts","webpack://app/./apps/backend/src/app/interceptors/path-logger.interceptor.ts","webpack://app/./apps/backend/src/app/models/account-hist.entity.ts","webpack://app/./apps/backend/src/app/models/account-notification.entity.ts","webpack://app/./apps/backend/src/app/models/account.entity.ts","webpack://app/./apps/backend/src/app/models/base/base.entity.ts","webpack://app/./apps/backend/src/app/models/booking-reason-hist.entity.ts","webpack://app/./apps/backend/src/app/models/booking-reason.entity.ts","webpack://app/./apps/backend/src/app/models/booking-request-devices.entity.ts","webpack://app/./apps/backend/src/app/models/booking-request-hist.entity.ts","webpack://app/./apps/backend/src/app/models/booking-request.entity.ts","webpack://app/./apps/backend/src/app/models/booking-room-feedback.entity.ts","webpack://app/./apps/backend/src/app/models/device-type-hist.entity.ts","webpack://app/./apps/backend/src/app/models/device-type.entity.ts","webpack://app/./apps/backend/src/app/models/devices-hist.entity.ts","webpack://app/./apps/backend/src/app/models/devices.entity.ts","webpack://app/./apps/backend/src/app/models/feedback-hist.entity.ts","webpack://app/./apps/backend/src/app/models/feedback-type.entity.ts","webpack://app/./apps/backend/src/app/models/feedback.entity.ts","webpack://app/./apps/backend/src/app/models/index.ts","webpack://app/./apps/backend/src/app/models/notification-type.entity.ts","webpack://app/./apps/backend/src/app/models/notification.entity.ts","webpack://app/./apps/backend/src/app/models/role-hist.entity.ts","webpack://app/./apps/backend/src/app/models/role.entity.ts","webpack://app/./apps/backend/src/app/models/room-hist.entity.ts","webpack://app/./apps/backend/src/app/models/room-type-hist.entity.ts","webpack://app/./apps/backend/src/app/models/room-type.entity.ts","webpack://app/./apps/backend/src/app/models/room-wishlist-hist.entity.ts","webpack://app/./apps/backend/src/app/models/room-wishlist.entity.ts","webpack://app/./apps/backend/src/app/models/rooms.entity.ts","webpack://app/./apps/backend/src/app/models/slot.entity.ts","webpack://app/./apps/backend/src/app/modules/accounts.module.ts","webpack://app/./apps/backend/src/app/modules/app.module.ts","webpack://app/./apps/backend/src/app/modules/booking-reason.module.ts","webpack://app/./apps/backend/src/app/modules/booking-room.module.ts","webpack://app/./apps/backend/src/app/modules/cloudinary.module.ts","webpack://app/./apps/backend/src/app/modules/device-type.module.ts","webpack://app/./apps/backend/src/app/modules/devices.module.ts","webpack://app/./apps/backend/src/app/modules/feedback-type.module.ts","webpack://app/./apps/backend/src/app/modules/feedback.module.ts","webpack://app/./apps/backend/src/app/modules/global/cache.module.ts","webpack://app/./apps/backend/src/app/modules/global/config.module.ts","webpack://app/./apps/backend/src/app/modules/global/typeorm-ex.module.ts","webpack://app/./apps/backend/src/app/modules/global/typeorm.module.ts","webpack://app/./apps/backend/src/app/modules/health-check.module.ts","webpack://app/./apps/backend/src/app/modules/keycloak.module.ts","webpack://app/./apps/backend/src/app/modules/notification-type.module.ts","webpack://app/./apps/backend/src/app/modules/notification.module.ts","webpack://app/./apps/backend/src/app/modules/roles.module.ts","webpack://app/./apps/backend/src/app/modules/room-type.module.ts","webpack://app/./apps/backend/src/app/modules/room-wishlist.module.ts","webpack://app/./apps/backend/src/app/modules/rooms.module.ts","webpack://app/./apps/backend/src/app/modules/slot.module.ts","webpack://app/./apps/backend/src/app/payload/request/account-add.request.payload.ts","webpack://app/./apps/backend/src/app/payload/request/account-update-profile.request.payload.ts","webpack://app/./apps/backend/src/app/payload/request/booking-request-add.payload.ts","webpack://app/./apps/backend/src/app/payload/request/booking-request-cancel.payload.ts","webpack://app/./apps/backend/src/app/payload/request/change-password.request.payload.ts","webpack://app/./apps/backend/src/app/payload/request/data-add.request.payload.ts","webpack://app/./apps/backend/src/app/payload/request/feedback-resolve.request.payload.ts","webpack://app/./apps/backend/src/app/payload/request/feedback-send.request.payload.ts","webpack://app/./apps/backend/src/app/payload/request/master-data-add.request.payload.ts","webpack://app/./apps/backend/src/app/payload/response/refresh-token.request.payload.ts","webpack://app/./apps/backend/src/app/pipes/parse-token.pipe.ts","webpack://app/./apps/backend/src/app/pipes/validation/add-room.validation.ts","webpack://app/./apps/backend/src/app/pipes/validation/devices.validation.ts","webpack://app/./apps/backend/src/app/pipes/validation/rooms.validation.ts","webpack://app/./apps/backend/src/app/pipes/validation/users.validation.ts","webpack://app/./apps/backend/src/app/repositories/account-hist.repository.ts","webpack://app/./apps/backend/src/app/repositories/account.repository.ts","webpack://app/./apps/backend/src/app/repositories/booking-reason-hist.repository.ts","webpack://app/./apps/backend/src/app/repositories/booking-reason.repository.ts","webpack://app/./apps/backend/src/app/repositories/booking-request-devices.repository.ts","webpack://app/./apps/backend/src/app/repositories/booking-request-hist.repository.ts","webpack://app/./apps/backend/src/app/repositories/booking-request.repository.ts","webpack://app/./apps/backend/src/app/repositories/booking-room-feedback.repository.ts","webpack://app/./apps/backend/src/app/repositories/device-hist.repository.ts","webpack://app/./apps/backend/src/app/repositories/device-type-hist.repository.ts","webpack://app/./apps/backend/src/app/repositories/device-type.repository.ts","webpack://app/./apps/backend/src/app/repositories/devices.repository.ts","webpack://app/./apps/backend/src/app/repositories/feedback-hist.repository.ts","webpack://app/./apps/backend/src/app/repositories/feedback-type.repository.ts","webpack://app/./apps/backend/src/app/repositories/feedback.repository.ts","webpack://app/./apps/backend/src/app/repositories/index.ts","webpack://app/./apps/backend/src/app/repositories/notification-type.repository.ts","webpack://app/./apps/backend/src/app/repositories/notification.repository.ts","webpack://app/./apps/backend/src/app/repositories/role-hist.repository.ts","webpack://app/./apps/backend/src/app/repositories/roles.repository.ts","webpack://app/./apps/backend/src/app/repositories/room-hist.repository.ts","webpack://app/./apps/backend/src/app/repositories/room-type-hist.repository.ts","webpack://app/./apps/backend/src/app/repositories/room-type.repository.ts","webpack://app/./apps/backend/src/app/repositories/room-wishlist-hist.repository.ts","webpack://app/./apps/backend/src/app/repositories/room-wishlist.repository.ts","webpack://app/./apps/backend/src/app/repositories/rooms.repository.ts","webpack://app/./apps/backend/src/app/repositories/slot.repository.ts","webpack://app/./apps/backend/src/app/services/account-hist.service.ts","webpack://app/./apps/backend/src/app/services/accounts.service.ts","webpack://app/./apps/backend/src/app/services/app.service.ts","webpack://app/./apps/backend/src/app/services/authentication.service.ts","webpack://app/./apps/backend/src/app/services/base.service.ts","webpack://app/./apps/backend/src/app/services/booking-reason-hist.service.ts","webpack://app/./apps/backend/src/app/services/booking-reason.service.ts","webpack://app/./apps/backend/src/app/services/booking-request-devices.service.ts","webpack://app/./apps/backend/src/app/services/booking-room-hist.service.ts","webpack://app/./apps/backend/src/app/services/booking-room.service.ts","webpack://app/./apps/backend/src/app/services/cloudinary.service.ts","webpack://app/./apps/backend/src/app/services/device-type-hist.service.ts","webpack://app/./apps/backend/src/app/services/device-type.service.ts","webpack://app/./apps/backend/src/app/services/devices-hist.service.ts","webpack://app/./apps/backend/src/app/services/devices.service.ts","webpack://app/./apps/backend/src/app/services/feedback-hist.service.ts","webpack://app/./apps/backend/src/app/services/feedback-type.service.ts","webpack://app/./apps/backend/src/app/services/feedback.service.ts","webpack://app/./apps/backend/src/app/services/index.ts","webpack://app/./apps/backend/src/app/services/keycloak.service.ts","webpack://app/./apps/backend/src/app/services/notification-type.service.ts","webpack://app/./apps/backend/src/app/services/notification.service.ts","webpack://app/./apps/backend/src/app/services/role-hist.service.ts","webpack://app/./apps/backend/src/app/services/role.service.ts","webpack://app/./apps/backend/src/app/services/room-hist.service.ts","webpack://app/./apps/backend/src/app/services/room-type-hist.service.ts","webpack://app/./apps/backend/src/app/services/room-type.service.ts","webpack://app/./apps/backend/src/app/services/room-wishlist-hist.service.ts","webpack://app/./apps/backend/src/app/services/room-wishlist.service.ts","webpack://app/./apps/backend/src/app/services/rooms.service.ts","webpack://app/./apps/backend/src/app/services/slot.service.ts","webpack://app/./apps/backend/src/app/services/task.service.ts","webpack://app/./apps/backend/src/app/validators/contains-many.validator.ts","webpack://app/./apps/backend/src/app/validators/utils/access-token-extractor.util.ts","webpack://app/./libs/constants/src/index.ts","webpack://app/./libs/constants/src/lib/color.constants.ts","webpack://app/./libs/constants/src/lib/environment.constant.ts","webpack://app/./libs/constants/src/lib/headers.constant.ts","webpack://app/./libs/constants/src/lib/mediatype.constant.ts","webpack://app/./libs/constants/src/lib/room-booking-status.constant.ts","webpack://app/external commonjs \"@nestjs/axios\"","webpack://app/external commonjs \"@nestjs/common\"","webpack://app/external commonjs \"@nestjs/config\"","webpack://app/external commonjs \"@nestjs/core\"","webpack://app/external commonjs \"@nestjs/platform-fastify\"","webpack://app/external commonjs \"@nestjs/schedule\"","webpack://app/external commonjs \"@nestjs/swagger\"","webpack://app/external commonjs \"@nestjs/typeorm\"","webpack://app/external commonjs \"cache-manager-redis-store\"","webpack://app/external commonjs \"class-transformer\"","webpack://app/external commonjs \"class-validator\"","webpack://app/external commonjs \"cloudinary\"","webpack://app/external commonjs \"dayjs\"","webpack://app/external commonjs \"fastify\"","webpack://app/external commonjs \"fastify-compress\"","webpack://app/external commonjs \"fastify-helmet\"","webpack://app/external commonjs \"fastify-multer\"","webpack://app/external commonjs \"firebase-admin\"","webpack://app/external commonjs \"fs\"","webpack://app/external commonjs \"google-auth-library\"","webpack://app/external commonjs \"joi\"","webpack://app/external commonjs \"js-yaml\"","webpack://app/external commonjs \"multer\"","webpack://app/external commonjs \"nestjs-typeorm-paginate\"","webpack://app/external commonjs \"rxjs\"","webpack://app/external commonjs \"streamifier\"","webpack://app/external commonjs \"tslib\"","webpack://app/external commonjs \"typeorm\"","webpack://app/external node-commonjs \"crypto\"","webpack://app/external node-commonjs \"net\"","webpack://app/external node-commonjs \"path\"","webpack://app/webpack/bootstrap","webpack://app/./apps/backend/src/main.ts"],"sourcesContent":["import * as admin from \"firebase-admin\";\r\nimport {FirebaseSettingsModel} from \"@app/models\";\r\n\r\nconst firebaseServiceAccountFile = './fptu-library-booking-firebase-adminsdk-gbxgk-75d2eb543f.json';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst fs = require('fs');\r\nconst firebaseSettings = JSON.parse(fs.readFileSync(firebaseServiceAccountFile, 'utf-8')) as FirebaseSettingsModel;\r\n\r\nexport const initializeFirebaseApp = () => {\r\n  admin.initializeApp({\r\n    credential: admin.credential.cert({\r\n      projectId: firebaseSettings.project_id,\r\n      clientEmail: firebaseSettings.client_email,\r\n      privateKey: firebaseSettings.private_key.replace(/\\\\n/g, '\\n'),\r\n    } as Partial<admin.ServiceAccount>)\r\n  });\r\n  return firebaseSettings.project_id;\r\n};\r\n\r\nexport default admin;\r\n","import * as yaml from \"js-yaml\";\r\nimport {readFileSync} from \"fs\";\r\nimport {join} from \"path\";\r\n\r\nconst YAML_CONFIG_FILENAME = 'environment.yaml';\r\n\r\nexport default () => {\r\n  return yaml.load(\r\n    readFileSync(join(YAML_CONFIG_FILENAME), 'utf8')\r\n  ) as Record<string, any>\r\n}\r\n","import { DocumentBuilder } from '@nestjs/swagger';\r\n\r\nexport const SWAGGER_CONFIG = {\r\n  contextPath: '/',\r\n  app: {\r\n    title: 'FPTU Library Room Booking Management',\r\n    description:\r\n      'Room booking and management for easily access for the lecturers and students',\r\n    version: '1.0',\r\n  },\r\n};\r\n\r\nexport const getSwaggerConfig = () => {\r\n  return new DocumentBuilder()\r\n    .setTitle(SWAGGER_CONFIG.app.title)\r\n    .setDescription(SWAGGER_CONFIG.app.description)\r\n    .setVersion(SWAGGER_CONFIG.app.version)\r\n    .addBearerAuth(\r\n      {\r\n        type: 'http',\r\n        scheme: 'bearer',\r\n        bearerFormat: 'Token',\r\n      },\r\n      'access-token'\r\n    )\r\n    .addOAuth2()\r\n    .build();\r\n};\r\n","export const KEYCLOAK_PATH = {\r\n  requestPath: '/v1/auth',\r\n  signIn: 'signin',\r\n  refreshAccessToken: 'refresh',\r\n  signOut: 'signout',\r\n  countUsers: 'users/count',\r\n  getUsers: 'users',\r\n  getUserById: 'users/:id',\r\n  createNewUser: 'users',\r\n  refreshUserPasswordById: 'users/reset-password/:id',\r\n};\r\n","const Exception = {\r\n  googleAccessTokenException: {\r\n    invalidToken: 'Google access token is not validated.',\r\n    expired: 'Google access token is expired',\r\n  }\r\n};\r\n\r\nexport default Exception;\r\n","export const CONTENT_TYPE = \"Content-Type\";\r\nexport const AUTHORIZATION = \"Authorization\";\r\nexport const AUTHORIZATION_LOWERCASE = \"authorization\";\r\n","import { PaginationParams } from './pagination.model';\r\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\r\n\r\nexport class AccountsPaginationParams extends PaginationParams {\r\n  @IsString({\r\n    message: 'Role type must be a string',\r\n  })\r\n  @IsOptional()\r\n  role: string;\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  UploadedFile,\r\n  UseInterceptors,\r\n  UsePipes,\r\n} from '@nestjs/common';\r\nimport { AccountsService } from '../services';\r\nimport {\r\n  ApiBearerAuth,\r\n  ApiConsumes,\r\n  ApiOperation,\r\n  ApiResponse,\r\n  ApiTags,\r\n  getSchemaPath,\r\n} from '@nestjs/swagger';\r\nimport { UsersValidation } from '../pipes/validation/users.validation';\r\nimport { User } from '../decorators/keycloak-user.decorator';\r\nimport { PathLoggerInterceptor } from '../interceptors/path-logger.interceptor';\r\nimport { Roles } from '../decorators/role.decorator';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { Accounts } from '../models';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { FastifyFileInterceptor } from '../interceptors/fastify-file.interceptor';\r\nimport { ChangeProfilePasswordRequest } from '../payload/request/change-password.request.payload';\r\nimport { AccountsPaginationParams } from './accounts-pagination.model';\r\nimport { AccountAddRequestPayload } from '../payload/request/account-add.request.payload';\r\nimport { AccountUpdateProfilePayload } from '../payload/request/account-update-profile.request.payload';\r\n\r\n@Controller('v1/accounts')\r\n@ApiBearerAuth()\r\n@ApiTags('Accounts')\r\n@UseInterceptors(new PathLoggerInterceptor(AccountsController.name))\r\nexport class AccountsController {\r\n  constructor(private readonly service: AccountsService) {}\r\n\r\n  @Get()\r\n  @UsePipes(new UsersValidation())\r\n  @HttpCode(HttpStatus.OK)\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Get the list of accounts',\r\n    description:\r\n      'Get the list of accounts with the provided pagination payload',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieved the users list',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while getting users or request payload is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  getAll(@Query() payload: AccountsPaginationParams) {\r\n    return this.service.getAll(payload);\r\n  }\r\n\r\n  @Get('name')\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully get user name',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get user name',\r\n    description: 'Get user name',\r\n  })\r\n  getUserNames() {\r\n    return this.service.getUserNames();\r\n  }\r\n\r\n  @Get('syncKeycloak')\r\n  @UsePipes(new UsersValidation())\r\n  @HttpCode(HttpStatus.OK)\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    description: 'Sync users from Keycloak to current DB',\r\n  })\r\n  syncUsersFromKeycloak() {\r\n    return this.service.syncUsersFromKeycloak();\r\n  }\r\n\r\n  @Get('find/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Retrieve account information by id',\r\n    description: 'Get account information by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieved the account information',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving account information by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getAccountById(@Param() payload: { id: string }) {\r\n    return this.service.getById(payload.id);\r\n  }\r\n\r\n  @Get('my-profile')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiOperation({\r\n    summary: 'Retrieve current profile information',\r\n    description: 'Get profile information',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieved the profile information',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving profile information',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  getCurrentProfileInformation(\r\n    @User() user: KeycloakUserInstance\r\n  ): Promise<Accounts> {\r\n    return this.service.getCurrentProfileInformation(user.sub);\r\n  }\r\n\r\n  @Get('avatar')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiOperation({\r\n    summary: 'Get avatar URL by keycloak id',\r\n    description: 'Get avatar URL by keycloak id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  getMyAvatarURL(@User() keycloakUser: KeycloakUserInstance) {\r\n    return this.service.getAvatarURLByAccountId(keycloakUser.account_id);\r\n  }\r\n\r\n  @Get('find-by-keycloak-id/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Get account information by keycloak id',\r\n    description: 'Get account information by keycloak id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieve account information',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving account information by keycloak id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  getAccountByKeycloakId(@Param() payload: { id: string }) {\r\n    return this.service.getAccountByKeycloakId(payload.id);\r\n  }\r\n\r\n  @Get('by-role')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'One or more payload parameters are invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched accounts',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getAccountsByRoleId(@Query('role') roleId = ''): Promise<Accounts[]> {\r\n    return this.service.getAccountsByRoleId(roleId);\r\n  }\r\n\r\n  @Post('add')\r\n  @HttpCode(HttpStatus.OK)\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Create a new account',\r\n    description: 'Create a new account with the provided payload',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.CREATED,\r\n    description: 'Successfully created a new device',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request payload for user is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully created a new user',\r\n    type: Accounts,\r\n    schema: {\r\n      allOf: [\r\n        {\r\n          $ref: getSchemaPath(Accounts),\r\n        },\r\n        {\r\n          properties: {\r\n            results: {\r\n              type: 'object',\r\n              items: { $ref: getSchemaPath(Accounts) },\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  })\r\n  createNewUser(\r\n    @User() user: KeycloakUserInstance,\r\n    @Body() account: AccountAddRequestPayload\r\n  ): Promise<Accounts> {\r\n    return this.service.add(account, user.account_id);\r\n  }\r\n\r\n  @Put('update/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  updateAccountById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string },\r\n    @Body() body: AccountUpdateProfilePayload\r\n  ) {\r\n    return this.service.updateById(user.account_id, payload.id, body);\r\n  }\r\n\r\n  @Put('update-profile')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  updateMyProfile(\r\n    @User() user: KeycloakUserInstance,\r\n    @Body() body: AccountUpdateProfilePayload\r\n  ) {\r\n    return this.service.updateMyProfile(user, body);\r\n  }\r\n\r\n  @Put('disable/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Disable account by id',\r\n    description: 'Disable account by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully disabled the account',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while disabling the account',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  disableAccountById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param('id') id: string\r\n  ) {\r\n    return this.service.disableById(user.account_id, id);\r\n  }\r\n\r\n  @Get('disabled')\r\n  @ApiOperation({\r\n    summary: 'Get a list of disabled accounts',\r\n    description: 'Get a list of disabled accounts',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  getDisabledAccounts(@Query('search') search = '') {\r\n    return this.service.getDisabledAccounts(search);\r\n  }\r\n\r\n  @Put('restore-disabled/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Restore the disabled account by id',\r\n    description: 'Restore the disabled account by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully restored the disabled account',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while restoring the disabled the account',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  restoreDisabledAccountById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string }\r\n  ) {\r\n    return this.service.handleRestoreDisabledAccountById(\r\n      user.account_id,\r\n      payload.id\r\n    );\r\n  }\r\n\r\n  @Delete(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  deleteAccountById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string }\r\n  ) {\r\n    return this.service.deleteById(user.account_id, payload.id);\r\n  }\r\n\r\n  @Get('deleted')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  getDeletedAccounts(@Query('search') search = '') {\r\n    return this.service.getDeletedAccounts(search);\r\n  }\r\n\r\n  @Put('restore-deleted/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  restoreDeletedUserById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string }\r\n  ) {\r\n    return this.service.handleRestoreDeletedAccountById(\r\n      user.account_id,\r\n      payload.id\r\n    );\r\n  }\r\n\r\n  @Put('update/upload-avatar/:id')\r\n  @ApiConsumes('multipart/form-data')\r\n  @UseInterceptors(FastifyFileInterceptor)\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Update account avatar by account id',\r\n    description: 'Update account avatar by account id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  updateAccountUploadAvatarById(\r\n    @User() user: KeycloakUserInstance,\r\n    @UploadedFile() image: Express.Multer.File,\r\n    @Param() payload: { id: string }\r\n  ) {\r\n    return this.service.uploadAvatarByAccountId(image, payload.id);\r\n  }\r\n\r\n  @Put('update/upload-avatar/profile')\r\n  @ApiConsumes('multipart/form-data')\r\n  @UseInterceptors(FastifyFileInterceptor('file', {}))\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiOperation({\r\n    summary: 'Update account avatar by account id',\r\n    description: 'Update account avatar by account id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  updateCurrentProfileAvatar(\r\n    @User() user: KeycloakUserInstance,\r\n    @UploadedFile() image: Express.Multer.File\r\n  ) {\r\n    return this.service.uploadAvatarByAccountId(image, user.account_id);\r\n  }\r\n\r\n  @Put('update/change-password')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiOperation({\r\n    summary: 'Change password by current profile',\r\n    description: 'Change password by current profile',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  changePassword(\r\n    @User() keycloakUser: KeycloakUserInstance,\r\n    @Body() payload: ChangeProfilePasswordRequest\r\n  ) {\r\n    return this.service.changePassword(keycloakUser, payload);\r\n  }\r\n\r\n  @Put('update/change-password/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Change password by keycloak id',\r\n    description: 'Change password by keycloak id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges',\r\n  })\r\n  changePasswordByKeycloakId(\r\n    @Param() payload: { id: string },\r\n    @Body() requestPayload: { password: string }\r\n  ) {\r\n    return this.service.changePasswordByKeycloakId(\r\n      payload.id,\r\n      requestPayload.password\r\n    );\r\n  }\r\n}\r\n","import { Controller, Get, HttpStatus, UseInterceptors } from \"@nestjs/common\";\r\nimport { AppService } from \"../services\";\r\nimport { ConfigService } from \"@nestjs/config\";\r\nimport { ApiCreatedResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { PathLoggerInterceptor } from \"../interceptors/path-logger.interceptor\";\r\n\r\n@Controller()\r\n@ApiTags(\"Application\")\r\n@UseInterceptors(new PathLoggerInterceptor(AppController.name))\r\nexport class AppController {\r\n  constructor(\r\n    private readonly appService: AppService,\r\n    private readonly configService: ConfigService\r\n  ) {\r\n  }\r\n\r\n  @Get()\r\n  @ApiCreatedResponse({\r\n    description: 'Test if Web API is working correctly',\r\n    status: HttpStatus.OK,\r\n  })\r\n  getData() {\r\n    return this.appService.getData();\r\n  }\r\n}\r\n","import {\r\n  BadRequestException,\r\n  Body,\r\n  Controller,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Request,\r\n  Res, UseInterceptors\r\n} from \"@nestjs/common\";\r\nimport { KeycloakService } from \"../services\";\r\nimport { ApiBearerAuth, ApiBody, ApiOperation, ApiParam, ApiProperty, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { KEYCLOAK_PATH } from \"../constants/controllers/keycloak/path.constant\";\r\nimport { AUTHORIZATION_LOWERCASE } from \"../constants/network/headers.constant\";\r\nimport { AuthenticationService } from \"../services\";\r\nimport { UsernamePasswordLoginResponse } from \"@app/models\";\r\nimport { PathLoggerInterceptor } from \"../interceptors/path-logger.interceptor\";\r\nimport { AccessTokenResponsePayload } from \"../payload/response/refresh_token.response.payload\";\r\nimport { RefreshTokenPayload } from \"../payload/response/refresh-token.request.payload\";\r\nimport { Roles } from \"../decorators/role.decorator\";\r\nimport { Role } from \"../enum/roles.enum\";\r\nimport { FastifyRequest, FastifyReply } from \"fastify\";\r\n\r\nexport class AuthenticationRequest {\r\n  @ApiProperty({\r\n    example: \"admin\"\r\n  })\r\n  username?: string;\r\n  password?: string;\r\n}\r\n\r\nclass GoogleIDTokenRequest {\r\n  @ApiProperty({\r\n    example: \"example-id-token-as-jwt\",\r\n    type: String,\r\n    required: true,\r\n    description: \"JWT ID Token given by Google Authentication Provider\",\r\n    name: \"token\",\r\n    title: \"Google ID Token\"\r\n  })\r\n  token: string;\r\n}\r\n\r\n\r\n@ApiBearerAuth()\r\n@Controller(KEYCLOAK_PATH.requestPath)\r\n@ApiTags(\"Authentication\")\r\n@UseInterceptors(new PathLoggerInterceptor(AuthenticationController.name))\r\nexport class AuthenticationController {\r\n\r\n  constructor(private readonly service: KeycloakService,\r\n              private readonly authenticationService: AuthenticationService) {\r\n  }\r\n\r\n  @HttpCode(HttpStatus.OK)\r\n  @Post(\"info\")\r\n  async validateTokenAndGetUserInfo(@Body() payload: { token: string }) {\r\n    if (Object.keys(payload).length < 1) {\r\n      throw new BadRequestException(\"Must provide access token\");\r\n    }\r\n    return this.service.getUserInfo(payload.token);\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: \"Username password login\",\r\n    description: \"Login into the system using provided username and password\"\r\n  })\r\n  @ApiBody({\r\n    required: true,\r\n    description: \"Contains the username and password value.\",\r\n    type: AuthenticationRequest\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK\r\n  })\r\n  @HttpCode(HttpStatus.OK)\r\n  @Post(KEYCLOAK_PATH.signIn)\r\n  async signIn(@Res({ passthrough: true }) httpResponse: FastifyReply,\r\n               @Body() account: { username: string, password: string }): Promise<Partial<UsernamePasswordLoginResponse>> {\r\n    const resp = await this.authenticationService.handleUsernamePasswordLogin(account);\r\n    httpResponse.header(\"Authorization\", resp.accessToken);\r\n    httpResponse.header(\"AuthorizationRefreshToken\", resp.refreshToken);\r\n    httpResponse.header(\"Set-Cookie\", [\r\n      `accessToken=${resp.accessToken}; Max-Age=999999; HttpOnly; path=/`,\r\n      `refreshToken=${resp.accessToken}; Max-Age=999999; HttpOnly; path=/`\r\n    ]);\r\n\r\n    return {\r\n      email: resp.email,\r\n      id: resp.id,\r\n      googleId: resp.googleId,\r\n      phone: resp.phone,\r\n      username: resp.username,\r\n      keycloakId: resp.keycloakId,\r\n      role: resp.role,\r\n      fullname: resp.fullname,\r\n      avatar: resp.avatar\r\n    };\r\n  }\r\n\r\n  @Post(\"signin/google\")\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({\r\n    summary: \"Login into system using Google ID Token\",\r\n    description: \"Use Google ID Token to login into the system then return the user instance with access token and refresh token\"\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: \"Successfully logged into the system\"\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: \"Invalid Google ID Token credentials\"\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: \"User\"\r\n  })\r\n  async signInWithGoogle(@Res({ passthrough: true }) httpResponse: FastifyReply,\r\n                         @Body() request: GoogleIDTokenRequest) {\r\n    const resp = await this.authenticationService.handleGoogleSignin(request.token);\r\n    httpResponse.header(\"Authorization\", resp.accessToken);\r\n    httpResponse.header(\"AuthorizationRefreshToken\", resp.refreshToken);\r\n    httpResponse.header(\"Set-Cookie\", [\r\n      `accessToken=${resp.accessToken}; Max-Age=999999; HttpOnly; path=/`,\r\n      `refreshToken=${resp.accessToken}; Max-Age=999999; HttpOnly; path=/`\r\n    ]);\r\n    return {\r\n      email: resp.email,\r\n      id: resp.id,\r\n      googleId: resp.googleId,\r\n      phone: resp.phone,\r\n      username: resp.username,\r\n      keycloakId: resp.keycloakId,\r\n      role: resp.role,\r\n      fullname: resp.fullname\r\n    };\r\n  }\r\n\r\n  @Post(KEYCLOAK_PATH.refreshAccessToken)\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({\r\n    summary: \"Refresh access token using provided refresh token\",\r\n    description: \"Provide new access token and new refresh token by using provided refresh token\"\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: \"Successfully provides new access and refresh token\"\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: \"Failed to validate provided refresh token\"\r\n  })\r\n  async refreshAccessToken(@Res({ passthrough: true }) res,\r\n                           @Body() payload: RefreshTokenPayload): Promise<AccessTokenResponsePayload> {\r\n    const response = await this.service.refreshAccessToken(payload);\r\n    res.cookie(\"accessToken\", response.accessToken);\r\n    res.cookie(\"refreshToken\", response.refreshToken);\r\n    return response;\r\n  }\r\n\r\n  @Post(KEYCLOAK_PATH.signOut)\r\n  signOut(@Request() req: Request, @Param(\"id\") id: string) {\r\n    return this.service.signOutKeycloakUser(req.headers[AUTHORIZATION_LOWERCASE], id);\r\n  }\r\n\r\n  @Get(KEYCLOAK_PATH.countUsers)\r\n  countUsers(@Request() request: Request) {\r\n    return this.service.countUsers(request.headers[AUTHORIZATION_LOWERCASE]);\r\n  }\r\n\r\n  @Get(KEYCLOAK_PATH.getUsers)\r\n  getAllKeycloakUsers(@Request() req: Request) {\r\n    return this.service.getAllUsers(req.headers[AUTHORIZATION_LOWERCASE]);\r\n  }\r\n\r\n  @Get(KEYCLOAK_PATH.getUserById)\r\n  @ApiParam({\r\n    name: 'id',\r\n    description: \"The ID of the existed keycloak user\",\r\n    type: String,\r\n    required: true,\r\n    example: 'ABCD1234',\r\n  })\r\n  getKeycloakUserById(@Request() req: Request, @Param(\"id\") id: string) {\r\n    return this.service.getUserById(req.headers[AUTHORIZATION_LOWERCASE], id);\r\n  }\r\n\r\n  @Post(KEYCLOAK_PATH.createNewUser)\r\n  createUser(@Body() user, @Request() req: Request) {\r\n    return this.service.createKeycloakUser(req.headers[AUTHORIZATION_LOWERCASE], user);\r\n  }\r\n\r\n  @Put(KEYCLOAK_PATH.refreshUserPasswordById)\r\n  @ApiParam({\r\n    name: \"id\",\r\n    description: \"The ID of the existed keycloak user\",\r\n    type: String,\r\n    required: true,\r\n    example: \"ABCD1234\"\r\n  })\r\n  @Roles(Role.APP_STAFF)\r\n  resetKeycloakUserPassword(@Request() req: Request, @Param(\"id\") id, @Body() password) {\r\n    return this.service.resetKeycloakUserById(req, id, password.rawPasswword);\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  DefaultValuePipe,\r\n  Delete,\r\n  Get,\r\n  HttpStatus,\r\n  Param,\r\n  ParseIntPipe,\r\n  Post,\r\n  Put,\r\n  Query,\r\n} from '@nestjs/common';\r\nimport { BookingReasonService } from '../services/booking-reason.service';\r\nimport { BookingReason } from '../models/booking-reason.entity';\r\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { Roles } from '../decorators/role.decorator';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { User } from '../decorators/keycloak-user.decorator';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { BookingReasonUpdateRequestPayload } from '../payload/request/booking-reason.request.payload';\r\nimport { PaginationParams } from './pagination.model';\r\n\r\n@Controller('/v1/booking-reasons')\r\nexport class BookingReasonController {\r\n  constructor(private readonly service: BookingReasonService) {}\r\n\r\n  @Get()\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched booking reason by pagination',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get booking reason type by pagination',\r\n    description: 'Get booking reason type by pagination',\r\n  })\r\n  getBookingReasonTypes(@Query() payload: PaginationParams) {\r\n    return this.service.getBookingReasonTypesWithPagination(\r\n      payload as PaginationParams\r\n    );\r\n  }\r\n\r\n  @Get('name')\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully got booking reason',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get booking reason',\r\n    description: 'Get booking reason',\r\n  })\r\n  getBookingReasonNames() {\r\n    return this.service.getBookingReasonNames();\r\n  }\r\n\r\n  @Get(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched room type by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get booking-reason by id',\r\n    description: 'Get booking-reason by id',\r\n  })\r\n  getBookingReasonById(@Param('id') id: string) {\r\n    return this.service.getBookingReasonById(id);\r\n  }\r\n\r\n  @Post()\r\n  @ApiOperation({\r\n    summary: 'Add booking reason',\r\n    description: 'Add booking reason',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully added booking reason',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  addNewBookingReason(\r\n    @User() user: KeycloakUserInstance,\r\n    @Body() payload: { name: string; description: string }\r\n  ) {\r\n    return this.service.createNewBookingReason(user.account_id, payload);\r\n  }\r\n\r\n  @Put(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully updated booking-reason by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Update booking-reason by id',\r\n    description: 'Update booking-reason by id',\r\n  })\r\n  updateBookingReasonById(\r\n    @Body() payload: BookingReasonUpdateRequestPayload,\r\n    @Param('id') id: string,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.updateBookingReasonById(user.account_id, payload, id);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully deleted booking reason',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Deleted booking reason',\r\n    description: 'Deleted booking reason',\r\n  })\r\n  deleteBookingReasonById(\r\n    @Param('id') id: string,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.deleteBookingReasonById(user.account_id, id);\r\n  }\r\n\r\n  @Get('deleted')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully deleted reason',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get deleted reason',\r\n    description: 'Get deleted reason',\r\n  })\r\n  getDeletedBookingReasons(@Query('search') search: string) {\r\n    return this.service.getDeletedReasons(search);\r\n  }\r\n\r\n  @Put('restore-deleted/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully restored deleted booking reason by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description:\r\n      'Request params for deleted booking reason type is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Successfully restored deleted booking reason type by id',\r\n    description: 'Successfully restored deleted booking reason type by id',\r\n  })\r\n  restoreDeletedReasonById(\r\n    @Param('id') id: string,\r\n    @User() keycloakUser: KeycloakUserInstance\r\n  ) {\r\n    return this.service.restoreDeletedReasonById(keycloakUser.account_id, id);\r\n  }\r\n\r\n  @Delete('permanent/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully permanent deleted room type by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description:\r\n      'Request params for permanent delete room type is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Permanently delete room type by id',\r\n    description: 'Permanently delete room type by id',\r\n  })\r\n  permanentlyDeleteReasonById(@Param('id') id: string) {\r\n    return this.service.permanentlyDeleteReasonById(id);\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  DefaultValuePipe,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Param,\r\n  ParseIntPipe,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  UseInterceptors,\r\n} from '@nestjs/common';\r\nimport { BookingRoomService } from '../services';\r\nimport { BookingRoomResponseDTO } from '../dto/booking-room.response.dto';\r\nimport { WishlistBookingRoomResponseDTO } from '../dto/wishlist-booking-room.response.dto';\r\nimport { KeycloakUser, User } from '../decorators/keycloak-user.decorator';\r\nimport { WishlistBookingRoomRequestDTO } from '../dto/wishlist-booking-room.request.dto';\r\nimport {\r\n  ApiBearerAuth,\r\n  ApiOperation,\r\n  ApiParam,\r\n  ApiResponse,\r\n  ApiTags,\r\n} from '@nestjs/swagger';\r\nimport { PathLoggerInterceptor } from '../interceptors/path-logger.interceptor';\r\nimport { Roles } from '../decorators/role.decorator';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { GetBookingRoomsPaginationPayload } from '../payload/request/get-booking-rooms-pagination.payload';\r\nimport { BookingRequest } from '../models';\r\nimport { BookingRequestAddRequestPayload } from '../payload/request/booking-request-add.payload';\r\nimport { GetAllBookingRequestsFilter } from '../payload/request/get-all-booking-rooms-filter.payload';\r\nimport { CancelRequestPayload } from '../payload/request/booking-request-cancel.payload';\r\n\r\n@Controller('/v1/booking-room')\r\n@ApiTags('Booking Room')\r\n@UseInterceptors(new PathLoggerInterceptor(BookingRoomController.name))\r\n@ApiBearerAuth()\r\nexport class BookingRoomController {\r\n  constructor(private readonly service: BookingRoomService) {}\r\n\r\n  @Get('search')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  getAllBookingRoomsPagination(\r\n    @Query('search', new DefaultValuePipe('')) search: string,\r\n    @Query('sort', new DefaultValuePipe('requested_at')) sort: string,\r\n    @Query('limit', new DefaultValuePipe(5), ParseIntPipe) limit: number,\r\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\r\n    @Query('reasonType', new DefaultValuePipe('')) reasonType: string,\r\n    @Query('checkInAt', new DefaultValuePipe('')) checkInAt: string,\r\n    @Query('checkOutAt', new DefaultValuePipe('')) checkOutAt: string,\r\n    @Query('status', new DefaultValuePipe('')) status: string,\r\n    @Query('dir', new DefaultValuePipe('ASC')) dir: string,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.getAllBookingRoomsPagination(\r\n      {\r\n        checkOutAt: checkOutAt,\r\n        checkInAt: checkInAt,\r\n        search: search,\r\n        dir: dir,\r\n        page: page,\r\n        sort: sort,\r\n        limit: limit,\r\n        reasonType: reasonType,\r\n        status: status,\r\n      } as GetBookingRoomsPaginationPayload,\r\n      user.account_id\r\n    );\r\n  }\r\n\r\n  @Get('list-booking-by-room-in-week')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  getBookingByRoomInWeek(\r\n    @Query('roomId', new DefaultValuePipe('')) roomId: string,\r\n    @Query('date', new DefaultValuePipe('')) date: string\r\n  ) {\r\n    return this.service.getBookingByRoomInWeek({\r\n      roomId: roomId,\r\n      date: date,\r\n    });\r\n  }\r\n\r\n  @Get('list-booking-by-slot')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  getBookingBySlot(@Query('slotId', new DefaultValuePipe('')) slotId: string) {\r\n    return this.service.getRequestBySlotId(slotId);\r\n  }\r\n\r\n  @Get('list-booking-by-room')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'One or more payload parameters are invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched deleted rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getRequestByRoomId(@Query('roomId') roomId = ''): Promise<BookingRequest[]> {\r\n    return this.service.getRequestByRoomId(roomId);\r\n  }\r\n\r\n  @Get('list-booking-by-device')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'One or more payload parameters are invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched deleted rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getRequestByDeviceId(\r\n    @Query('deviceId') deviceId = ''\r\n  ): Promise<BookingRequest[]> {\r\n    return this.service.getRequestByDeviceId(deviceId);\r\n  }\r\n\r\n  @Get('list-booking-with-same-slot')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  getRequestWithSameSlot(\r\n    @Query('checkinSlotId', new DefaultValuePipe('')) checkinSlotId: string,\r\n    @Query('checkoutSlotId', new DefaultValuePipe('')) checkoutSlotId: string,\r\n    @Query('roomId', new DefaultValuePipe('')) roomId: string,\r\n    @Query('requestId', new DefaultValuePipe('')) requestId: string,\r\n    @Query('date', new DefaultValuePipe('')) date: string\r\n  ) {\r\n    return this.service.getRequestOfRoomWithSameSlot({\r\n      roomId: roomId,\r\n      requestId: requestId,\r\n      date: date,\r\n      checkinSlotId: checkinSlotId,\r\n      checkoutSlotId: checkoutSlotId,\r\n    });\r\n  }\r\n\r\n  @Get('list-room-free-at-time')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  getRoomFreeAtTime(\r\n    @Query('checkinSlotId', new DefaultValuePipe('')) checkinSlotId: string,\r\n    @Query('checkoutSlotId', new DefaultValuePipe('')) checkoutSlotId: string,\r\n    @Query('date', new DefaultValuePipe('')) date: string\r\n  ) {\r\n    return this.service.getRoomFreeAtTime({\r\n      date: date,\r\n      checkinSlotId: checkinSlotId,\r\n      checkoutSlotId: checkoutSlotId,\r\n    });\r\n  }\r\n\r\n  @Get('list-room-free-at-multi-date')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  getRoomFreeAtMultiDate(\r\n    @Query('checkinSlot', new DefaultValuePipe('')) checkinSlot: number,\r\n    @Query('checkoutSlot', new DefaultValuePipe('')) checkoutSlot: number,\r\n    @Query('dateStart', new DefaultValuePipe('')) dateStart: string,\r\n    @Query('dateEnd', new DefaultValuePipe('')) dateEnd: string\r\n  ) {\r\n    return this.service.getRoomFreeAtMultiDate({\r\n      dateStart: dateStart,\r\n      dateEnd: dateEnd,\r\n      checkinSlot: checkinSlot,\r\n      checkoutSlot: checkoutSlot,\r\n    });\r\n  }\r\n\r\n  @Get('get-booked-requests')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  getListRequestBookedInDayAndSlot(\r\n    @Query('checkinSlotId', new DefaultValuePipe('')) checkinSlotId: string,\r\n    @Query('checkoutSlotId', new DefaultValuePipe('')) checkoutSlotId: string,\r\n    @Query('date', new DefaultValuePipe('')) date: string\r\n  ) {\r\n    return this.service.getListRequestBookedInDayAndSlot({\r\n      date: date,\r\n      checkinSlotId: checkinSlotId,\r\n      checkoutSlotId: checkoutSlotId,\r\n    });\r\n  }\r\n\r\n  @Get('by-account-id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'One or more payload parameters are invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched deleted rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getRequestBookingByAccountId(\r\n    @Query('account-id') accountId = ''\r\n  ): Promise<BookingRequest[]> {\r\n    return this.service.getRequestBookingByAccountId(accountId);\r\n  }\r\n\r\n  @Get('devices-use-in-request/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'One or more payload parameters are invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched device use in request',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getDevicesUseInRequest(\r\n    @Param('id') requestId: string\r\n  ): Promise<BookingRequest[]> {\r\n    return this.service.getDevicesUseInRequest(requestId);\r\n  }\r\n\r\n  @Get(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiOperation({\r\n    summary: 'Retrieving booking room detail',\r\n    description: 'Retrieving a booking room detail',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieved a list of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving a list of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getBookingRoomById(@Param('id') id: string) {\r\n    return this.service.getBookingRoomById(id);\r\n  }\r\n\r\n  @Get('rooms')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  getChoosingBookingRooms(@Query('filter') filter: string) {\r\n    return this.service.getChoosingBookingRooms(filter);\r\n  }\r\n\r\n  @Get('current-booking-list')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  getCurrentRoomBookingListOfCurrentUser(@User() user: KeycloakUserInstance) {\r\n    return this.service.getCurrentRoomBookingList(user.account_id);\r\n  }\r\n\r\n  @Get('current-booking/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  getCurrentRoomBookingDetail(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string }\r\n  ) {\r\n    return this.service.getCurrentRoomBookingDetail(\r\n      user.account_id,\r\n      payload.id\r\n    );\r\n  }\r\n\r\n  @Get('count-pending')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'One or more payload parameters are invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully get count request booking pending',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getCountRequestBookingPending() {\r\n    return this.service.getCountRequestBookingPending();\r\n  }\r\n\r\n  @Get('/statistics')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Retrieving a statistic of booking rooms',\r\n    description: 'Retrieving a statistic of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieved a statistic of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving a statistic of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getStatistics() {\r\n    return this.service.getStatistics();\r\n  }\r\n\r\n  @Get('/count-request/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiOperation({\r\n    summary: 'Retrieving a count of booking rooms',\r\n    description: 'Retrieving a count of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieved a count of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving a count of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getCountRequestInWeekOfUser(\r\n    @Param() payload: { id: string },\r\n    @Query('date') date: string\r\n  ) {\r\n    return this.service.getCountRequestInWeekOfUser(payload.id, date);\r\n  }\r\n\r\n  @Get()\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Retrieving a list of booking rooms',\r\n    description: 'Retrieving a list of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieved a list of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving a list of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiParam({\r\n    name: 'roomName',\r\n    description: 'The name of the library room',\r\n    example: 'LB01',\r\n    type: String,\r\n    required: true,\r\n  })\r\n  getBookingRooms(\r\n    @Query('search') search: string,\r\n    @Query('sorting') sorting: string,\r\n    @Query('slot') slot: number\r\n  ): Promise<BookingRoomResponseDTO[]> {\r\n    return this.service.getBookingRooms({\r\n      sorting: sorting,\r\n      search: search,\r\n      slot: slot,\r\n    });\r\n  }\r\n\r\n  @Post('new-request')\r\n  @HttpCode(HttpStatus.OK)\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiOperation({\r\n    summary: 'Create a new request',\r\n    description: 'Create new request with the provided payload',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.CREATED,\r\n    description: 'Successfully created a new request',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request payload for request is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  addNewRequest(\r\n    @User() user: KeycloakUserInstance,\r\n    @Body() request: BookingRequestAddRequestPayload\r\n  ) {\r\n    return this.service.addNewRequest(request, user.account_id);\r\n  }\r\n\r\n  @Post('multi-booking')\r\n  @HttpCode(HttpStatus.OK)\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiOperation({\r\n    summary: 'Create a multi request',\r\n    description: 'Create multi request with the provided payload',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.CREATED,\r\n    description: 'Successfully created a multi request',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request payload for request is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  addMultiRequest(\r\n    @User() user: KeycloakUserInstance,\r\n    @Body() request: BookingRequestAddRequestPayload\r\n  ) {\r\n    return this.service.addMultiRequest(request, user.account_id);\r\n  }\r\n\r\n  @Put('accept/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Accept request by id',\r\n    description: 'Accept request by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully accept the request',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while accept the request',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  acceptRequestById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string }\r\n  ) {\r\n    return this.service.acceptById(user.account_id, payload.id);\r\n  }\r\n\r\n  @Put('accept-checkin/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  acceptCheckInBookingRequestById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string }\r\n  ) {\r\n    return this.service.acceptCheckinById(user.account_id, payload.id);\r\n  }\r\n\r\n  @Put('reject-checkin/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  rejectCheckinRequestById(\r\n    @Param('id') id: string,\r\n    @Body() payload: CancelRequestPayload,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.rejectCheckinById(user.account_id, id, payload.reason);\r\n  }\r\n\r\n  @Put('accept-checkout/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  acceptCheckOutBookingRequestById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string }\r\n  ) {\r\n    return this.service.acceptCheckoutById(user.account_id, payload.id);\r\n  }\r\n\r\n  @Put('reject-checkout/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  rejectCheckOutRequestById(\r\n    @Param('id') id: string,\r\n    @Body() payload: CancelRequestPayload,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.rejectCheckoutById(user.account_id, id, payload.reason);\r\n  }\r\n\r\n  @Put('reject/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Reject request by id',\r\n    description: 'Reject request by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully reject the request',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while reject the request',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  rejectRequestById(\r\n    @Param('id') id: string,\r\n    @Body() payload: CancelRequestPayload,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.rejectById(user.account_id, id, payload.reason);\r\n  }\r\n\r\n  @Put('cancel/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  cancelRoomBookingById(\r\n    @Param('id') id: string,\r\n    @Body() payload: CancelRequestPayload,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.cancelRoomBookingById(\r\n      user.account_id,\r\n      id,\r\n      payload.reason\r\n    );\r\n  }\r\n\r\n  @Get('accounts-name')\r\n  getUsernameList() {\r\n    return this.service.getUsernameList();\r\n  }\r\n\r\n  // @Get('rooms-name')\r\n  // getRoomsName() {\r\n  //   return this.service.getRoomNames();\r\n  // }\r\n\r\n  // @Get('devices')\r\n  // @Roles(Role.APP_LIBRARIAN, Role.APP_ADMIN, Role.APP_MANAGER, Role.APP_STAFF)\r\n  // getBookingRoomDevices(\r\n  //   @Query('name') name: string,\r\n  //   @Query('type') type: string,\r\n  //   @Query('sort') sort: string\r\n  // ) {\r\n  //   return this.service.getBookingRoomDevices(name, type, sort);\r\n  // }\r\n\r\n  @Get('wishlist')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiOperation({\r\n    summary: 'Retrieving a list of booking rooms in wishlist',\r\n    description: 'Retrieving a list of booking rooms in wishlist',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieved a list of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving a list of booking rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiParam({\r\n    name: 'roomName',\r\n    description: 'The name of the library room',\r\n    example: 'LB01',\r\n    type: String,\r\n    required: true,\r\n  })\r\n  getWishlistBookingRooms(\r\n    @User() user: KeycloakUserInstance,\r\n    @Query('roomName') roomName: string,\r\n    @Query('from') slotFrom: number,\r\n    @Query('to') slotTo: number\r\n  ): Promise<WishlistBookingRoomResponseDTO[]> {\r\n    return this.service.getWishlistBookingRooms(\r\n      roomName,\r\n\r\n      slotFrom,\r\n      slotTo,\r\n      user.account_id\r\n    );\r\n  }\r\n\r\n  @Post('add-to-wishlist')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiOperation({\r\n    summary: 'Add booking room to wishlist',\r\n    description: 'Add requested booking room to wishlist',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully added the booking room to the wishlist',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while adding the booking room to the wishlist',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  addToBookingRoomWishlist(\r\n    @User() user: KeycloakUserInstance,\r\n    @Body() bookingRoomWishlist: WishlistBookingRoomRequestDTO\r\n  ): Promise<any> {\r\n    return this.service.addToBookingRoomWishlist(\r\n      user.account_id,\r\n      bookingRoomWishlist\r\n    );\r\n  }\r\n\r\n  @Delete('remove-from-wishlist')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  removeFromBookingRoomWishlist(\r\n    @User() user: KeycloakUserInstance,\r\n    @Query('roomId') roomId: string,\r\n    @Query('slot') slot: number\r\n  ) {\r\n    return this.service.removeFromBookingRoomWishlist(user, {\r\n      roomId: roomId,\r\n      slot: slot,\r\n    });\r\n  }\r\n\r\n  @Get('filter')\r\n  getAllBookingRoomRequestsByFilter(\r\n    @Query() filters: GetAllBookingRequestsFilter,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.getAllBookingRoomsRequestsByFilter(\r\n      user.account_id,\r\n      filters\r\n    );\r\n  }\r\n\r\n  @Get('check-in')\r\n  getCurrentBookingCheckin(@User() user: KeycloakUserInstance) {\r\n    return this.service.getCurrentBookingCheckin(user.account_id);\r\n  }\r\n\r\n  @Post('attempt-checkin/:id')\r\n  attemptCheckin(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param('id') bookingRequestId: string,\r\n    @Body()\r\n    checkinSignature: {\r\n      signature: string;\r\n    }\r\n  ) {\r\n    return this.service.attemptCheckin(\r\n      user.account_id,\r\n      bookingRequestId,\r\n      checkinSignature\r\n    );\r\n  }\r\n\r\n  @Get('check-out')\r\n  getCurrenBookingCheckoutInformation(@User() user: KeycloakUserInstance) {\r\n    return this.service.getCurrentBookingCheckoutInformation(user.account_id);\r\n  }\r\n\r\n  @Post('attempt-checkout/:id')\r\n  attemptCheckout(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param('id') bookingRequestId: string,\r\n    @Body()\r\n    checkinSignature: {\r\n      signature: string;\r\n    }\r\n  ) {\r\n    return this.service.attemptCheckout(\r\n      user.account_id,\r\n      bookingRequestId,\r\n      checkinSignature\r\n    );\r\n  }\r\n\r\n  @Post('check-out/:id')\r\n  checkoutBookingRoom(\r\n    @Param('id') bookingRoomId: string,\r\n    @User() keycloakUser: KeycloakUserInstance\r\n  ) {\r\n    return this.service.checkOutBookingRoom(\r\n      bookingRoomId,\r\n      keycloakUser.account_id\r\n    );\r\n  }\r\n\r\n  @Get('history')\r\n  getAllBookingRoomHistory(\r\n    @User() keycloakUser: KeycloakUserInstance,\r\n    @Query() filters: GetAllBookingRequestsFilter\r\n  ) {\r\n    return this.service.getAllBookingRoomHistory(\r\n      keycloakUser.account_id,\r\n      filters\r\n    );\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Query,\r\n} from '@nestjs/common';\r\nimport { Pagination } from 'nestjs-typeorm-paginate';\r\nimport { DeviceType } from '../models/device-type.entity';\r\nimport { DeviceTypeService } from '../services/device-type.service';\r\nimport { User } from '../decorators/keycloak-user.decorator';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { Roles } from '../decorators/role.decorator';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { PaginationParams } from './pagination.model';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\n\r\n@Controller('/v1/device-type')\r\nexport class DeviceTypeController {\r\n  constructor(private readonly service: DeviceTypeService) {}\r\n\r\n  @Get()\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully got get all device types',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get all device types',\r\n    description: 'Get all device types',\r\n  })\r\n  getAllDeviceTypes(\r\n    @Query() payload: PaginationParams\r\n  ): Promise<Pagination<DeviceType>> {\r\n    return this.service.getAllDeviceTypes(payload as PaginationParams);\r\n  }\r\n\r\n  @Get('name')\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully got device type name',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get device type name',\r\n    description: 'Get device type name',\r\n  })\r\n  getDeviceTypeNames() {\r\n    return this.service.getDeviceTypeNames();\r\n  }\r\n\r\n  @Get(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched device type by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get device type by id',\r\n    description: 'Get device type by id',\r\n  })\r\n  getDeviceTypeById(@Param('id') id: string): Promise<DeviceType> {\r\n    return this.service.getDeviceTypeById(id);\r\n  }\r\n\r\n  @Post()\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({\r\n    summary: 'Add device type',\r\n    description: 'Add device type',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully added device type',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  addNewDeviceType(\r\n    @User() user: KeycloakUserInstance,\r\n    @Body() payload: MasterDataAddRequestPayload\r\n  ) {\r\n    return this.service.addNewDeviceType(user.account_id, payload);\r\n  }\r\n\r\n  @Put(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully updated device type by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Update device type by id',\r\n    description: 'Update device type by id',\r\n  })\r\n  updateDeviceTypeById(\r\n    @Param('id') id: string,\r\n    @Body() payload: MasterDataAddRequestPayload,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.updateDeviceTypeById(user.account_id, id, payload);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully deleted device types',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Deleted device types',\r\n    description: 'Deleted device types',\r\n  })\r\n  deleteDeviceTypeById(\r\n    @Param('id') id: string,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.deleteDeviceTypeById(user.account_id, id);\r\n  }\r\n\r\n  @Get('deleted')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully deleted device types',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get deleted device types',\r\n    description: 'Get deleted device types',\r\n  })\r\n  getDeletedDeviceTypes(@Query('search') search: string) {\r\n    return this.service.getDeletedDeviceTypes(search);\r\n  }\r\n\r\n\r\n  @Put('restore-deleted/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully restored deleted device by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for deleted device type is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Successfully restored deleted device type by id',\r\n    description: 'Successfully restored deleted device type by id',\r\n  })\r\n  restoreDeletedTypeById(\r\n    @Param('id') id: string,\r\n    @User() keycloakUser: KeycloakUserInstance\r\n  ) {\r\n    return this.service.restoreDeletedDeviceTypeById(keycloakUser.account_id, id);\r\n  }\r\n\r\n  @Delete('permanent/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully permanent deleted device type by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description:\r\n      'Request params for permanent delete device type is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Permanently delete device type by id',\r\n    description: 'Permanently delete device type by id',\r\n  })\r\n  permanentlyDeleteDeviceTypeById(@Param('id') id: string) {\r\n    return this.service.permanentlyDeleteDeviceTypeById(id);\r\n  }\r\n}\r\n","import { PaginationParams } from './pagination.model';\r\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\r\n\r\nexport class DevicesPaginationParams extends PaginationParams {\r\n  @IsString({\r\n    message: 'Room type must be a string',\r\n  })\r\n  @IsOptional()\r\n  deviceType: string;\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  UseInterceptors,\r\n  UsePipes,\r\n} from '@nestjs/common';\r\nimport { DevicesService } from '../services';\r\nimport {\r\n  ApiBearerAuth,\r\n  ApiOperation,\r\n  ApiResponse,\r\n  ApiTags,\r\n} from '@nestjs/swagger';\r\nimport { DevicesValidation } from '../pipes/validation/devices.validation';\r\nimport { PathLoggerInterceptor } from '../interceptors/path-logger.interceptor';\r\nimport { Roles } from '../decorators/role.decorator';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { Devices} from '../models';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { User } from '../decorators/keycloak-user.decorator';\r\nimport { DevicesPaginationParams } from './devices-pagination.model';\r\nimport { DataAddRequestPayload } from '../payload/request/data-add.request.payload';\r\n\r\n@Controller('/v1/devices')\r\n@ApiBearerAuth()\r\n@ApiTags('Devices')\r\n@UseInterceptors(new PathLoggerInterceptor(DevicesController.name))\r\nexport class DevicesController {\r\n  constructor(private readonly service: DevicesService) {}\r\n\r\n  @Get()\r\n  @UsePipes(new DevicesValidation())\r\n  @HttpCode(HttpStatus.OK)\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'One or more payload parameters are invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched devices',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges to access this endpoint',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getDevices(@Query() payload: DevicesPaginationParams) {\r\n    return this.service.getAll(payload);\r\n  }\r\n\r\n  @Get('name')\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully got device type name',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get device type name',\r\n    description: 'Get device type name',\r\n  })\r\n  getDeviceNames() {\r\n    return this.service.getDeviceNames();\r\n  }\r\n\r\n  @Get('by-device-type')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'One or more payload parameters are invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched deleted devices',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getDevicesByDeviceType(@Query('type') deviceTypeId = ''): Promise<Devices[]> {\r\n    return this.service.getDevicesByDeviceType(deviceTypeId);\r\n  }\r\n\r\n  @Get('find/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Retrieving device by id',\r\n    description: 'Retrieving device by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieving device by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving device by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getDeviceById(@Param() payload: { id: string }): Promise<Devices> {\r\n    return this.service.findById(payload.id);\r\n  }\r\n\r\n  @Post('add')\r\n  @HttpCode(HttpStatus.OK)\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Create a new device',\r\n    description: 'Create new device with the provided payload',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.CREATED,\r\n    description: 'Successfully created a new device',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request payload for device is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  createNewDevice(\r\n    @User() user: KeycloakUserInstance,\r\n    @Body() device: DataAddRequestPayload\r\n  ) {\r\n    return this.service.add(device, user.account_id);\r\n  }\r\n\r\n  @Put('update/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Update the device by id',\r\n    description: 'Update the device by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully updated the device',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while updating the device',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  updateDeviceById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string },\r\n    @Body() body: DataAddRequestPayload\r\n  ) {\r\n    return this.service.updateById(user.account_id, payload.id, body);\r\n  }\r\n\r\n  @Put('disable/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Removing the device by id',\r\n    description: 'Removing the device by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully removed the device',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while removing the device',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  disableDeviceById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param('id') id: string\r\n  ) {\r\n    return this.service.disableById(user.account_id, id);\r\n  }\r\n\r\n  @Get('disabled')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Retrieving a list of disabled devices',\r\n    description: 'Retrieving a list of disabled devices',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieving a list of disabled devices',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving a list of disabled devices',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getDisableDevices(@Query('search') search = ''): Promise<Devices[]> {\r\n    return this.service.getDisabledDevices(search);\r\n  }\r\n\r\n  @Put('restore-disabled/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Restore the disabled device by id',\r\n    description: 'Restore the disabled device by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully restored the disabled device',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while restoring the disabled device',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  restoreDisabledDeviceById(\r\n    @Param() payload: { id: string },\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.handleRestoreDisabledDeviceById( user.account_id, payload.id);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Removing the device by id',\r\n    description: 'Removing the device by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully removed the device',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while removing the device',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  deleteDeviceById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string }\r\n  ) {\r\n    return this.service.deleteById(user.account_id, payload.id);\r\n  }\r\n\r\n  @Get('deleted')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Retrieving a list of deleted devices',\r\n    description: 'Retrieving a list of deleted devices',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieving a list of deleted devices',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving a list of deleted devices',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getDeletedDevices(@Query('search') search = ''): Promise<Devices[]> {\r\n    return this.service.getDeletedDevices(search);\r\n  }\r\n\r\n  @Put('restore-deleted/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Restore the deleted device by id',\r\n    description: 'Restore the deleted device by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully restored the deleted device',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while restoring the deleted device',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  restoreDeletedDeviceById(@Param() payload: { id: string }) {\r\n    return this.service.handleRestoreDeletedDeviceById(payload.id);\r\n  }\r\n}\r\n","import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Param, Post, Put, Query } from '@nestjs/common';\r\nimport { FeedbackTypeService } from '../services';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { Roles } from '../decorators/role.decorator';\r\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { PaginationParams } from './pagination.model';\r\nimport { Pagination } from 'nestjs-typeorm-paginate';\r\nimport { FeedbackType } from '../models';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { User } from '../decorators/keycloak-user.decorator';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\n\r\n\r\n\r\n@Controller('/v1/feedback-types')\r\nexport class FeedbackTypeController {\r\n  constructor(private readonly service: FeedbackTypeService) {}\r\n\r\n  @Get()\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully got get all feedback types',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get all feedback types',\r\n    description: 'Get all feedback types',\r\n  })\r\n  getAllDeviceTypes(\r\n    @Query() payload: PaginationParams\r\n  ): Promise<Pagination<FeedbackType>> {\r\n    return this.service.getAllFeedbackTypes(payload as PaginationParams);\r\n  }\r\n\r\n  @Get('name')\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully got feedback type name',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get feedback type name',\r\n    description: 'Get feedback type name',\r\n  })\r\n  getFeedbackTypeNames() {\r\n    return this.service.getFeedbackTypeNames();\r\n  }\r\n\r\n  @Get(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched feedback type by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get feedback type by id',\r\n    description: 'Get feedback type by id',\r\n  })\r\n  getFeedbackTypeById(@Param('id') id: string): Promise<FeedbackType> {\r\n    return this.service.getFeedbackTypeById(id);\r\n  }\r\n\r\n  @Post()\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({\r\n    summary: 'Add feedback type',\r\n    description: 'Add feedback type',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully added feedback type',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  addNewFeedbackType(\r\n    @User() user: KeycloakUserInstance,\r\n    @Body() payload: MasterDataAddRequestPayload\r\n  ) {\r\n    return this.service.addNewFeedbackType(user.account_id, payload);\r\n  }\r\n\r\n  @Put(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully updated feedback type by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Update feedback type by id',\r\n    description: 'Update feedback type by id',\r\n  })\r\n  updateFeedbackTypeById(\r\n    @Param('id') id: string,\r\n    @Body() payload: MasterDataAddRequestPayload,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.updateFeedbackTypeById(user.account_id, id, payload);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully deleted feedback types',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Deleted feedback types',\r\n    description: 'Deleted feedback types',\r\n  })\r\n  deleteFeedbackTypeById(\r\n    @Param('id') id: string,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.deleteFeedbackTypeById(user.account_id, id);\r\n  }\r\n\r\n  @Get('deleted')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully deleted feedback types',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get deleted feedback types',\r\n    description: 'Get deleted feedback types',\r\n  })\r\n  getDeletedFeedbackTypes(@Query('search') search: string) {\r\n    return this.service.getDeletedFeedbackTypes(search);\r\n  }\r\n\r\n\r\n  @Put('restore-deleted/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully restored deleted feedback by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for deleted feedback type is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Successfully restored deleted feedback type by id',\r\n    description: 'Successfully restored deleted feedback type by id',\r\n  })\r\n  restoreDeletedTypeById(\r\n    @Param('id') id: string,\r\n    @User() keycloakUser: KeycloakUserInstance\r\n  ) {\r\n    return this.service.restoreDeletedFeedbackTypeById(keycloakUser.account_id, id);\r\n  }\r\n\r\n  // @Delete('permanent/:id')\r\n  // @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  // @ApiResponse({\r\n  //   status: HttpStatus.OK,\r\n  //   description: 'Successfully permanent deleted feedback type by id',\r\n  // })\r\n  // @ApiResponse({\r\n  //   status: HttpStatus.BAD_REQUEST,\r\n  //   description:\r\n  //     'Request params for permanent delete feedback type is not validated',\r\n  // })\r\n  // @ApiResponse({\r\n  //   status: HttpStatus.UNAUTHORIZED,\r\n  //   description: 'Access token is invalidated',\r\n  // })\r\n  // @ApiResponse({\r\n  //   status: HttpStatus.FORBIDDEN,\r\n  //   description: 'Insufficient privileges',\r\n  // })\r\n  // @ApiOperation({\r\n  //   summary: 'Permanently delete feedback type by id',\r\n  //   description: 'Permanently delete feedback type by id',\r\n  // })\r\n  // permanentlyDeleteFeedbackTypeById(@Param('id') id: string) {\r\n  //   return this.service.permanentlyDeleteFeedbackTypeById(id);\r\n  // }\r\n}\r\n","import { Body, Controller, Get, HttpCode, HttpStatus, Param, Post, Put, Query } from '@nestjs/common';\r\nimport { FeedbackService } from '../services';\r\nimport { Roles } from '../decorators/role.decorator';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { PaginationParams } from './pagination.model';\r\nimport { Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Feedback } from '../models';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { User } from '../decorators/keycloak-user.decorator';\r\nimport { FeedbackSendRequestPayload } from '../payload/request/feedback-send.request.payload';\r\nimport { FeedbackResolveRequestPayload } from '../payload/request/feedback-resolve.request.payload';\r\n\r\n@Controller('/v1/feedbacks')\r\nexport class FeedbackController {\r\n  constructor(private readonly service: FeedbackService) {}\r\n\r\n  @Get()\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully got get all feedback',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get all feedback',\r\n    description: 'Get all feedback',\r\n  })\r\n  getAllFeedbacks(\r\n    @Query() payload: PaginationParams\r\n  ): Promise<Pagination<Feedback>> {\r\n    return this.service.getAllFeedbacks(payload as PaginationParams);\r\n  }\r\n\r\n  @Get(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched feedback by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get feedback by id',\r\n    description: 'Get feedback by id',\r\n  })\r\n  getFeedbackById(@Param('id') id: string) {\r\n    return this.service.getFeedbackById(id);\r\n  }\r\n\r\n  @Post('send-feedback')\r\n  @Roles(Role.APP_STAFF, Role.APP_LIBRARIAN)\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({\r\n    summary: 'Send feedback',\r\n    description: 'Send feedback',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully added feedback',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  addNewFeedbackType(\r\n    @User() user: KeycloakUserInstance,\r\n    @Body() payload: FeedbackSendRequestPayload\r\n  ) {\r\n    return this.service.addNewFeedback(user.account_id, payload);\r\n  }\r\n\r\n  @Put('resolve/:id')\r\n  @Roles(Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully resolve feedback by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Resolve feedback by id',\r\n    description: 'Resolve feedback by id',\r\n  })\r\n  resolveFeedbackById(\r\n    @Param('id') id: string,\r\n    @Body() payload: FeedbackResolveRequestPayload,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.resolveFeedbackById(user.account_id, id, payload);\r\n  }\r\n\r\n  @Put('reject/:id')\r\n  @Roles(Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully Rejected feedback by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Rejected feedback by id',\r\n    description: 'Rejected feedback by id',\r\n  })\r\n  rejectFeedbackById(\r\n    @Param('id') id: string,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.rejectFeedbackById(user.account_id, id);\r\n  }\r\n}\r\n","import { Controller, Get, Req, UseGuards, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiTags } from \"@nestjs/swagger\";\r\nimport { PathLoggerInterceptor } from \"../interceptors/path-logger.interceptor\";\r\nimport AuthGuard from \"../guards/auth.guard\";\r\nimport { FastifyRequest } from \"fastify\";\r\n\r\n@Controller(\"/v1/health\")\r\n@ApiTags(\"Health Check\")\r\n@UseInterceptors(new PathLoggerInterceptor(HealthCheckController.name))\r\nexport class HealthCheckController {\r\n\r\n\r\n  @ApiOperation({\r\n    description: \"Health check endpoint without authentication\"\r\n  })\r\n  @Get()\r\n  doHealthCheck(): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve(\"pong!\");\r\n      reject(\"dead\");\r\n    });\r\n  }\r\n\r\n  @ApiOperation({\r\n    description: \"Health check endpoint without authentication\"\r\n  })\r\n  @Get(\"auth\")\r\n  @UseGuards(AuthGuard)\r\n  doHealthCheckWithAuth(@Req() request: FastifyRequest): Promise<string> {\r\n    console.log(request.headers[\"Authorization\"]);\r\n    return new Promise((resolve, reject) => {\r\n      resolve(\"pong!\");\r\n      reject(\"dead\");\r\n    });\r\n  }\r\n\r\n}\r\n","export * from './app.controller';\r\nexport * from './accounts.controller';\r\nexport * from './authentication.controller';\r\nexport * from './booking-room.controller';\r\nexport * from './devices.controller';\r\nexport * from './health-check.controller';\r\nexport * from './rooms.controller';\r\nexport * from './feedback-type.controller';\r\nexport * from './feedback.controller';\r\nexport * from './notification.controller';\r\nexport * from './notification-type.controller';\r\n","import { Controller, Get } from '@nestjs/common';\r\nimport { NotificationService, NotificationTypeService } from '../services';\r\n\r\n@Controller('/v1/notification-types')\r\nexport class NotificationTypeController {\r\n  constructor(private readonly service: NotificationTypeService) {}\r\n\r\n  @Get()\r\n  getAllNotificationTypes() {\r\n    return;\r\n  }\r\n}\r\n","import { KeycloakUserInstance } from './../dto/keycloak.user';\r\nimport { Controller, Get, HttpStatus, Param, Query } from '@nestjs/common';\r\nimport { NotificationService } from '../services';\r\nimport { Roles } from '../decorators/role.decorator';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { User } from '../decorators/keycloak-user.decorator';\r\nimport { Notification } from '../models';\r\n\r\n@Controller('/v1/notifications')\r\nexport class NotificationController {\r\n\r\n  constructor(private readonly service: NotificationService) {}\r\n\r\n  @Get('own-notifications')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully got get your own notifications',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get your own notifications',\r\n    description: 'Get your own notifications',\r\n  })\r\n  getYourOwnNotifications(\r\n    @User() user: KeycloakUserInstance\r\n  ): Promise<Notification[]> {\r\n    return this.service.getYourOwnNotifications(user.account_id);\r\n  }\r\n\r\n  @Get(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched notification by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get notification by id',\r\n    description: 'Get notification by id',\r\n  })\r\n  getDetailNotificationId(@Param('id') id: string) {\r\n    return this.service.getDetailNotificationId(id);\r\n  }\r\n}\r\n","import { ParseIntPipe } from '@nestjs/common';\r\nimport {\r\n  IsInt,\r\n  IsNotEmpty,\r\n  IsNumber,\r\n  IsNumberString,\r\n  IsOptional,\r\n  IsString,\r\n  Max,\r\n  MaxLength,\r\n  Min,\r\n} from 'class-validator';\r\nimport { IsNull } from 'typeorm';\r\nimport { Transform } from 'class-transformer';\r\nimport { ContainsMany } from '../validators/contains-many.validator';\r\nimport { validationConfig } from '../pipes/validation/global.validator';\r\n\r\nexport class PaginationParams {\r\n  @IsString({\r\n    message: 'Search value must be a string',\r\n  })\r\n  @IsOptional()\r\n  @MaxLength(100, {\r\n    message: 'Maximum length for search is 100 characters',\r\n  })\r\n  search: string;\r\n\r\n  @IsOptional()\r\n  @IsInt({\r\n    message: 'Page number must be integer',\r\n  })\r\n  @IsNotEmpty({\r\n    message: 'Page number must not be empty',\r\n  })\r\n  @Transform((val) => Number.parseInt(val.value))\r\n  @Min(1, {\r\n    message: 'Minimum value for page number is 1',\r\n  })\r\n  page: number;\r\n\r\n  @IsOptional()\r\n  @IsInt({\r\n    message: 'Items per page must be integer',\r\n  })\r\n  @IsNotEmpty({\r\n    message: 'Items per page must not be empty',\r\n  })\r\n  @Transform((val) => Number.parseInt(val.value))\r\n  @Min(1, {\r\n    message: 'Items per page must be at least 1',\r\n  })\r\n  @Max(50, {\r\n    message: 'Items per page maximum value is 50',\r\n  })\r\n  limit: number;\r\n\r\n  @IsOptional()\r\n  @ContainsMany(['ASC', 'DESC'], {\r\n    message: 'Direction must be ASC or DESC',\r\n  })\r\n  dir: string;\r\n\r\n  @IsOptional()\r\n  @IsNotEmpty({\r\n    message: 'Sorting field must not be empty',\r\n  })\r\n  @IsString({\r\n    message: 'Sorting field must be a string',\r\n  })\r\n  sort: string;\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  UseInterceptors,\r\n} from '@nestjs/common';\r\nimport { PaginationParams } from './pagination.model';\r\nimport { User } from '../decorators/keycloak-user.decorator';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { RoleService } from '../services/role.service';\r\nimport {\r\n  ApiBearerAuth,\r\n  ApiOperation,\r\n  ApiProduces,\r\n  ApiResponse,\r\n  ApiTags,\r\n} from '@nestjs/swagger';\r\nimport { PathLoggerInterceptor } from '../interceptors/path-logger.interceptor';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { Roles } from '../decorators/role.decorator';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\n\r\n@Controller('/v1/roles')\r\n@ApiBearerAuth()\r\n@ApiTags('Role')\r\n@UseInterceptors(new PathLoggerInterceptor(RoleController.name))\r\nexport class RoleController {\r\n  constructor(private readonly service: RoleService) {}\r\n\r\n  @Get()\r\n  @ApiOperation({\r\n    summary: 'Get roles by pagination',\r\n    description: 'Get roles by pagination',\r\n  })\r\n  @ApiProduces('application/json')\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched roles by pagination',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getRolesByPagination(@Query() payload: PaginationParams) {\r\n    return this.service.getRolesByPagination(payload);\r\n  }\r\n\r\n  @Get('name')\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully get role name',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get role name',\r\n    description: 'Get role name',\r\n  })\r\n  getRoleNames() {\r\n    return this.service.getRoleNames();\r\n  }\r\n\r\n  @Get(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Get role by id',\r\n    description: 'Get role by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Id for roel is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched role by id',\r\n  })\r\n  getRoleById(@Param('id') id: string) {\r\n    return this.service.getRoleById(id);\r\n  }\r\n\r\n  @Post()\r\n  @HttpCode(HttpStatus.OK)\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request payload for role is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully added role',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Add role',\r\n    description: 'Add role',\r\n  })\r\n  addRole(\r\n    @Body() body: MasterDataAddRequestPayload,\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.addRole(body, user.account_id);\r\n  }\r\n\r\n  @Put(':id')\r\n  @ApiOperation({\r\n    summary: 'Update role by id',\r\n    description: 'Update role by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request payload for role is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully updated role with provided id',\r\n  })\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  updateRoleById(\r\n    @Body() body: MasterDataAddRequestPayload,\r\n    @User() user: KeycloakUserInstance,\r\n    @Param('id') id: string\r\n  ) {\r\n    return this.service.updateRoleById(user.account_id, body, id);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully removed role with provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Id for role is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Delete role by id',\r\n    description: 'Delete role by id',\r\n  })\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  deleteRoleById(\r\n    @User() keycloakUser: KeycloakUserInstance,\r\n    @Param('id') id: string\r\n  ) {\r\n    return this.service.deleteRoleById(keycloakUser.account_id, id);\r\n  }\r\n\r\n  @Get('deleted')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Retrieving a list of deleted role',\r\n    description: 'Retrieving a list of deleted role',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieving a list of deleted role',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving a list of deleted role',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getDeletedRoles(@Query('search') search: string) {\r\n    return this.service.getDeletedRoles(search);\r\n  }\r\n\r\n  @Put('restore-deleted/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Restore the deleted role by id',\r\n    description: 'Restore the deleted role by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully restored the deleted role',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while restoring the deleted the role',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  restoreDeletedRoleById(\r\n    @Param() payload: { id: string },\r\n    @User() keycloakUser: KeycloakUserInstance\r\n  ) {\r\n    return this.service.handleRestoreDeletedRoleById(\r\n      keycloakUser.account_id,\r\n      payload.id\r\n    );\r\n  }\r\n\r\n  @Delete('permanent/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully permanent deleted role by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for permanent delete role is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Permanently delete role by id',\r\n    description: 'Permanently delete role by id',\r\n  })\r\n  permanentDeleteRoleById(@Param('id') id: string) {\r\n    return this.service.permanentDeleteRoleById(id);\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  UseInterceptors,\r\n} from '@nestjs/common';\r\nimport {\r\n  ApiBearerAuth,\r\n  ApiOperation,\r\n  ApiResponse,\r\n  ApiTags,\r\n} from '@nestjs/swagger';\r\nimport { RoomTypeService } from '../services/room-type.service';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\nimport { User } from '../decorators/keycloak-user.decorator';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { PathLoggerInterceptor } from '../interceptors/path-logger.interceptor';\r\nimport { Roles } from '../decorators/role.decorator';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { PaginationParams } from './pagination.model';\r\n\r\n@Controller('/v1/room-type')\r\n@ApiBearerAuth()\r\n@ApiTags('Room Type')\r\n@UseInterceptors(new PathLoggerInterceptor(RoomTypeService.name))\r\nexport class RoomTypeController {\r\n  constructor(private readonly service: RoomTypeService) {}\r\n\r\n  @Get()\r\n  @HttpCode(HttpStatus.OK)\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched room types by pagination',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get room type by pagination',\r\n    description: 'Get room type by pagination',\r\n  })\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  getRoomTypes(@Query() payload: PaginationParams) {\r\n    return this.service.getRoomTypesWithPagination(payload);\r\n  }\r\n\r\n  @Get('name')\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully get room types name',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get room types name',\r\n    description: 'Get room types name',\r\n  })\r\n  getRoomTypeNames() {\r\n    return this.service.getRoomTypeNames();\r\n  }\r\n\r\n  @Get(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched room type by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get room type by id',\r\n    description: 'Get room type by id',\r\n  })\r\n  getRoomTypeById(@Param('id') id: string) {\r\n    return this.service.getRoomTypeById(id);\r\n  }\r\n\r\n  @Post()\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({\r\n    summary: 'Add room type',\r\n    description: 'Add room type',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully added room type',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  addRoomType(\r\n    @User() keycloakUser: KeycloakUserInstance,\r\n    @Body() addRoomType: MasterDataAddRequestPayload\r\n  ) {\r\n    return this.service.addRoomType(keycloakUser.account_id, addRoomType);\r\n  }\r\n\r\n  @Put(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully updated room type by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Update room type by id',\r\n    description: 'Update room type by id',\r\n  })\r\n  updateRoomTypeById(\r\n    @Param('id') id: string,\r\n    @Body() updatePayload: MasterDataAddRequestPayload,\r\n    @User() keycloakUser: KeycloakUserInstance\r\n  ) {\r\n    return this.service.updateRoomTypeById(\r\n      keycloakUser.account_id,\r\n      updatePayload,\r\n      id\r\n    );\r\n  }\r\n\r\n  @Delete(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully deleted room type by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for delete room type is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Delete room type by id',\r\n    description: 'Delete room type by id',\r\n  })\r\n  deleteRoomTypeById(\r\n    @Param('id') id: string,\r\n    @User() keycloakUser: KeycloakUserInstance\r\n  ) {\r\n    return this.service.deleteRoomTypeById(keycloakUser.account_id, id);\r\n  }\r\n\r\n  @Get('deleted')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully deleted room types',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get deleted room types',\r\n    description: 'Get deleted room types',\r\n  })\r\n  getDeletedRoomTypes(@Query('search') search: string) {\r\n    return this.service.getDeletedRoomTypes(search);\r\n  }\r\n\r\n  @Put('restore-deleted/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully restored deleted room by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for deleted room type is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Successfully restored deleted room type by id',\r\n    description: 'Successfully restored deleted room type by id',\r\n  })\r\n  restoreDeletedRoomTypeById(\r\n    @Param('id') id: string,\r\n    @User() keycloakUser: KeycloakUserInstance\r\n  ) {\r\n    return this.service.restoreDeletedRoomTypeById(keycloakUser.account_id, id);\r\n  }\r\n\r\n  @Delete('permanent/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully permanent deleted room type by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description:\r\n      'Request params for permanent delete room type is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Permanently delete room type by id',\r\n    description: 'Permanently delete room type by id',\r\n  })\r\n  permanentDeleteRoomTypeById(@Param('id') id: string) {\r\n    return this.service.permanentDeleteRoomTypeById(id);\r\n  }\r\n}\r\n","import { PaginationParams } from './pagination.model';\r\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\r\n\r\nexport class RoomsPaginationParams extends PaginationParams {\r\n  @IsString({\r\n    message: 'Room type must be a string',\r\n  })\r\n  @IsOptional()\r\n  roomType: string;\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  UseInterceptors,\r\n  UsePipes,\r\n} from '@nestjs/common';\r\nimport { RoomsService } from '../services';\r\nimport { RoomsValidation } from '../pipes/validation/rooms.validation';\r\nimport { Rooms } from '../models';\r\nimport {\r\n  ApiBearerAuth,\r\n  ApiOperation,\r\n  ApiResponse,\r\n  ApiTags,\r\n} from '@nestjs/swagger';\r\nimport { PathLoggerInterceptor } from '../interceptors/path-logger.interceptor';\r\nimport { Roles } from '../decorators/role.decorator';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { AddRoomValidation } from '../pipes/validation/add-room.validation';\r\nimport { User } from '../decorators/keycloak-user.decorator';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { RoomsPaginationParams } from './rooms-pagination.model';\r\nimport { DataAddRequestPayload } from '../payload/request/data-add.request.payload';\r\n\r\n@Controller('/v1/rooms')\r\n@ApiBearerAuth()\r\n@ApiTags('Rooms')\r\n@UseInterceptors(new PathLoggerInterceptor(RoomsController.name))\r\nexport class RoomsController {\r\n  constructor(private readonly service: RoomsService) {}\r\n\r\n  @Get()\r\n  @UsePipes(new RoomsValidation())\r\n  @HttpCode(HttpStatus.OK)\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'One or more payload parameters are invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Not enough privileges to access this endpoint',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getRooms(@Query() payload: RoomsPaginationParams) {\r\n    return this.service.getAll(payload);\r\n  }\r\n\r\n  @Get('by-room-type')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'One or more payload parameters are invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched deleted rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getRoomsByRoomType(@Query('type') roomTypeId = ''): Promise<Rooms[]> {\r\n    return this.service.getRoomsByRoomType(roomTypeId);\r\n  }\r\n\r\n  @Get('name')\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully get role name',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get room name',\r\n    description: 'Get room name',\r\n  })\r\n  getRoomNames() {\r\n    return this.service.getRoomNames();\r\n  }\r\n\r\n  @Get('find/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  @ApiOperation({\r\n    summary: 'Retrieving the library room by id',\r\n    description: 'Retrieving the library room by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully retrieved the library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while retrieving the library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getRoomById(@Param() payload: { id: string }): Promise<Rooms> {\r\n    return this.service.findById(payload.id);\r\n  }\r\n\r\n  @Post('add')\r\n  @UsePipes(new AddRoomValidation())\r\n  @Roles(Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Create a new library room',\r\n    description: 'Create new library room with the provided payload',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.CREATED,\r\n    description: 'Successfully created a new library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request payload for libary room is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  addRoom(\r\n    @User() user: KeycloakUserInstance,\r\n    @Body() room: DataAddRequestPayload\r\n  ): Promise<Rooms> {\r\n    return this.service.add(user, room);\r\n  }\r\n\r\n  @Put('update/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Update library room by id',\r\n    description: 'Update library room by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully updated the library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while updating the library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  updateRoomById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string },\r\n    @Body() body: DataAddRequestPayload\r\n  ) {\r\n    return this.service.updateById(user.account_id, payload.id, body);\r\n  }\r\n\r\n  @Put('disable/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Disable library room by id',\r\n    description: 'Disable library room by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully disabled the library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while disabling the library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  disableRoomById(@User() user: KeycloakUserInstance, @Param('id') id: string) {\r\n    return this.service.disableById(user.account_id, id);\r\n  }\r\n\r\n  @Get('disabled')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'One or more payload parameters are invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched disabled rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getDisableRooms(@Query('search') search = ''): Promise<Rooms[]> {\r\n    return this.service.getDisabledRooms(search);\r\n  }\r\n\r\n  @Put('restore-disabled/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Restore the disabled library room by id',\r\n    description: 'Restore the disabled library room by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully restored the disabled library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while restoring the disabled the library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  restoreDisabledRoomById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string }\r\n  ) {\r\n    return this.service.handleRestoreDisabledRoomById(\r\n      user.account_id,\r\n      payload.id\r\n    );\r\n  }\r\n\r\n  @Delete(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Remove library room by id',\r\n    description: 'Remove library room by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully removed the library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while removing the library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  deleteRoomById(\r\n    @User() user: KeycloakUserInstance,\r\n    @Param() payload: { id: string }\r\n  ) {\r\n    return this.service.deleteById(user.account_id, payload.id);\r\n  }\r\n\r\n  @Get('deleted')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'One or more payload parameters are invalid',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully fetched deleted rooms',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  getDeletedRooms(@Query('search') search = ''): Promise<Rooms[]> {\r\n    return this.service.getDeletedRooms(search);\r\n  }\r\n\r\n  @Put('restore-deleted/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiOperation({\r\n    summary: 'Restore the deleted library room by id',\r\n    description: 'Restore the deleted library room by provided id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully restored the deleted library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Error while restoring the deleted the library room',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Invalid access token',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  restoreDeletedRoomById(\r\n    @Param() payload: { id: string },\r\n    @User() user: KeycloakUserInstance\r\n  ) {\r\n    return this.service.handleRestoreDeletedRoomById(\r\n      user.account_id,\r\n      payload.id\r\n    );\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpStatus,\r\n  Optional,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Query,\r\n} from '@nestjs/common';\r\nimport { SlotService } from '../services/slot.service';\r\nimport { PaginationParams } from './pagination.model';\r\nimport { Roles } from '../decorators/role.decorator';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { Slot } from '../models/slot.entity';\r\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { User } from '../decorators/keycloak-user.decorator';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\n\r\n@Controller('/v1/slots')\r\nexport class SlotController {\r\n  constructor(private readonly service: SlotService) {}\r\n\r\n  @Get()\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  getAllSlotsByPagination(@Optional() @Query() params?: PaginationParams) {\r\n    return this.service.getAllByPagination(params);\r\n  }\r\n\r\n  @Get('name')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN, Role.APP_STAFF)\r\n  getSlotNames() {\r\n    return this.service.getSlotNames();\r\n  }\r\n\r\n  @Get(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  getSlotById(@Param('id') id: string) {\r\n    return this.service.getById(id);\r\n  }\r\n\r\n  @Post()\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({\r\n    summary: 'Add slot',\r\n    description: 'Add slot',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully added slot type',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  addNewSlot(\r\n    @User() user: KeycloakUserInstance,\r\n    @Body() payload: MasterDataAddRequestPayload\r\n  ) {\r\n    return this.service.addNewSlot(user.account_id, payload);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully deleted slots',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Deleted slots',\r\n    description: 'Deleted slots',\r\n  })\r\n  deleteSlotById(@Param('id') id: string, @User() user: KeycloakUserInstance) {\r\n    return this.service.deleteSlotById(user.account_id, id);\r\n  }\r\n\r\n  @Get('deleted')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully deleted slot',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for roles is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Get deleted slot',\r\n    description: 'Get deleted slot',\r\n  })\r\n  getDeletedSlots(@Query('search') search: string) {\r\n    return this.service.getDeletedSlots(search);\r\n  }\r\n\r\n  @Put('restore-deleted/:id')\r\n  @Roles(Role.APP_LIBRARIAN, Role.APP_MANAGER, Role.APP_ADMIN)\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Successfully restored deleted slot by id',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.BAD_REQUEST,\r\n    description: 'Request params for deleted slot is not validated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.UNAUTHORIZED,\r\n    description: 'Access token is invalidated',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.FORBIDDEN,\r\n    description: 'Insufficient privileges',\r\n  })\r\n  @ApiOperation({\r\n    summary: 'Successfully restored deleted slot by id',\r\n    description: 'Successfully restored deleted slot by id',\r\n  })\r\n  restoreDeletedSlotById(\r\n    @Param('id') id: string,\r\n    @User() keycloakUser: KeycloakUserInstance\r\n  ) {\r\n    return this.service.restoreDeletedSlotById(keycloakUser.account_id, id);\r\n  }\r\n\r\n}\r\n","import { createParamDecorator, ExecutionContext, UnauthorizedException } from \"@nestjs/common\";\r\nimport { ParseTokenPipe } from \"../pipes/parse-token.pipe\";\r\nimport { getAccessTokenViaCookie } from \"../validators/utils/access-token-extractor.util\";\r\n\r\nexport const KeycloakUser = createParamDecorator(\r\n  (data: unknown, ctx: ExecutionContext) => {\r\n    const request = ctx.switchToHttp().getRequest();\r\n    const accessToken = request.headers[\"authorization\"] ?? getAccessTokenViaCookie(request);\r\n    if (accessToken === undefined || accessToken === null) {\r\n      throw new UnauthorizedException(\"Access token is not provided\");\r\n    }\r\n    return accessToken;\r\n  },\r\n);\r\n\r\nexport const User = (additionalOptions?: any) => KeycloakUser(additionalOptions, ParseTokenPipe);\r\n","import { SetMetadata } from \"@nestjs/common\";\r\nimport { Role } from \"../enum/roles.enum\";\r\n\r\nexport const ROLES_KEY = \"roles\";\r\nexport const Roles = (...roles: Role[]) => SetMetadata(ROLES_KEY, roles);\r\n","import { SetMetadata } from \"@nestjs/common\";\r\n\r\nexport const TYPEORM_EX_CUSTOM_REPOSITORY = \"TYPEORM_EX_CUSTOM_REPOSITORY\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport function CustomRepository(entity: Function): ClassDecorator {\r\n  return SetMetadata(TYPEORM_EX_CUSTOM_REPOSITORY, entity);\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class WishlistBookingRoomRequestDTO {\r\n  @ApiProperty({\r\n    name: 'roomId',\r\n    type: String,\r\n    description: 'Id of the requested booking library room',\r\n    example: 'LB01',\r\n    title: 'Room ID',\r\n    required: true,\r\n  })\r\n  roomId: string;\r\n\r\n  @ApiProperty({\r\n    name: 'slotId',\r\n    type: String,\r\n    description: 'Requested booking room slot',\r\n    example: 'uuid',\r\n    title: 'Slot',\r\n    required: true,\r\n  })\r\n  slotId: string;\r\n}\r\n","export enum BookingRoomStatus {\r\n  Booking = \"BOOKING\",\r\n  Booked = \"BOOKED\",\r\n  Rejected = \"REJECTED\",\r\n\r\n}\r\n","export enum Role {\r\n  APP_ADMIN = \"System Admin\",\r\n  APP_MANAGER = \"Manager\",\r\n  APP_LIBRARIAN = \"Librarian\",\r\n  APP_STAFF = \"Staff\"\r\n}\r\n","export enum RoomType {\r\n  LIBRARY_ROOM = \"Library Room\",\r\n  SEMINAR_ROOM = \"Seminar Room\",\r\n  LIBRARY_HALL = \"Library Hall\"\r\n}\r\n","import { CanActivate, ExecutionContext, Inject } from \"@nestjs/common\";\r\nimport { KeycloakService } from \"../services\";\r\nimport { getAccessTokenViaCookie } from \"../validators/utils/access-token-extractor.util\";\r\n\r\nexport default class AuthGuard implements CanActivate {\r\n\r\n  constructor(@Inject(KeycloakService) private readonly keycloakService: KeycloakService) {\r\n  }\r\n\r\n  async canActivate(context: ExecutionContext): Promise<boolean> {\r\n    const request = context.switchToHttp().getRequest();\r\n    const accessToken = getAccessTokenViaCookie(request);\r\n    const response = await this.keycloakService.getUserInfo(accessToken);\r\n    return !!response;\r\n  }\r\n\r\n}\r\n","import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\r\nimport { Reflector } from '@nestjs/core';\r\nimport { ROLES_KEY } from '../decorators/role.decorator';\r\nimport { Role } from '../enum/roles.enum';\r\nimport { KeycloakService, AccountsService } from '../services';\r\nimport { getAccessTokenViaCookie } from '../validators/utils/access-token-extractor.util';\r\n\r\n@Injectable()\r\nexport class RolesGuard implements CanActivate {\r\n  constructor(\r\n    private readonly reflector: Reflector,\r\n    private readonly keycloakService: KeycloakService,\r\n    private readonly accountsService: AccountsService\r\n  ) {}\r\n\r\n  async canActivate(context: ExecutionContext): Promise<boolean> {\r\n    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [\r\n      context.getHandler(),\r\n      context.getClass(),\r\n    ]);\r\n    if (!requiredRoles) {\r\n      return true;\r\n    }\r\n\r\n    const request = context.switchToHttp().getRequest();\r\n    const requestHeaders = request.headers;\r\n    const accessToken =\r\n      requestHeaders['authorization'] ?? getAccessTokenViaCookie(request);\r\n    const keycloakUser = await this.keycloakService.getUserInfo(accessToken);\r\n    const accountRole = await this.accountsService.getAccountRoleByKeycloakId(\r\n      keycloakUser.sub\r\n    );\r\n    return requiredRoles.some((role) => accountRole === role);\r\n  }\r\n}\r\n","import {\r\n  CallHandler,\r\n  ExecutionContext,\r\n  Inject,\r\n  mixin,\r\n  NestInterceptor,\r\n  Optional,\r\n  Type\r\n} from \"@nestjs/common\";\r\nimport { Observable } from \"rxjs\";\r\nimport FastifyMulter from \"fastify-multer\";\r\nimport { Options, Multer } from \"multer\";\r\nimport { FastifyRequest } from \"fastify\";\r\n\r\ntype MulterInstance = any;\r\n\r\nexport function FastifyFileInterceptor(\r\n  fieldName: string,\r\n  localOptions: Options\r\n): Type<NestInterceptor> {\r\n  class MixinInterceptor implements NestInterceptor {\r\n    protected multer: MulterInstance;\r\n\r\n    constructor(\r\n      @Optional()\r\n      @Inject(\"MULTER_MODULE_OPTIONS\")\r\n        options: Multer\r\n    ) {\r\n      this.multer = (FastifyMulter as any)({ ...options, ...localOptions });\r\n    }\r\n\r\n    async intercept(\r\n      context: ExecutionContext,\r\n      next: CallHandler\r\n    ): Promise<Observable<any>> {\r\n      const ctx = context.switchToHttp();\r\n\r\n      await new Promise<void>((resolve, reject) =>\r\n        this.multer.single(fieldName)(\r\n          ctx.getRequest(),\r\n          ctx.getResponse(),\r\n          (error: any) => {\r\n            if (error) {\r\n              // const error = transformException(err);\r\n              return reject(error);\r\n            }\r\n            resolve();\r\n          }\r\n        )\r\n      );\r\n\r\n      return next.handle();\r\n    }\r\n  }\r\n\r\n  const Interceptor = mixin(MixinInterceptor);\r\n  return Interceptor as Type<NestInterceptor>;\r\n}\r\n","import { CallHandler, ExecutionContext, Injectable, Logger, NestInterceptor } from \"@nestjs/common\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class PathLoggerInterceptor implements NestInterceptor {\r\n\r\n  private readonly logger = new Logger(this.className);\r\n\r\n  constructor(private readonly className: string) {\r\n  }\r\n\r\n  intercept(context: ExecutionContext, next: CallHandler<any>): Observable<any> | Promise<Observable<any>> {\r\n    const request = context.switchToHttp().getRequest();\r\n    this.logger.debug(`API: [${request.method}] - ${request.url}`);\r\n    return next.handle();\r\n  }\r\n\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntity } from './base/base.entity';\r\n\r\n@Entity('account_hist')\r\nexport class AccountHist extends BaseEntity {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'account_id',\r\n    type: 'uuid',\r\n  })\r\n  accountId?: string;\r\n\r\n  @Column({\r\n    name: 'keycloak_id',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  keycloakId?: string;\r\n\r\n  @Column({\r\n    name: 'google_id',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  googleId?: string;\r\n\r\n  @Column({\r\n    name: 'username',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  username?: string;\r\n\r\n  @Column({\r\n    name: 'email',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  email?: string;\r\n\r\n  @Column({\r\n    name: 'phone',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  phone?: string;\r\n\r\n  @Column({\r\n    name: 'fullname',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  fullname?: string;\r\n\r\n  @Column({\r\n    name: 'avatar',\r\n    type: 'varchar',\r\n    length: 250,\r\n  })\r\n  avatar?: string;\r\n\r\n  @Column({\r\n    name: 'role_id',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  roleId?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n}\r\n","import {\r\n  Column,\r\n  CreateDateColumn,\r\n  Entity,\r\n  Generated,\r\n  PrimaryColumn,\r\n} from 'typeorm';\r\n\r\n@Entity('account_notification')\r\nexport class AccountNotification {\r\n  @PrimaryColumn('uuid', {\r\n    name: 'id',\r\n    comment: 'ID for Room',\r\n  })\r\n  @Generated('uuid')\r\n  id?: string;\r\n\r\n  @Column({\r\n    type: 'uuid',\r\n    name: 'notification_id',\r\n  })\r\n  notificationId?: string;\r\n\r\n  @Column({\r\n    type: 'uuid',\r\n    name: 'account_id',\r\n  })\r\n  accountId?: string;\r\n\r\n  @CreateDateColumn({\r\n    name: 'created_at',\r\n    type: 'timestamptz',\r\n  })\r\n  createdAt: Date;\r\n}\r\n","import { Column, Entity, Generated, PrimaryColumn } from 'typeorm';\r\nimport { BaseEntityWithDisabled } from './base/base.entity';\r\n\r\n@Entity('accounts')\r\nexport class Accounts extends BaseEntityWithDisabled {\r\n  @PrimaryColumn('uuid', {\r\n    name: 'id',\r\n    comment: 'ID for Room',\r\n  })\r\n  @Generated('uuid')\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'keycloak_id',\r\n    nullable: false,\r\n    unique: true,\r\n    length: 36,\r\n    type: 'varchar',\r\n    comment: 'The keycloak account id that associated with this user.',\r\n  })\r\n  keycloakId?: string;\r\n\r\n  @Column({\r\n    type: 'varchar',\r\n    name: 'google_id',\r\n  })\r\n  googleId?: string;\r\n\r\n  @Column({\r\n    name: 'username',\r\n    nullable: false,\r\n    unique: true,\r\n    length: 100,\r\n    type: 'varchar',\r\n  })\r\n  username?: string;\r\n\r\n  @Column({\r\n    name: 'fullname',\r\n    nullable: false,\r\n    unique: true,\r\n    length: 200,\r\n    type: 'varchar',\r\n  })\r\n  fullname?: string;\r\n\r\n  @Column({\r\n    name: 'email',\r\n    nullable: false,\r\n    unique: true,\r\n    length: 100,\r\n    type: 'varchar',\r\n    comment: 'The email of the user',\r\n  })\r\n  email?: string;\r\n\r\n  @Column({\r\n    name: 'phone',\r\n    nullable: false,\r\n    unique: true,\r\n    length: 10,\r\n    type: 'varchar',\r\n    comment: 'The phone number of the user',\r\n  })\r\n  phone?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    nullable: false,\r\n    unique: false,\r\n    length: 500,\r\n    type: 'varchar',\r\n    comment: 'Describe the user.',\r\n  })\r\n  description?: string;\r\n\r\n  @Column({\r\n    name: 'role_id',\r\n    type: 'varchar',\r\n    length: '36',\r\n    nullable: false,\r\n    comment: 'Role of the associated user.',\r\n  })\r\n  roleId?: string;\r\n\r\n  @Column({\r\n    name: 'avatar',\r\n    nullable: false,\r\n    unique: true,\r\n    length: 256,\r\n    type: 'varchar',\r\n  })\r\n  avatar?: string;\r\n}\r\n","import { Column, CreateDateColumn, Entity, UpdateDateColumn } from 'typeorm';\r\n\r\n@Entity()\r\nexport abstract class BaseEntity {\r\n  @Column({\r\n    name: 'created_by',\r\n    nullable: false,\r\n    default: false,\r\n    type: 'uuid',\r\n  })\r\n  createdBy?: string;\r\n\r\n  @Column({\r\n    name: 'updated_by',\r\n    nullable: false,\r\n    default: false,\r\n    type: 'uuid',\r\n  })\r\n  updatedBy?: string;\r\n\r\n  @Column({\r\n    name: 'deleted_by',\r\n    nullable: false,\r\n    default: false,\r\n    type: 'uuid',\r\n  })\r\n  deletedBy?: string;\r\n\r\n  @Column({\r\n    type: 'timestamptz',\r\n    name: 'deleted_at',\r\n  })\r\n  deletedAt?: Date;\r\n\r\n  @CreateDateColumn({\r\n    name: 'created_at',\r\n  })\r\n  createdAt?: Date;\r\n\r\n  @UpdateDateColumn({\r\n    name: 'updated_at',\r\n  })\r\n  updatedAt?: Date;\r\n}\r\n\r\nexport abstract class BaseEntityWithDisabled extends BaseEntity {\r\n  @Column({\r\n    type: 'timestamptz',\r\n    name: 'disabled_at',\r\n  })\r\n  disabledAt?: Date;\r\n\r\n  @Column({\r\n    name: 'disabled_by',\r\n    nullable: false,\r\n    default: false,\r\n    type: 'uuid',\r\n  })\r\n  disabledBy?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntity } from './base/base.entity';\r\n\r\n@Entity('booking_reason_hist')\r\nexport class BookingReasonHist extends BaseEntity {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'booking_reason_id',\r\n    type: 'uuid',\r\n  })\r\n  bookingReasonId?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntity } from './base/base.entity';\r\n\r\n@Entity('booking_reason')\r\nexport class BookingReason extends BaseEntity {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\r\n\r\n\r\n@Entity(\"booking_request_devices\")\r\nexport class BookingRequestDevices{\r\n  @PrimaryGeneratedColumn(\"uuid\", {\r\n    name: \"id\",\r\n    comment: \"ID of the Booking Request Devices\"\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: \"booking_request_id\",\r\n    type: \"uuid\",\r\n  })\r\n  bookingRequestId?: string;\r\n\r\n  @Column({\r\n    name: \"device_id\",\r\n    type: \"uuid\",\r\n  })\r\n  deviceId?: string;\r\n\r\n  @Column({\r\n    name: \"device_quantity\",\r\n  })\r\n  deviceQuantity?: number;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('booking_request_hist')\r\nexport class BookingRequestHist {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n    comment: 'ID of the Booking Request Hist',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'booking_request_id',\r\n    type: 'uuid',\r\n  })\r\n  bookingRequestId?: string;\r\n\r\n  @Column({\r\n    name: 'room_id',\r\n    nullable: false,\r\n  })\r\n  roomId?: string;\r\n\r\n  @Column({\r\n    name: 'requested_by',\r\n    type: 'uuid',\r\n  })\r\n  requestedBy?: string;\r\n\r\n  @Column({\r\n    name: 'requested_at',\r\n    nullable: false,\r\n    type: 'timestamptz',\r\n    default: () => 'CURRENT_TIMESTAMP',\r\n  })\r\n  requestedAt?: Date;\r\n\r\n  @Column({\r\n    name: 'status',\r\n    nullable: false,\r\n  })\r\n  status?: string;\r\n\r\n  @Column({\r\n    name: 'checkin_at',\r\n    nullable: false,\r\n    type: 'timestamptz',\r\n  })\r\n  checkedInAt?: Date;\r\n\r\n  @Column({\r\n    name: 'checkout_at',\r\n    nullable: false,\r\n    type: 'timestamptz',\r\n  })\r\n  checkedOutAt?: Date;\r\n\r\n  @Column({\r\n    name: 'updated_at',\r\n    nullable: false,\r\n    type: 'timestamptz',\r\n  })\r\n  updatedAt?: Date;\r\n\r\n  @Column({\r\n    name: 'updated_by',\r\n    type: 'uuid',\r\n  })\r\n  updatedBy?: string;\r\n\r\n  @Column({\r\n    name: 'booking_reason_id',\r\n    type: 'uuid',\r\n  })\r\n  bookingReasonId?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n\r\n  @Column({\r\n    name: 'cancelled_at',\r\n    nullable: false,\r\n    type: 'timestamptz',\r\n  })\r\n  cancelledAt?: Date;\r\n\r\n  @Column({\r\n    name: 'cancelled_by',\r\n    type: 'uuid',\r\n  })\r\n  cancelledBy?: string;\r\n\r\n  @Column({\r\n    name: 'checkin_slot',\r\n    type: 'uuid',\r\n  })\r\n  checkinSlot?: string;\r\n  @Column({\r\n    name: 'checkout_slot',\r\n    type: 'uuid',\r\n  })\r\n  checkoutSlot?: string;\r\n\r\n  @Column({\r\n    name: \"checkin_date\",\r\n    nullable: false,\r\n  })\r\n  checkinDate?: string;\r\n\r\n  @Column({\r\n    name: 'accepted_at',\r\n    nullable: false,\r\n    type: 'timestamptz',\r\n  })\r\n  acceptedAt?: Date;\r\n\r\n  @Column({\r\n    name: 'accepted_by',\r\n    type: 'uuid',\r\n  })\r\n  acceptedBy?: string;\r\n\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\r\nimport { BaseEntity } from \"./base/base.entity\";\r\n\r\n\r\n@Entity(\"booking_request\")\r\nexport class BookingRequest{\r\n  @PrimaryGeneratedColumn(\"uuid\", {\r\n    name: \"id\",\r\n    comment: \"ID of the Booking Request\"\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: \"room_id\",\r\n    nullable: false,\r\n  })\r\n  roomId?: string;\r\n\r\n  @Column({\r\n    name: \"requested_by\",\r\n    type: \"uuid\",\r\n  })\r\n  requestedBy?: string;\r\n\r\n  @Column({\r\n    name: \"requested_at\",\r\n    nullable: false,\r\n    type: \"timestamptz\",\r\n    default: () => \"CURRENT_TIMESTAMP\"\r\n  })\r\n  requestedAt?: Date;\r\n\r\n  @Column({\r\n    name: \"status\",\r\n    nullable: false\r\n  })\r\n  status?: string;\r\n\r\n  @Column({\r\n    name: \"booking_reason_id\",\r\n    nullable: false\r\n  })\r\n  bookingReasonId?: string;\r\n\r\n  @Column({\r\n    name: \"cancelled_by\",\r\n    type: \"uuid\",\r\n  })\r\n  cancelledBy?: string;\r\n\r\n  @Column({\r\n    name: \"cancelled_at\",\r\n    nullable: false,\r\n    type: \"timestamptz\",\r\n    default: () => \"CURRENT_TIMESTAMP\"\r\n  })\r\n  cancelledAt?: Date;\r\n\r\n  @Column({\r\n    name: \"updated_by\",\r\n    type: \"uuid\",\r\n  })\r\n  updatedBy?: string;\r\n\r\n  @Column({\r\n    name: \"updated_at\",\r\n    nullable: false,\r\n    type: \"timestamptz\",\r\n    default: () => \"CURRENT_TIMESTAMP\"\r\n  })\r\n  updatedAt?: Date;\r\n\r\n  @Column({\r\n    name: \"accepted_by\",\r\n    type: \"uuid\",\r\n  })\r\n  acceptedBy?: string;\r\n\r\n  @Column({\r\n    name: \"accepted_at\",\r\n    nullable: false,\r\n    type: \"timestamptz\",\r\n    default: () => \"CURRENT_TIMESTAMP\"\r\n  })\r\n  acceptedAt?: Date;\r\n\r\n  @Column({\r\n    name: \"checkin_slot\",\r\n    nullable: false,\r\n  })\r\n  checkinSlot?: string;\r\n\r\n  @Column({\r\n    name: \"checkout_slot\",\r\n    nullable: false,\r\n  })\r\n  checkoutSlot?: string;\r\n\r\n  @Column({\r\n    name: \"checkin_date\",\r\n    nullable: false,\r\n  })\r\n  checkinDate?: string;\r\n\r\n  // @Column({\r\n  //   name: \"checkout_date\",\r\n  //   nullable: false,\r\n  //   type: \"timestamptz\"\r\n  // })\r\n  // checkoutDate?: Date;\r\n\r\n  @Column({\r\n    name: \"checkedin_at\",\r\n    nullable: false,\r\n    type: \"timestamptz\"\r\n  })\r\n  checkedinAt?: Date;\r\n\r\n  @Column({\r\n    name: \"checkedout_at\",\r\n    nullable: false,\r\n    type: \"timestamptz\"\r\n  })\r\n  checkedoutAt?: Date;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n\r\n  @Column({\r\n    name: 'cancel_reason',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  cancelReason?: string;\r\n\r\n  @Column({\r\n    name: 'signature_checkin',\r\n    type: 'varchar',\r\n    length: 256,\r\n  })\r\n  signatureCheckin?: string;\r\n\r\n  @Column({\r\n    name: 'signature_checkout',\r\n    type: 'varchar',\r\n    length: 256,\r\n  })\r\n  signatureCheckout?: string;\r\n\r\n  @Column({\r\n    name: 'booked_for',\r\n    type: 'uuid',\r\n  })\r\n  bookedFor?: string;\r\n\r\n}\r\n","import {\r\n  Column,\r\n  CreateDateColumn,\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n} from 'typeorm';\r\n\r\n@Entity('booking_room_feedback')\r\nexport class BookingRoomFeedback {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'feedback_msg',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  feedbackMessage?: string;\r\n\r\n  @Column({\r\n    name: 'feedback_type',\r\n    type: 'uuid',\r\n  })\r\n  feedbackType?: string;\r\n\r\n  @Column({\r\n    name: 'rate_num',\r\n    type: 'smallint',\r\n  })\r\n  rateNum?: string;\r\n\r\n  @Column({\r\n    name: 'booking_room_id',\r\n    type: 'uuid',\r\n  })\r\n  bookingRoomId?: string;\r\n\r\n  @CreateDateColumn({\r\n    name: 'created_at',\r\n    type: 'timestamptz',\r\n  })\r\n  createdAt?: string;\r\n\r\n  @Column({\r\n    name: 'created_by',\r\n    type: 'uuid',\r\n  })\r\n  createdBy?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntity } from './base/base.entity';\r\n\r\n@Entity('device_type_hist')\r\nexport class DeviceTypeHist extends BaseEntity {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'device_type_id',\r\n    type: 'uuid',\r\n  })\r\n  deviceTypeId?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntity } from './base/base.entity';\r\n\r\n@Entity('device_type')\r\nexport class DeviceType extends BaseEntity {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntityWithDisabled } from './base/base.entity';\r\n\r\n@Entity('device_hist')\r\nexport class DeviceHist extends BaseEntityWithDisabled {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'device_id',\r\n    type: 'uuid',\r\n  })\r\n  deviceId?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'type',\r\n    type: 'uuid',\r\n  })\r\n  type?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntity, BaseEntityWithDisabled } from './base/base.entity';\r\n\r\n@Entity('devices')\r\nexport class Devices extends BaseEntityWithDisabled {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n    comment: 'ID for Equipments',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    nullable: false,\r\n    unique: true,\r\n    length: 250,\r\n    type: 'varchar',\r\n    comment: `Equipment's name`,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    nullable: false,\r\n    unique: false,\r\n    length: 500,\r\n    type: 'varchar',\r\n    comment: 'Equipments description',\r\n  })\r\n  description?: string;\r\n\r\n  @Column({\r\n    name: 'type',\r\n    nullable: false,\r\n    unique: false,\r\n    length: 250,\r\n    type: 'varchar',\r\n    comment: 'Equipments description',\r\n  })\r\n  type?: string;\r\n}\r\n","import {\r\n  Column,\r\n  CreateDateColumn,\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  UpdateDateColumn,\r\n} from 'typeorm';\r\n\r\n@Entity('feedback_hist')\r\nexport class FeedbackHist {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'feedback_id',\r\n    type: 'uuid',\r\n  })\r\n  feedbackId?: string;\r\n\r\n  @Column({\r\n    name: 'feedback_msg',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  feedbackMessage?: string;\r\n\r\n  @Column({\r\n    name: 'feedback_type_id',\r\n    type: 'uuid',\r\n  })\r\n  feedbackTypeId?: string;\r\n\r\n  @Column({\r\n    name: 'resolved_msg',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  resolvedMessage?: string;\r\n\r\n  @Column({\r\n    name: 'status',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  status?: string;\r\n\r\n  @Column({\r\n    name: 'resolved_by',\r\n    type: 'uuid',\r\n  })\r\n  resolvedBy?: string;\r\n\r\n  @Column({\r\n    name: 'resolved_at',\r\n    type: 'timestamptz',\r\n  })\r\n  resolvedAt?: Date;\r\n\r\n  @CreateDateColumn({\r\n    name: 'created_at',\r\n    type: 'timestamptz',\r\n  })\r\n  createdAt?: Date;\r\n\r\n  @Column({\r\n    name: 'created_by',\r\n    type: 'uuid',\r\n  })\r\n  createdBy?: string;\r\n\r\n  @Column({\r\n    name: 'deleted_at',\r\n    type: 'timestamptz',\r\n  })\r\n  deletedAt?: Date;\r\n\r\n  @Column({\r\n    name: 'deleted_by',\r\n    type: 'uuid',\r\n  })\r\n  deletedBy?: string;\r\n}\r\n","import {\r\n  Column,\r\n  CreateDateColumn,\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  UpdateDateColumn,\r\n} from 'typeorm';\r\n\r\n@Entity('feedback_type')\r\nexport class FeedbackType {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    unique: true,\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n\r\n  @Column({\r\n    name: 'created_by',\r\n    type: 'uuid',\r\n  })\r\n  createdBy?: string;\r\n\r\n  @CreateDateColumn({\r\n    name: 'created_at',\r\n  })\r\n  createdAt?: Date;\r\n\r\n  @Column({\r\n    name: 'updated_by',\r\n    type: 'uuid',\r\n  })\r\n  updatedBy?: string;\r\n\r\n  @Column({\r\n    name: 'deleted_by',\r\n    type: 'uuid',\r\n  })\r\n  deletedBy?: string;\r\n\r\n  @UpdateDateColumn({\r\n    name: 'updated_at',\r\n    type: 'timestamptz',\r\n  })\r\n  updatedAt?: Date;\r\n\r\n  @Column({\r\n    name: 'deleted_at',\r\n    type: 'timestamptz',\r\n  })\r\n  deletedAt?: Date;\r\n}\r\n","import {\r\n  Column,\r\n  CreateDateColumn,\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n} from 'typeorm';\r\n\r\n@Entity('feedback')\r\nexport class Feedback {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'feedback_msg',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  feedbackMessage?: string;\r\n\r\n  @Column({\r\n    name: 'feedback_type_id',\r\n    type: 'uuid',\r\n  })\r\n  feedbackTypeId?: string;\r\n\r\n  @Column({\r\n    name: 'resolved_msg',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  resolvedMessage?: string;\r\n\r\n  @Column({\r\n    name: 'status',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  status?: string;\r\n\r\n  @Column({\r\n    name: 'resolved_by',\r\n    type: 'uuid',\r\n  })\r\n  resolvedBy?: string;\r\n\r\n  @Column({\r\n    name: 'resolved_at',\r\n    type: 'timestamptz',\r\n  })\r\n  resolvedAt?: Date;\r\n\r\n  @CreateDateColumn({\r\n    name: 'created_at',\r\n    type: 'timestamptz',\r\n  })\r\n  createdAt?: Date;\r\n\r\n  @Column({\r\n    name: 'created_by',\r\n    type: 'uuid',\r\n  })\r\n  createdBy?: string;\r\n\r\n  @Column({\r\n    name: 'deleted_at',\r\n    type: 'timestamptz',\r\n  })\r\n  deletedAt?: Date;\r\n\r\n  @Column({\r\n    name: 'deleted_by',\r\n    type: 'uuid',\r\n  })\r\n  deletedBy?: string;\r\n\r\n  @Column({\r\n    name: 'rejected_at',\r\n    type: 'timestamptz',\r\n  })\r\n  rejectedAt?: Date;\r\n\r\n  @Column({\r\n    name: 'rejected_by',\r\n    type: 'uuid',\r\n  })\r\n  rejectedBy?: string;\r\n}\r\n","export * from './account.entity';\r\nexport * from './booking-request.entity';\r\nexport * from './room-wishlist.entity';\r\nexport * from './booking-reason-hist.entity';\r\nexport * from './rooms.entity';\r\nexport * from './room-type.entity';\r\nexport * from './room-hist.entity';\r\nexport * from './room-type-hist.entity';\r\nexport * from './devices.entity';\r\nexport * from './device-type.entity';\r\nexport * from './devices-hist.entity';\r\nexport * from './device-type-hist.entity';\r\nexport * from './account-hist.entity';\r\nexport * from './booking-request-hist.entity';\r\nexport * from './booking-request-devices.entity';\r\nexport * from './notification-type.entity';\r\nexport * from './notification.entity';\r\nexport * from './account-notification.entity';\r\nexport * from './feedback.entity';\r\nexport * from './feedback-hist.entity';\r\nexport * from './feedback-type.entity';\r\nexport * from './booking-room-feedback.entity';\r\nexport * from './room-wishlist-hist.entity';\r\n","import {\r\n  Column,\r\n  CreateDateColumn,\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  UpdateDateColumn,\r\n} from 'typeorm';\r\n\r\n@Entity('notification_type')\r\nexport class NotificationType {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    unique: true,\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n\r\n  @Column({\r\n    name: 'created_by',\r\n    type: 'uuid',\r\n  })\r\n  createdBy?: string;\r\n\r\n  @CreateDateColumn({\r\n    name: 'created_at',\r\n    type: 'timestamptz',\r\n  })\r\n  createdAt?: string;\r\n\r\n  @Column({\r\n    name: 'updated_by',\r\n    type: 'uuid',\r\n  })\r\n  updatedBy?: string;\r\n\r\n  @Column({\r\n    name: 'deleted_by',\r\n    type: 'uuid',\r\n  })\r\n  deletedBy?: string;\r\n\r\n  @UpdateDateColumn({\r\n    name: 'updated_at',\r\n    type: 'timestamptz',\r\n  })\r\n  updatedAt?: Date;\r\n\r\n  @Column({\r\n    name: 'deleted_at',\r\n    type: 'timestamptz',\r\n  })\r\n  deletedAt?: Date;\r\n}\r\n","import {\r\n  Column,\r\n  CreateDateColumn,\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n} from 'typeorm';\r\n\r\n@Entity('notification')\r\nexport class Notification {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'title',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  title?: string;\r\n\r\n  @Column({\r\n    name: 'message',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  message?: string;\r\n\r\n  @Column({\r\n    name: 'created_by',\r\n    type: 'uuid',\r\n  })\r\n  createdBy?: string;\r\n\r\n  @CreateDateColumn({\r\n    name: 'created_at',\r\n    type: 'timestamptz',\r\n  })\r\n  createdAt?: Date;\r\n\r\n  @Column({\r\n    name: 'deleted_by',\r\n    type: 'uuid',\r\n  })\r\n  deletedBy?: string;\r\n\r\n  @Column({\r\n    name: 'deleted_at',\r\n    type: 'timestamptz',\r\n  })\r\n  deletedAt?: Date;\r\n\r\n  @Column({\r\n    name: 'receiver',\r\n    type: 'uuid',\r\n  })\r\n  receiver?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntity } from './base/base.entity';\r\n\r\n@Entity('role_hist')\r\nexport class RoleHist extends BaseEntity {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'role_id',\r\n    type: 'uuid',\r\n  })\r\n  roleId?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntity } from './base/base.entity';\r\n\r\n@Entity('role')\r\nexport class Roles extends BaseEntity {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    type: 'varchar',\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n  })\r\n  description?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntity } from './base/base.entity';\r\n\r\n@Entity('room_hist')\r\nexport class RoomHist extends BaseEntity {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'room_id',\r\n    type: 'uuid',\r\n  })\r\n  roomId?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n\r\n  @Column({\r\n    name: 'type',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  type?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntity } from './base/base.entity';\r\n\r\n@Entity('room_type_hist')\r\nexport class RoomTypeHist extends BaseEntity {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'room_type_id',\r\n    type: 'uuid',\r\n  })\r\n  roomTypeId?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntity } from './base/base.entity';\r\n\r\n@Entity('room_type')\r\nexport class RoomType extends BaseEntity {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    type: 'varchar',\r\n    length: 100,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n    length: 500,\r\n  })\r\n  description?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('room_wishlist_hist')\r\nexport class RoomWishlistHist {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    comment: 'Id for room wishlist',\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    type: 'uuid',\r\n    name: 'room_wishlist_id',\r\n  })\r\n  roomWishlistId: string;\r\n\r\n  @Column({\r\n    type: 'uuid',\r\n    name: 'room_id',\r\n  })\r\n  roomId: string;\r\n\r\n  @Column({\r\n    type: 'uuid',\r\n    name: 'created_by',\r\n  })\r\n  createdBy: string;\r\n\r\n  @Column({\r\n    name: 'created_at',\r\n    nullable: false,\r\n    type: 'timestamp',\r\n    default: () => 'CURRENT_TIMESTAMP',\r\n  })\r\n  createdAt: Date;\r\n\r\n  @Column({\r\n    name: 'slot_num',\r\n    nullable: false,\r\n    type: 'smallint',\r\n  })\r\n  slotNum: number;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\r\n\r\n@Entity(\"room_wishlist\")\r\nexport class RoomWishlist {\r\n  @PrimaryGeneratedColumn(\"uuid\", {\r\n    comment: \"Id for room wishlist\",\r\n    name: \"id\"\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    type: \"uuid\",\r\n    name: \"room_id\",\r\n  })\r\n  roomId: string;\r\n\r\n  @Column({\r\n    type: \"uuid\",\r\n    name: \"created_by\"\r\n  })\r\n  createdBy: string;\r\n\r\n  @Column({\r\n    name: \"created_at\",\r\n    nullable: false,\r\n    type: 'timestamp',\r\n    default: () => 'CURRENT_TIMESTAMP',\r\n  })\r\n  createdAt: Date;\r\n\r\n  @Column({\r\n    name: \"slot_num\",\r\n    nullable: false,\r\n    type: \"smallint\"\r\n  })\r\n  slotNum: number;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { RoomType } from '../enum/room-type.enum';\r\nimport { BaseEntityWithDisabled } from './base/base.entity';\r\n\r\n@Entity('rooms')\r\nexport class Rooms extends BaseEntityWithDisabled {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    nullable: false,\r\n    unique: true,\r\n    length: 100,\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    nullable: true,\r\n    length: 500,\r\n    type: 'varchar',\r\n  })\r\n  description?: string;\r\n\r\n  @Column({\r\n    name: 'type',\r\n    nullable: false,\r\n    length: 100,\r\n    default: RoomType.LIBRARY_ROOM,\r\n  })\r\n  type?: string;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { BaseEntity } from './base/base.entity';\r\n\r\n@Entity('slot')\r\nexport class Slot extends BaseEntity {\r\n  @PrimaryGeneratedColumn('uuid', {\r\n    name: 'id',\r\n  })\r\n  id?: string;\r\n\r\n  @Column({\r\n    name: 'time_start',\r\n    type: 'time',\r\n  })\r\n  timeStart?: string;\r\n\r\n  @Column({\r\n    name: 'time_end',\r\n    type: 'time',\r\n  })\r\n  timeEnd?: string;\r\n\r\n  @Column({\r\n    name: 'name',\r\n    type: 'varchar',\r\n  })\r\n  name?: string;\r\n\r\n  @Column({\r\n    name: 'description',\r\n    type: 'varchar',\r\n  })\r\n  description?: string;\r\n\r\n  @Column({\r\n    name: 'slot_num',\r\n    type: 'smallint',\r\n    unique: true,\r\n  })\r\n  slotNum?: number;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { AccountsController } from '../controllers';\r\nimport { AccountsService } from '../services';\r\nimport { AccountRepository } from '../repositories';\r\nimport { KeycloakService } from '../services';\r\nimport ConfigModule from './global/config.module';\r\nimport { HttpModule } from '@nestjs/axios';\r\nimport { CloudinaryService } from '../services';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { AccountHistService } from '../services/account-hist.service';\r\nimport { AccountHistRepository } from '../repositories/account-hist.repository';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule,\r\n    HttpModule,\r\n    TypeOrmExModule.forCustomRepository([\r\n      AccountRepository,\r\n      AccountHistRepository,\r\n    ]),\r\n  ],\r\n  controllers: [AccountsController],\r\n  providers: [\r\n    AccountsService,\r\n    KeycloakService,\r\n    CloudinaryService,\r\n    AccountHistService,\r\n  ],\r\n  exports: [AccountsService, AccountHistService],\r\n})\r\nexport class AccountsModule {}\r\n","import { DynamicModule, Global, Scope } from '@nestjs/common';\r\n\r\nimport { KeycloakModule } from './keycloak.module';\r\nimport { RoomsModule } from './rooms.module';\r\nimport { HealthCheckModule } from './health-check.module';\r\nimport { AccountsModule } from './accounts.module';\r\nimport { DevicesModule } from './devices.module';\r\nimport GlobalCacheModule from './global/cache.module';\r\nimport GlobalConfigModule from './global/config.module';\r\nimport GlobalTypeOrmModule from './global/typeorm.module';\r\nimport { HttpModule } from '@nestjs/axios';\r\nimport { BookingRoomModule } from './booking-room.module';\r\nimport { CloudinaryModule } from './cloudinary.module';\r\nimport { APP_GUARD } from '@nestjs/core';\r\nimport { RolesGuard } from '../guards/role.guard';\r\nimport { ScheduleModule } from '@nestjs/schedule';\r\nimport { RolesModule } from './roles.module';\r\nimport { RoomTypeModule } from './room-type.module';\r\nimport { DeviceTypeModule } from './device-type.module';\r\nimport { BookingReasonModule } from './booking-reason.module';\r\nimport { SlotModule } from './slot.module';\r\nimport { FeedbackModule } from './feedback.module';\r\nimport { FeedbackTypeModule } from './feedback-type.module';\r\nimport { NotificationModule } from './notification.module';\r\nimport { NotificationTypeModule } from './notification-type.module';\r\n\r\n@Global()\r\nexport class AppModule {\r\n  static forRoot(): DynamicModule {\r\n    return {\r\n      module: AppModule,\r\n      imports: [\r\n        GlobalCacheModule,\r\n        GlobalConfigModule,\r\n        GlobalTypeOrmModule,\r\n        HttpModule,\r\n        CloudinaryModule,\r\n        HealthCheckModule,\r\n        KeycloakModule,\r\n        RoomsModule,\r\n        AccountsModule,\r\n        FeedbackModule,\r\n        FeedbackTypeModule,\r\n        NotificationModule,\r\n        NotificationTypeModule,\r\n        DevicesModule,\r\n        BookingRoomModule,\r\n        RoomTypeModule,\r\n        DeviceTypeModule,\r\n        BookingReasonModule,\r\n        RolesModule,\r\n        SlotModule,\r\n        ScheduleModule.forRoot(),\r\n      ],\r\n      controllers: [],\r\n      exports: [],\r\n      providers: [\r\n        {\r\n          provide: APP_GUARD,\r\n          useClass: RolesGuard,\r\n          scope: Scope.REQUEST,\r\n          inject: KeycloakModule as never,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport ConfigModule from './global/config.module';\r\nimport { HttpModule } from '@nestjs/axios';\r\nimport { AccountsModule } from './accounts.module';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { BookingReasonController } from '../controllers/booking-reason.controller';\r\nimport { BookingReasonService } from '../services/booking-reason.service';\r\nimport { BookingReasonHistService } from '../services/booking-reason-hist.service';\r\nimport { BookingReasonRepository } from '../repositories/booking-reason.repository';\r\nimport { BookingReasonHistRepository } from '../repositories/booking-reason-hist.repository';\r\nimport { KeycloakService } from '../services';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule,\r\n    HttpModule,\r\n    AccountsModule,\r\n    TypeOrmExModule.forCustomRepository([\r\n      BookingReasonRepository,\r\n      BookingReasonHistRepository,\r\n    ]),\r\n  ],\r\n  controllers: [BookingReasonController],\r\n  providers: [BookingReasonService, BookingReasonHistService, KeycloakService],\r\n  exports: [BookingReasonService, BookingReasonHistService],\r\n})\r\nexport class BookingReasonModule {}\r\n","import { forwardRef, Module } from '@nestjs/common';\r\nimport { BookingRoomController } from '../controllers';\r\nimport { BookingRoomService } from '../services';\r\nimport { AccountRepository, BookingRoomRepository } from '../repositories';\r\nimport { RoomsModule } from './rooms.module';\r\nimport { KeycloakModule } from './keycloak.module';\r\nimport { RoomWishlistModule } from './room-wishlist.module';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { DevicesModule } from './devices.module';\r\nimport { TasksService } from '../services/task.service';\r\nimport { AccountsModule } from './accounts.module';\r\nimport { RoomTypeModule } from './room-type.module';\r\nimport { BookingRequestHistService } from '../services/booking-room-hist.service';\r\nimport { BookingRequestHistRepository } from '../repositories/booking-request-hist.repository';\r\nimport { SlotModule } from './slot.module';\r\nimport { BookingRoomDevicesService } from '../services/booking-request-devices.service';\r\nimport { BookingRoomDevicesRepository } from '../repositories';\r\nimport { NotificationModule } from './notification.module';\r\n\r\n@Module({\r\n  imports: [\r\n    DevicesModule,\r\n    RoomWishlistModule,\r\n    KeycloakModule,\r\n    AccountsModule,\r\n    NotificationModule,\r\n    forwardRef(() => RoomTypeModule),\r\n    forwardRef(() => RoomsModule),\r\n    forwardRef(() => SlotModule),\r\n\r\n    TypeOrmExModule.forCustomRepository([\r\n      BookingRoomRepository,\r\n      AccountRepository,\r\n      BookingRequestHistRepository,\r\n      BookingRoomDevicesRepository,\r\n    ]),\r\n  ],\r\n  controllers: [BookingRoomController],\r\n  providers: [\r\n    BookingRoomService,\r\n    TasksService,\r\n    BookingRequestHistService,\r\n    BookingRoomDevicesService,\r\n  ],\r\n  exports: [\r\n    BookingRoomService,\r\n    BookingRequestHistService,\r\n    BookingRoomDevicesService,\r\n  ],\r\n})\r\nexport class BookingRoomModule {}\r\n","import { Module } from \"@nestjs/common\";\r\nimport { CloudinaryService } from \"../services\";\r\nimport ConfigModule from \"./global/config.module\";\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule\r\n  ],\r\n  exports: [CloudinaryService],\r\n  providers: [CloudinaryService]\r\n})\r\nexport class CloudinaryModule {\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { DeviceTypeController } from '../controllers/device-type.controller';\r\nimport { DeviceTypeService } from '../services/device-type.service';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { DeviceTypeRepository } from '../repositories/device-type.repository';\r\nimport { AccountsModule } from './accounts.module';\r\nimport ConfigModule from './global/config.module';\r\nimport { HttpModule } from '@nestjs/axios';\r\nimport { KeycloakService } from '../services';\r\nimport { DeviceTypeHistRepository } from '../repositories/device-type-hist.repository';\r\nimport { DeviceTypeHistService } from '../services/device-type-hist.service';\r\nimport { DevicesModule } from './devices.module';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule,\r\n    HttpModule,\r\n    AccountsModule,\r\n    DevicesModule,\r\n    TypeOrmExModule.forCustomRepository([DeviceTypeRepository, DeviceTypeHistRepository]),\r\n  ],\r\n  controllers: [DeviceTypeController],\r\n  exports: [DeviceTypeService, DeviceTypeHistService],\r\n  providers: [DeviceTypeService, KeycloakService, DeviceTypeHistService],\r\n})\r\nexport class DeviceTypeModule {}\r\n","import { Module } from '@nestjs/common';\r\nimport { DevicesController } from '../controllers';\r\nimport { DevicesService } from '../services';\r\nimport { DeviceHistService } from '../services';\r\nimport { DevicesRepository } from '../repositories';\r\nimport { DeviceHistRepository } from '../repositories';\r\nimport { KeycloakService } from '../services';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { HttpModule } from '@nestjs/axios';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { AccountsModule } from './accounts.module';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule,\r\n    HttpModule,\r\n    AccountsModule,\r\n    TypeOrmExModule.forCustomRepository([\r\n      DevicesRepository,\r\n      DeviceHistRepository,\r\n    ]),\r\n  ],\r\n  controllers: [DevicesController],\r\n  providers: [DevicesService, DeviceHistService, KeycloakService],\r\n  exports: [DevicesService],\r\n})\r\nexport class DevicesModule {}\r\n","import { Module } from '@nestjs/common';\r\nimport { FeedbackTypeController } from '../controllers/feedback-type.controller';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { FeedbackTypeService } from '../services';\r\nimport { FeedbackTypeRepository } from '../repositories';\r\nimport { AccountsModule } from './accounts.module';\r\nimport ConfigModule from './global/config.module';\r\nimport { HttpModule } from '@nestjs/axios';\r\nimport { KeycloakService } from '../services';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule,\r\n    HttpModule,\r\n    AccountsModule,\r\n    TypeOrmExModule.forCustomRepository([FeedbackTypeRepository]),\r\n  ],\r\n  providers: [FeedbackTypeService, KeycloakService],\r\n  exports: [FeedbackTypeService],\r\n  controllers: [FeedbackTypeController],\r\n})\r\nexport class FeedbackTypeModule {}\r\n","import { HttpModule } from '@nestjs/axios';\r\nimport { Module } from '@nestjs/common';\r\nimport {\r\n  FeedbackHistService,\r\n  FeedbackService,\r\n  KeycloakService,\r\n} from '../services';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { FeedbackHistRepository, FeedbackRepository } from '../repositories';\r\nimport { FeedbackController } from '../controllers/feedback.controller';\r\nimport ConfigModule from './global/config.module';\r\nimport { AccountsModule } from './accounts.module';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule,\r\n    HttpModule,\r\n    AccountsModule,\r\n    TypeOrmExModule.forCustomRepository([\r\n      FeedbackRepository,\r\n      FeedbackHistRepository,\r\n    ]),\r\n  ],\r\n  controllers: [FeedbackController],\r\n  providers: [FeedbackService, KeycloakService, FeedbackHistService],\r\n  exports: [FeedbackHistService, FeedbackService],\r\n})\r\nexport class FeedbackModule {}\r\n","import {CacheModule} from \"@nestjs/common\";\r\nimport {ConfigModule, ConfigService} from \"@nestjs/config\";\r\nimport * as redisStore from 'cache-manager-redis-store';\r\nimport type {RedisClientOptions} from 'redis';\r\n\r\nconst GlobalCacheModule = CacheModule.register<RedisClientOptions>({\r\n  imports: [ConfigModule],\r\n  inject: [ConfigService],\r\n  useFactory: (configService: ConfigService) => ({\r\n    isGlobal: true,\r\n    store: redisStore,\r\n    ttl: 120,\r\n\r\n    socket: {\r\n      host: 'fu-lib-room.tk',\r\n      port: 6379,\r\n      password: '12345678x@X',\r\n    }\r\n\r\n  })\r\n});\r\n\r\nexport default GlobalCacheModule;\r\n","import {ConfigModule} from \"@nestjs/config\";\r\nimport configuration from \"../../constants/config/configuration\";\r\nimport * as Joi from \"joi\";\r\n\r\nconst GlobalConfigModule = ConfigModule.forRoot({\r\n  load: [configuration],\r\n  validationSchema: Joi.object({\r\n    'db.mysql.url': Joi.string().ip({version: 'ipv4'}),\r\n    'db.mysql.port': Joi.string().default(3306),\r\n    'db.mysql.username': Joi.string().min(1).max(100),\r\n    'db.mysql.password': Joi.string().min(1).max(255),\r\n    'db.mysql.database': Joi.string().min(1).max(255),\r\n    'db.mysql.synchronize': Joi.boolean(),\r\n    'http.host': Joi.string(),\r\n    'http.port': Joi.number(),\r\n    'https.host': Joi.string(),\r\n    'https.port': Joi.number(),\r\n    'keycloak.host': Joi.string().ip({version: 'ipv4'}),\r\n    'keycloak.port': Joi.number(),\r\n    'keycloak.client.realm': Joi.string().min(1).max(255),\r\n    'keycloak.client.id': Joi.string().min(1).max(255),\r\n    'keycloak.client.secret': Joi.string().min(1).max(1000),\r\n    'redis.host': Joi.string().ip({version: 'ipv4'}),\r\n    'redis.port': Joi.number(),\r\n    'redis.username': Joi.string().min(0).max(100),\r\n    'redis.password': Joi.string().min(0).max(255),\r\n    'elasticsearch.username': Joi.string().min(0).max(100),\r\n    'elasticsearch.password': Joi.string().min(0).max(100),\r\n    'firebase.apiKey': Joi.string(),\r\n    'firebase.authDomain': Joi.string(),\r\n    'firebase.projectId': Joi.string(),\r\n    'firebase.storageBucket': Joi.string(),\r\n    'firebase.messagingSenderId': Joi.string(),\r\n    'firebase.appId': Joi.string(),\r\n    'firebase.measurementId': Joi.string(),\r\n    'firebase.oauth.clientId': Joi.string(),\r\n    'firebase.oauth.audience': Joi.array(),\r\n  })\r\n});\r\n\r\nexport default GlobalConfigModule;\r\n","import { DynamicModule, Provider } from \"@nestjs/common\";\r\nimport { getDataSourceToken } from \"@nestjs/typeorm\";\r\nimport { DataSource } from \"typeorm\";\r\nimport { TYPEORM_EX_CUSTOM_REPOSITORY } from \"../../decorators/typeorm-ex.decorator\";\r\n\r\nexport class TypeOrmExModule {\r\n  public static forCustomRepository<T extends new (...args: any[]) => any>(repositories: T[]): DynamicModule {\r\n    const providers: Provider[] = [];\r\n\r\n    for (const repository of repositories) {\r\n      const entity = Reflect.getMetadata(TYPEORM_EX_CUSTOM_REPOSITORY, repository);\r\n\r\n      if (!entity) {\r\n        continue;\r\n      }\r\n\r\n      providers.push({\r\n        inject: [getDataSourceToken()],\r\n        provide: repository,\r\n        useFactory: (dataSource: DataSource): typeof repository => {\r\n          const baseRepository = dataSource.getRepository<any>(entity);\r\n          return new repository(baseRepository.target, baseRepository.manager, baseRepository.queryRunner);\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      exports: providers,\r\n      module: TypeOrmExModule,\r\n      providers\r\n    };\r\n  }\r\n}\r\n","import { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { Environment } from '@app/constants';\r\nimport {\r\n  Accounts,\r\n  AccountHist,\r\n  BookingRequest,\r\n  BookingRequestHist,\r\n  Devices,\r\n  DeviceHist,\r\n  Rooms,\r\n  RoomWishlist,\r\n  BookingReasonHist,\r\n  RoomHist,\r\n  RoomTypeHist,\r\n  DeviceTypeHist,\r\n  BookingRequestDevices,\r\n  RoomWishlistHist,\r\n} from '../../models';\r\nimport { Roles } from '../../models/role.entity';\r\nimport { RoomType } from '../../models';\r\nimport { DeviceType } from '../../models';\r\nimport { BookingReason } from '../../models/booking-reason.entity';\r\nimport { Slot } from '../../models/slot.entity';\r\nimport { RoleHist } from '../../models/role-hist.entity';\r\nimport { AccountNotification } from '../../models';\r\nimport { BookingRoomFeedback } from '../../models';\r\nimport { Feedback } from '../../models';\r\nimport { FeedbackType } from '../../models';\r\nimport { FeedbackHist } from '../../models';\r\nimport { Notification } from '../../models';\r\nimport { NotificationType } from '../../models';\r\n\r\nconst GlobalTypeOrmModule = TypeOrmModule.forRootAsync({\r\n  imports: [ConfigModule],\r\n  useFactory: (configService: ConfigService) => ({\r\n    type: 'postgres',\r\n    host: configService.get<string>(Environment.db.postgres.url),\r\n    port: configService.get<number>(Environment.db.postgres.port),\r\n    username: configService.get<string>(Environment.db.postgres.username),\r\n    password: configService.get<string>(Environment.db.postgres.password),\r\n    database: configService.get<string>(Environment.db.postgres.database),\r\n    entities: [\r\n      Accounts,\r\n      AccountHist,\r\n      AccountNotification,\r\n      BookingReason,\r\n      BookingReasonHist,\r\n      BookingRequest,\r\n      BookingRequestHist,\r\n      BookingRequestDevices,\r\n      BookingRoomFeedback,\r\n      Devices,\r\n      DeviceType,\r\n      DeviceHist,\r\n      DeviceTypeHist,\r\n      Feedback,\r\n      FeedbackType,\r\n      FeedbackHist,\r\n      Notification,\r\n      NotificationType,\r\n      Rooms,\r\n      RoomHist,\r\n      RoomType,\r\n      RoomTypeHist,\r\n      RoomWishlistHist,\r\n      RoomWishlist,\r\n      Roles,\r\n      RoleHist,\r\n      Slot,\r\n    ],\r\n    synchronize: configService.get<boolean>(\r\n      Environment.db.postgres.synchronize\r\n    ),\r\n    logging: ['query'],\r\n    cache: false,\r\n    timezone: '+7',\r\n  }),\r\n  inject: [ConfigService],\r\n});\r\n\r\nexport default GlobalTypeOrmModule;\r\n","import { Module } from \"@nestjs/common\";\r\nimport { HealthCheckController } from \"../controllers\";\r\nimport { KeycloakService } from \"../services\";\r\nimport { HttpModule } from \"@nestjs/axios\";\r\nimport ConfigModule from \"./global/config.module\";\r\n\r\n@Module({\r\n  imports: [\r\n    HttpModule,\r\n    ConfigModule\r\n  ],\r\n  controllers: [\r\n    HealthCheckController\r\n  ],\r\n  providers: [KeycloakService],\r\n  exports: []\r\n})\r\nexport class HealthCheckModule {}\r\n","import { Module } from '@nestjs/common';\r\nimport { KeycloakService } from '../services';\r\nimport { HttpModule } from '@nestjs/axios';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { AccountRepository } from '../repositories';\r\nimport ConfigModule from './global/config.module';\r\nimport { AuthenticationService } from '../services';\r\nimport { CloudinaryService } from '../services';\r\nimport { AccountsModule } from './accounts.module';\r\nimport { AuthenticationController } from '../controllers';\r\n\r\n@Module({\r\n  imports: [\r\n    HttpModule,\r\n    TypeOrmModule.forFeature([AccountRepository]),\r\n    ConfigModule,\r\n    AccountsModule,\r\n  ],\r\n  controllers: [AuthenticationController],\r\n  providers: [KeycloakService, AuthenticationService, CloudinaryService],\r\n  exports: [KeycloakService],\r\n})\r\nexport class KeycloakModule {}\r\n","import { Module } from '@nestjs/common';\r\nimport { NotificationController } from '../controllers/notification.controller';\r\nimport { NotificationService } from '../services/notification.service';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { NotificationRepository } from '../repositories/notification.repository';\r\nimport { NotificationTypeRepository } from '../repositories';\r\nimport { NotificationTypeService } from '../services';\r\nimport { NotificationTypeController } from '../controllers/notification-type.controller';\r\n\r\n@Module({\r\n  imports: [TypeOrmExModule.forCustomRepository([NotificationTypeRepository])],\r\n  exports: [NotificationTypeService],\r\n  providers: [NotificationTypeService],\r\n  controllers: [NotificationTypeController],\r\n})\r\nexport class NotificationTypeModule {}\r\n","import { Module } from '@nestjs/common';\r\nimport {  NotificationController } from '../controllers';\r\nimport {  NotificationService } from '../services';\r\nimport { KeycloakService } from '../services';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { HttpModule } from '@nestjs/axios';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { AccountsModule } from './accounts.module';\r\nimport { NotificationRepository } from '../repositories/notification.repository';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule,\r\n    HttpModule,\r\n    AccountsModule,\r\n    TypeOrmExModule.forCustomRepository([\r\n      NotificationRepository,\r\n    ]),\r\n  ],\r\n  controllers: [NotificationController],\r\n  providers: [NotificationService, KeycloakService],\r\n  exports: [NotificationService],\r\n})\r\nexport class NotificationModule {}\r\n","import { Module } from '@nestjs/common';\r\nimport { RoleService } from '../services/role.service';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { RoleController } from '../controllers/role.controller';\r\nimport { RolesRepository } from '../repositories/roles.repository';\r\nimport { KeycloakService } from '../services';\r\nimport ConfigModule from './global/config.module';\r\nimport { HttpModule } from '@nestjs/axios';\r\nimport { AccountsModule } from './accounts.module';\r\nimport { RoleHistRepository } from '../repositories/role-hist.repository';\r\nimport { RoleHistService } from '../services/role-hist.service';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule,\r\n    HttpModule,\r\n    AccountsModule,\r\n    TypeOrmExModule.forCustomRepository([RolesRepository, RoleHistRepository]),\r\n  ],\r\n  controllers: [RoleController],\r\n  providers: [RoleService, RoleHistService, KeycloakService],\r\n  exports: [RoleService, RoleHistService],\r\n})\r\nexport class RolesModule {}\r\n","import { forwardRef, Module } from '@nestjs/common';\r\nimport { RoomTypeService } from '../services/room-type.service';\r\nimport { RoomTypeController } from '../controllers/room-type.controller';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { RoomType } from '../models/room-type.entity';\r\nimport { RoomTypeRepository } from '../repositories/room-type.repository';\r\nimport { KeycloakService, RoomsService } from '../services';\r\nimport ConfigModule from './global/config.module';\r\nimport { HttpModule } from '@nestjs/axios';\r\nimport { AccountsModule } from './accounts.module';\r\nimport { RoomTypeHistService } from '../services/room-type-hist.service';\r\nimport { RoomTypeHistRepository } from '../repositories/room-type-hist.repository';\r\nimport { RoomsModule } from './rooms.module';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule,\r\n    HttpModule,\r\n    AccountsModule,\r\n    forwardRef(() => RoomsModule),\r\n    TypeOrmExModule.forCustomRepository([\r\n      RoomTypeRepository,\r\n      RoomTypeHistRepository,\r\n    ]),\r\n  ],\r\n  controllers: [RoomTypeController],\r\n  exports: [RoomTypeService, RoomTypeHistService],\r\n  providers: [RoomTypeService, KeycloakService, RoomTypeHistService],\r\n})\r\nexport class RoomTypeModule {}\r\n","import { Module } from '@nestjs/common';\r\nimport {\r\n  RoomWishlistHistRepository,\r\n  RoomWishlistRepository,\r\n} from '../repositories';\r\nimport { RoomWishlistService } from '../services';\r\nimport { AccountsModule } from './accounts.module';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { RoomWishlistHistService } from '../services/room-wishlist-hist.service';\r\nimport { SlotModule } from './slot.module';\r\n\r\n@Module({\r\n  imports: [\r\n    AccountsModule,\r\n    SlotModule,\r\n    TypeOrmExModule.forCustomRepository([\r\n      RoomWishlistRepository,\r\n      RoomWishlistHistRepository,\r\n    ]),\r\n  ],\r\n  exports: [RoomWishlistService, RoomWishlistHistService],\r\n  providers: [RoomWishlistService, RoomWishlistHistService],\r\n})\r\nexport class RoomWishlistModule {}\r\n","import { forwardRef, Module } from '@nestjs/common';\r\nimport { RoomsController } from '../controllers';\r\nimport { RoomsService } from '../services';\r\nimport { AccountRepository, RoomsRepository } from '../repositories';\r\nimport { HttpModule } from '@nestjs/axios';\r\nimport ConfigModule from './global/config.module';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { KeycloakModule } from './keycloak.module';\r\nimport { AccountsModule } from './accounts.module';\r\nimport { RoomHistRepository } from '../repositories/room-hist.repository';\r\nimport { RoomHistService } from '../services/room-hist.service';\r\nimport { BookingRoomModule } from './booking-room.module';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule,\r\n    HttpModule,\r\n    KeycloakModule,\r\n    AccountsModule,\r\n    forwardRef(() => BookingRoomModule),\r\n    TypeOrmExModule.forCustomRepository([RoomsRepository, RoomHistRepository]),\r\n  ],\r\n  controllers: [RoomsController],\r\n  providers: [RoomsService, RoomHistService],\r\n  exports: [RoomsService, RoomHistService],\r\n})\r\nexport class RoomsModule {}\r\n","import { forwardRef, Module } from '@nestjs/common';\r\nimport { TypeOrmExModule } from './global/typeorm-ex.module';\r\nimport { SlotRepository } from '../repositories/slot.repository';\r\nimport { SlotController } from '../controllers/slots.controller';\r\nimport { SlotService } from '../services/slot.service';\r\nimport { BookingRoomService, KeycloakService } from '../services';\r\nimport { HttpModule } from '@nestjs/axios';\r\nimport ConfigModule from './global/config.module';\r\nimport { AccountsModule } from './accounts.module';\r\nimport { BookingRoomRepository } from '../repositories';\r\nimport { BookingRoomModule } from './booking-room.module';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule,\r\n    HttpModule,\r\n    AccountsModule,\r\n    forwardRef(() => BookingRoomModule),\r\n    TypeOrmExModule.forCustomRepository([\r\n      SlotRepository,\r\n    ]),\r\n  ],\r\n  controllers: [SlotController],\r\n  providers: [SlotService, KeycloakService],\r\n  exports: [SlotService],\r\n})\r\nexport class SlotModule {}\r\n","import { PaginationParams } from '../../controllers/pagination.model';\r\nimport {\r\n  IsBoolean,\r\n  IsNotEmpty,\r\n  IsOptional,\r\n  IsString,\r\n  MaxLength,\r\n  MinLength,\r\n} from 'class-validator';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class AccountAddRequestPayload extends PaginationParams {\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @MinLength(8)\r\n  @MaxLength(100)\r\n  @IsString()\r\n  @IsNotEmpty({\r\n    message: 'Userame can not be empty',\r\n  })\r\n  username: string;\r\n\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @MinLength(8)\r\n  @MaxLength(100)\r\n  @IsString()\r\n  @IsNotEmpty({\r\n    message: 'FullName can not be empty',\r\n  })\r\n  fullname: string;\r\n\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @MinLength(11)\r\n  @MaxLength(11)\r\n  @IsString()\r\n  @IsOptional()\r\n  phone: string;\r\n\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @MinLength(11)\r\n  @MaxLength(11)\r\n  @IsString()\r\n  @IsOptional()\r\n  email: string;\r\n\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @MaxLength(100)\r\n  @IsString()\r\n  @IsNotEmpty({\r\n    message: 'Description can not be empty',\r\n  })\r\n  description: string;\r\n\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @IsNotEmpty({\r\n    message: 'Role can not be empty',\r\n  })\r\n  roleId: string;\r\n\r\n  @ApiProperty({\r\n    name: 'avatar',\r\n    description: 'Avatar of the account',\r\n    required: true,\r\n    type: String,\r\n    title: 'avatar',\r\n    example: 'http://google.com/',\r\n    minLength: 1,\r\n    maxLength: 256,\r\n  })\r\n  avatar: string;\r\n\r\n  @ApiProperty({\r\n    name: 'isDisabled',\r\n    description: 'Is the account should be disabled',\r\n    type: Boolean,\r\n    example: true,\r\n  })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  isDisabled?: boolean;\r\n}\r\n","import { PaginationParams } from '../../controllers/pagination.model';\r\nimport {\r\n  IsBoolean, IsEmail,\r\n  IsNotEmpty, IsNumber,\r\n  IsOptional,\r\n  IsString, Matches,\r\n  MaxLength, Min, MinLength,\r\n} from 'class-validator';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\nimport {ApiProperty} from \"@nestjs/swagger\";\r\n\r\n\r\nexport class AccountUpdateProfilePayload extends PaginationParams {\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @IsNotEmpty({\r\n    message: 'Full name can not be empty',\r\n  })\r\n  @MinLength(0)\r\n  @MaxLength(55)\r\n  @IsString()\r\n  fullname: string;\r\n\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @IsNotEmpty({\r\n    message: 'Email can not be empty',\r\n  })\r\n  @IsEmail()\r\n  email: string;\r\n\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @Matches(/[0-9]/,{\r\n    message: 'Phone number must be numbers'\r\n  })\r\n  @MinLength(10)\r\n  @MaxLength(11)\r\n  @IsNotEmpty({\r\n    message: 'Phone can not be empty',\r\n  })\r\n  phone: string;\r\n\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @IsOptional()\r\n  description?: string;\r\n\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @IsOptional()\r\n  roleId?: string;\r\n}\r\n","import { PaginationParams } from '../../controllers/pagination.model';\r\nimport {\r\n  IsArray,\r\n  IsNotEmpty,\r\n  IsOptional,\r\n  IsString,\r\n  MaxLength,\r\n} from 'class-validator';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\n\r\nexport class BookingRequestAddRequestPayload extends PaginationParams {\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @MaxLength(100)\r\n  @IsNotEmpty({\r\n    message: 'Room can not be empty',\r\n  })\r\n  @IsString()\r\n  roomId: string;\r\n\r\n  @IsNotEmpty({\r\n    message: 'Day checkin can not be empty',\r\n  })\r\n  @IsString()\r\n  checkinDate?: string;\r\n\r\n  @IsOptional()\r\n  @IsString()\r\n  checkoutDate?: string;\r\n\r\n  @IsNotEmpty({\r\n    message: 'Slot check in can not be empty',\r\n  })\r\n  @IsString()\r\n  checkinSlot?: string;\r\n\r\n  @IsNotEmpty({\r\n    message: 'Slot check out can not be empty',\r\n  })\r\n  @IsString()\r\n  checkoutSlot?: string;\r\n\r\n  @MaxLength(500)\r\n  @IsOptional()\r\n  @IsString()\r\n  description?: string;\r\n\r\n  @IsOptional()\r\n  @IsString()\r\n  bookedFor?: string;\r\n\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @IsNotEmpty({\r\n    message: 'Reason type can not be empty',\r\n  })\r\n  @IsString()\r\n  bookingReasonId: string;\r\n\r\n  @IsOptional()\r\n  @IsArray()\r\n  listDevice: [];\r\n}\r\n","\r\nimport {\r\n  IsNotEmpty,\r\n  MaxLength,\r\n} from 'class-validator';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\n\r\nexport class CancelRequestPayload {\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @MaxLength(100)\r\n  @IsNotEmpty({\r\n    message: 'Reason can not be empty',\r\n  })\r\n  reason: string;\r\n\r\n}\r\n","import { ApiProperty } from \"@nestjs/swagger\";\r\n\r\nexport class ChangeProfilePasswordRequest {\r\n  @ApiProperty({\r\n    name: \"username\",\r\n    required: true,\r\n    type: String,\r\n    example: \"example-account\",\r\n    minLength: 1,\r\n    maxLength: 100\r\n  })\r\n  username: string;\r\n\r\n  @ApiProperty({\r\n    name: \"password\",\r\n    required: true,\r\n    type: String,\r\n    example: \"my-password\",\r\n    minLength: 1,\r\n    maxLength: 100\r\n  })\r\n  password: string;\r\n\r\n  @ApiProperty({\r\n    name: \"newPassword\",\r\n    required: true,\r\n    type: String,\r\n    example: \"my-password\",\r\n    minLength: 1,\r\n    maxLength: 100\r\n  })\r\n  newPassword: string;\r\n}\r\n","import { PaginationParams } from '../../controllers/pagination.model';\r\nimport {\r\n  IsBoolean,\r\n  IsNotEmpty,\r\n  IsOptional,\r\n  IsString,\r\n  MaxLength,\r\n  MinLength,\r\n} from 'class-validator';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class DataAddRequestPayload extends PaginationParams {\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @MaxLength(100)\r\n  @IsNotEmpty({\r\n    message: 'Name can not be empty',\r\n  })\r\n  name: string;\r\n\r\n  @ApiProperty({\r\n    name: 'description',\r\n    description: 'Description to be added',\r\n    maxLength: 500,\r\n    minLength: 0,\r\n    type: String,\r\n    example: 'New entity',\r\n  })\r\n  @MaxLength(500)\r\n  @IsOptional()\r\n  @IsString()\r\n  description?: string;\r\n\r\n  @ApiProperty({\r\n    name: 'isDisabled',\r\n    description: 'Is the room should be disabled',\r\n    type: Boolean,\r\n    example: true,\r\n  })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  isDisabled?: boolean;\r\n\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @IsNotEmpty({\r\n    message: 'Type can not be empty',\r\n  })\r\n  type: string;\r\n}\r\n","import { PaginationParams } from '../../controllers/pagination.model';\r\nimport { IsNotEmpty, IsNumber, IsOptional, IsString, MinLength } from 'class-validator';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\n\r\nexport class FeedbackResolveRequestPayload extends PaginationParams {\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @IsNotEmpty({\r\n    message: `Resolve message can't be empty`,\r\n  })\r\n  resolveMessage: string;\r\n}\r\n","import { PaginationParams } from '../../controllers/pagination.model';\r\nimport { IsNotEmpty, IsNumber, IsOptional, IsString, MinLength } from 'class-validator';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\n\r\nexport class FeedbackSendRequestPayload extends PaginationParams {\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @IsNotEmpty({\r\n    message: `Message can't be empty`,\r\n  })\r\n  message: string;\r\n\r\n  @IsOptional()\r\n  type: string;\r\n  \r\n}\r\n","import { PaginationParams } from '../../controllers/pagination.model';\r\nimport { IsNotEmpty, IsNumber, IsOptional, IsString, MinLength } from 'class-validator';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\n\r\nexport class MasterDataAddRequestPayload extends PaginationParams {\r\n  @Transform(({ value }: TransformFnParams) => value?.trim())\r\n  @IsNotEmpty({\r\n    message: 'Name can not be empty',\r\n  })\r\n  name: string;\r\n\r\n  @IsOptional()\r\n  @IsNumber()\r\n  slotNum: number;\r\n\r\n  @IsOptional()\r\n  description: string;\r\n\r\n  @IsOptional()\r\n  timeStart: string;\r\n\r\n  @IsOptional()\r\n  timeEnd: string;\r\n}\r\n","import { ApiProperty } from \"@nestjs/swagger\";\r\n\r\nexport class RefreshTokenPayload {\r\n  @ApiProperty({\r\n    name: \"refresh_token\",\r\n    example: \"example-refresh-token\",\r\n    type: String,\r\n    required: true,\r\n    description: \"Refresh token which is given by logging into the system\",\r\n    title: \"Refresh token\"\r\n  })\r\n  refreshToken: string;\r\n}\r\n","import { ArgumentMetadata, Injectable, PipeTransform } from \"@nestjs/common\";\r\nimport {AccountsService, KeycloakService} from \"../services\";\r\nimport { KeycloakUserInstance } from \"../dto/keycloak.user\";\r\nimport { AccountRepository } from \"../repositories\";\r\n\r\n@Injectable()\r\nexport class ParseTokenPipe implements PipeTransform {\r\n\r\n  constructor(private readonly keycloakService: KeycloakService,\r\n              private readonly accountService: AccountsService) {\r\n  }\r\n\r\n  async transform(value: any, metadata: ArgumentMetadata): Promise<KeycloakUserInstance> {\r\n    const keycloakUser = await this.keycloakService.getUserInfo(value);\r\n    const accountId = await this.accountService.getAccountIdByKeycloakId(keycloakUser.sub);\r\n    return {\r\n      ...keycloakUser,\r\n      account_id: accountId\r\n    };\r\n  }\r\n\r\n}\r\n","import { ArgumentMetadata, BadRequestException, Injectable, PipeTransform } from \"@nestjs/common\";\r\nimport { validate } from \"class-validator\";\r\nimport { plainToClass } from \"class-transformer\";\r\nimport { AddRoomRequest } from \"@app/models\";\r\n\r\n@Injectable()\r\nexport class AddRoomValidation implements PipeTransform<any> {\r\n\r\n\r\n  async transform(value: AddRoomRequest, { metatype }: ArgumentMetadata): Promise<AddRoomRequest> {\r\n    if (!metatype || !this.validateMetaType(metatype)) {\r\n      return value;\r\n    }\r\n\r\n    const object = plainToClass(metatype, value);\r\n    const errors = await validate(object);\r\n\r\n    if (errors.length > 0) {\r\n      throw new BadRequestException(Object.values(errors[0].constraints)[0]);\r\n    }\r\n\r\n    return value;\r\n\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  private validateMetaType(metatype: Function): boolean {\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    const types: Function[] = [String, Boolean, Number, Array, Object];\r\n    return !types.includes(metatype);\r\n  }\r\n}\r\n","import {ArgumentMetadata, BadRequestException, Inject, Injectable, PipeTransform} from \"@nestjs/common\";\r\nimport {RoomsRequestPayload} from \"../../payload/request/rooms.payload\";\r\nimport {validate} from \"class-validator\";\r\nimport {plainToClass} from \"class-transformer\";\r\nimport {DevicesRequestPayload} from \"../../payload/request/devices.payload\";\r\n\r\n@Injectable()\r\nexport class DevicesValidation implements PipeTransform<any> {\r\n\r\n\r\n  async transform(value: RoomsRequestPayload, {metatype}: ArgumentMetadata): Promise<DevicesRequestPayload> {\r\n    if (!metatype || !this.validateMetaType(metatype)) {\r\n      return value;\r\n    }\r\n\r\n    const object = plainToClass(metatype, value);\r\n    const errors = await validate(object);\r\n\r\n    if (errors.length > 0) {\r\n      throw new BadRequestException(Object.values(errors[0].constraints)[0]);\r\n    }\r\n\r\n    return value;\r\n\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  private validateMetaType(metatype: Function): boolean {\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    const types: Function[] = [String, Boolean, Number, Array, Object];\r\n    return !types.includes(metatype);\r\n  }\r\n}\r\n","import {ArgumentMetadata, BadRequestException, Inject, Injectable, PipeTransform} from \"@nestjs/common\";\r\nimport {RoomsRequestPayload} from \"../../payload/request/rooms.payload\";\r\nimport {validate} from \"class-validator\";\r\nimport {plainToClass} from \"class-transformer\";\r\n\r\n@Injectable()\r\nexport class RoomsValidation implements PipeTransform<any> {\r\n\r\n\r\n  async transform(value: RoomsRequestPayload, {metatype}: ArgumentMetadata): Promise<RoomsRequestPayload> {\r\n    if (!metatype || !this.validateMetaType(metatype)) {\r\n      return value;\r\n    }\r\n\r\n    const object = plainToClass(metatype, value);\r\n    const errors = await validate(object);\r\n\r\n    if (errors.length > 0) {\r\n      throw new BadRequestException(Object.values(errors[0].constraints)[0]);\r\n    }\r\n\r\n    return value;\r\n\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  private validateMetaType(metatype: Function): boolean {\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    const types: Function[] = [String, Boolean, Number, Array, Object];\r\n    return !types.includes(metatype);\r\n  }\r\n}\r\n","import {ArgumentMetadata, BadRequestException, Inject, Injectable, PipeTransform} from \"@nestjs/common\";\r\nimport {validate} from \"class-validator\";\r\nimport {plainToClass} from \"class-transformer\";\r\nimport {UsersRequestPayload} from \"../../payload/request/users.payload\";\r\n\r\n@Injectable()\r\nexport class UsersValidation implements PipeTransform<any> {\r\n\r\n\r\n  async transform(value: UsersRequestPayload, {metatype}: ArgumentMetadata): Promise<UsersRequestPayload> {\r\n    if (!metatype || !this.validateMetaType(metatype)) {\r\n      return value;\r\n    }\r\n\r\n    const object = plainToClass(metatype, value);\r\n    const errors = await validate(object);\r\n\r\n    if (errors.length > 0) {\r\n      throw new BadRequestException(Object.values(errors[0].constraints)[0]);\r\n    }\r\n\r\n    return value;\r\n\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  private validateMetaType(metatype: Function): boolean {\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    const types: Function[] = [String, Boolean, Number, Array, Object];\r\n    return !types.includes(metatype);\r\n  }\r\n}\r\n","import { Repository } from 'typeorm';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { AccountHist, Accounts } from '../models';\r\n\r\n@CustomRepository(AccountHist)\r\nexport class AccountHistRepository extends Repository<AccountHist> {\r\n    async createNew(payload: Accounts): Promise<AccountHist> {\r\n      console.log(\"AAAAAAAAAA: \", payload)\r\n      const accountId = payload.id;\r\n      delete payload.id\r\n      return this.save({\r\n        accountId: accountId,\r\n        ...payload,\r\n      });\r\n    }\r\n  }\r\n","import { Repository, UpdateResult } from 'typeorm';\r\nimport { Accounts } from '../models';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { RepositoryPaginationPayload } from '../models/search-pagination.payload';\r\nimport {\r\n  IPaginationMeta,\r\n  paginateRaw,\r\n  Pagination,\r\n} from 'nestjs-typeorm-paginate';\r\nimport { Roles } from '../models/role.entity';\r\nimport { AccountsPaginationParams } from '../controllers/accounts-pagination.model';\r\nimport { AccountAddRequestPayload } from '../payload/request/account-add.request.payload';\r\nimport { AccountUpdateProfilePayload } from '../payload/request/account-update-profile.request.payload';\r\n\r\n@CustomRepository(Accounts)\r\nexport class AccountRepository extends Repository<Accounts> {\r\n  existsById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select('COUNT(1)', 'count')\r\n      .where('accounts.id = :id', { id: id })\r\n      .getRawOne()\r\n      .then((data) => data['count'] > 0);\r\n  }\r\n\r\n  async getRoleOfAccount(id: string): Promise<{ role_name: string }> {\r\n    return this.createQueryBuilder('account')\r\n      .select('role.name')\r\n      .innerJoin(Roles, 'role', 'role.id = account.role_id')\r\n      .where('account.disabled_at IS NULL')\r\n      .andWhere('account.deleted_at IS NULL')\r\n      .andWhere('account.id = :accountId', { accountId: id })\r\n      .getRawOne();\r\n  }\r\n\r\n  async findUserNames(): Promise<Accounts[]> {\r\n    return this.createQueryBuilder('a')\r\n      .select('a.username', 'name')\r\n      .addSelect('a.id', 'id')\r\n      .where('a.disabled_at IS NULL')\r\n      .andWhere('a.deleted_at IS NULL')\r\n      .orderBy('a.username', 'ASC')\r\n      .getRawMany<Accounts>();\r\n  }\r\n\r\n  async checkIfAccountIsDeletedById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select('accounts.deleted_at')\r\n      .where('accounts.id = :id', { id: id })\r\n      .getRawOne<boolean>()\r\n      .then((data) => (data ? data['deleted_at'] : true));\r\n  }\r\n\r\n  async checkIfAccountIsDisabledById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select('accounts.disabled_at')\r\n      .where('accounts.id = :id', { id: id })\r\n      .getRawOne<boolean>()\r\n      .then((data) => (data ? data['disabled_at'] : true));\r\n  }\r\n\r\n  findKeycloakIdByGoogleId(googleId: string): Promise<string> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select('accounts.keycloak_id', 'keycloakId')\r\n      .where('accounts.google_id = :googleId', { googleId: googleId })\r\n      .getRawOne()\r\n      .then((data) => data?.keycloakId);\r\n  }\r\n\r\n  async isExistedByUsername(username: string): Promise<boolean> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select('COUNT(accounts.username)')\r\n      .where('accounts.username = :username', { username })\r\n      .getRawOne()\r\n      .then((data) => data['count'] > 0);\r\n  }\r\n\r\n  async checkIfUserAlreadyHasAvatar(id: string): Promise<boolean> {\r\n    const data = await this.createQueryBuilder('accounts')\r\n      .select('COUNT(accounts.avatar)')\r\n      .where('accounts.id = :id', { id: id })\r\n      .getRawOne<Array<object>>();\r\n    return data.length > 0;\r\n  }\r\n\r\n  findByKeycloakId(keycloakId: string): Promise<Accounts> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select([\r\n        'accounts.id',\r\n        'accounts.keycloak_id',\r\n        'accounts.google_id',\r\n        'accounts.username',\r\n        'accounts.email',\r\n        'accounts.fullname',\r\n        'accounts.phone',\r\n        'accounts.avatar',\r\n      ])\r\n      .addSelect('r.name', 'role')\r\n      .innerJoin(Roles, 'r', 'r.id = accounts.role_id')\r\n      .where('accounts.keycloak_id = :keycloakId', { keycloakId: keycloakId })\r\n      .andWhere('accounts.disabled_at IS NULL')\r\n      .andWhere('accounts.deleted_at IS NULL')\r\n      .getOneOrFail();\r\n  }\r\n\r\n  findByGoogleId(googleId: string): Promise<Accounts> {\r\n    return this.createQueryBuilder('accounts')\r\n      .where('accounts.googleId = :googleId', { googleId })\r\n      .andWhere('accounts.disabled_at IS NULL')\r\n      .andWhere('accounts.deleted_at IS NULL')\r\n      .getOneOrFail();\r\n  }\r\n\r\n  searchAccount(payload: AccountsPaginationParams) {\r\n    const query = this.createQueryBuilder('account')\r\n      .select('account.id', 'id')\r\n      .addSelect('account.username', 'username')\r\n      .addSelect('account.description', 'description')\r\n      .addSelect('account.fullname', 'fullname')\r\n      .addSelect('account.createdAt', 'createdAt')\r\n      .addSelect('account.updatedAt', 'updatedAt')\r\n      .addSelect('account.email', 'email')\r\n      .addSelect('role.name', 'role')\r\n      .addSelect('a.username', 'createdBy')\r\n      .addSelect('aa.username', 'updatedBy')\r\n      .leftJoin(Accounts, 'a', 'a.id = account.created_by')\r\n      .leftJoin(Accounts, 'aa', 'aa.id = account.updated_by')\r\n      .innerJoin(Roles, 'role', 'role.id = account.role_id')\r\n      .where('LOWER(account.fullname) ILIKE LOWER(:search)', {\r\n        search: `%${payload.search.trim()}%`,\r\n      })\r\n      .andWhere('account.deleted_at IS NULL')\r\n      .andWhere('account.disabled_at IS NULL')\r\n      .orderBy(payload.sort, payload.dir as 'ASC' | 'DESC');\r\n    if (payload.role && payload.role !== '') {\r\n      query.andWhere('role.name = :role', {\r\n        role: payload.role,\r\n      });\r\n    }\r\n    return paginateRaw<Accounts>(query, {\r\n      limit: payload.limit,\r\n      page: payload.page,\r\n    });\r\n  }\r\n\r\n  getAccountsByRoleId(roleId: string) {\r\n    return this.createQueryBuilder(`account`)\r\n      .select('account.id', 'id')\r\n      .addSelect('account.username', 'username')\r\n      .addSelect('account.email', 'email')\r\n      .addSelect('account.phone', 'phone')\r\n      .addSelect('account.fullname', 'fullname')\r\n      .addSelect('account.role_id', 'roleId')\r\n      .addSelect('r.name', 'roleName')\r\n      .innerJoin(Roles, 'r', 'r.id = account.role_id')\r\n      .where(`account.deleted_at IS NULL`)\r\n      .andWhere(`account.disabled_at IS NULL`)\r\n      .andWhere('account.role_id = :role', { role: roleId })\r\n\r\n      .getRawMany<Accounts>();\r\n  }\r\n\r\n  async getSize(): Promise<number> {\r\n    const result = await this.createQueryBuilder(`accounts`)\r\n      .select(`COUNT(id)`, 'size')\r\n      .andWhere('accounts.disabled_at IS NULL')\r\n      .andWhere('accounts.deleted_at IS NULL')\r\n      .getRawOne<{\r\n        size: number;\r\n      }>();\r\n    return result.size;\r\n  }\r\n\r\n  // search(\r\n  //   payload: RepositoryPaginationPayload\r\n  // ): Promise<Pagination<Accounts, IPaginationMeta>> {\r\n  //   const query = this.createQueryBuilder(`accounts`)\r\n  //     .where(`accounts.name LIKE :name`, { name: `%${payload.search}%` })\r\n  //     .orWhere(`accounts.description LIKE :description`, {\r\n  //       description: `%${payload.search}%`,\r\n  //     })\r\n  //     .andWhere('accounts.disabled_at IS NULL')\r\n  //     .andWhere('accounts.deleted_at IS NULL')\r\n  //     .orWhere(`accounts.username = :username`, {\r\n  //       username: `%${payload.search}%`,\r\n  //     })\r\n  //     .orWhere(`accounts.description = :description`, {\r\n  //       description: `%${payload.search}%`,\r\n  //     });\r\n  //   return paginateRaw<Accounts>(query, {\r\n  //     page: payload.page,\r\n  //     limit: payload.limit,\r\n  //   });\r\n  // }\r\n\r\n  findIdByKeycloakId(keycloakId: string): Promise<string> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select('accounts.id', 'id')\r\n      .where('accounts.keycloak_id = :keycloakId', { keycloakId: keycloakId })\r\n      .getRawOne()\r\n      .then((data) => (data ? data['id'] : undefined));\r\n  }\r\n\r\n  findKeycloakIdByAccountId(id: string): Promise<string> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select('accounts.keycloak_id', 'keycloak_id')\r\n      .where('accounts.id = :id', { id: id })\r\n      .getRawOne()\r\n      .then((data) => (data ? data['keycloak_id'] : undefined));\r\n  }\r\n\r\n  async findAvatarURLById(id: string): Promise<string> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select('accounts.avatar', 'avatar')\r\n      .where('accounts.id = :id', { id: id })\r\n      .getRawOne()\r\n      .then((data) => (data ? data['avatar'] : undefined));\r\n  }\r\n\r\n  addAvatarURLById(avatarUrl: string, id: string) {\r\n    return this.createQueryBuilder('accounts')\r\n      .update()\r\n      .set({\r\n        avatar: avatarUrl,\r\n      })\r\n      .where('accounts.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n\r\n  createNewAccount(\r\n    payload: AccountAddRequestPayload,\r\n    userId: string\r\n  ): Promise<Accounts> {\r\n    if (payload.isDisabled) {\r\n      this.createQueryBuilder('a').where((qb) => {\r\n        qb.where(\"booking_request.status = 'PENDING'\").orWhere(\r\n          \"booking_request.status = 'BOOKED'\"\r\n        );\r\n      });\r\n      return this.save(\r\n        {\r\n          username: payload.username,\r\n          fullname: payload.fullname,\r\n          email: payload.email,\r\n          phone: payload.phone,\r\n          roleId: payload.roleId,\r\n          description: payload.description,\r\n          createdBy: userId,\r\n          createdAt: new Date(),\r\n          disabledBy: userId,\r\n          disabledAt: new Date(),\r\n        },\r\n        {\r\n          transaction: true,\r\n        }\r\n      );\r\n    } else {\r\n      return this.save(\r\n        {\r\n          username: payload.username,\r\n          fullname: payload.fullname,\r\n          email: payload.email,\r\n          phone: payload.phone,\r\n          roleId: payload.roleId,\r\n          description: payload.description,\r\n          createdBy: userId,\r\n          createdAt: new Date(),\r\n        },\r\n        {\r\n          transaction: true,\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  updatePartially(\r\n    body: AccountUpdateProfilePayload,\r\n    account: Accounts,\r\n    accountId: string\r\n  ): Promise<Accounts> {\r\n    return this.save(\r\n      {\r\n        ...account,\r\n        fullname: body.fullname,\r\n        email: body.email,\r\n        phone: body.phone,\r\n        description: body.description,\r\n        updatedBy: accountId,\r\n        roleId: body.roleId,\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  updateGoogleIdByEmail(userGoogleId: string, email: string) {\r\n    return this.createQueryBuilder('accounts')\r\n      .update({\r\n        googleId: userGoogleId,\r\n      })\r\n      .where('accounts.email = :email', { email: email })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n\r\n  async disableById(accountId: string, id: string) {\r\n    const isDisabled = await this.createQueryBuilder('accounts')\r\n      .update({\r\n        disabledBy: accountId,\r\n        disabledAt: new Date(),\r\n      })\r\n      .where('accounts.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isDisabled.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  findDisabledAccounts(search: string): Promise<Accounts[]> {\r\n    return this.createQueryBuilder('account')\r\n      .select('account.id', 'id')\r\n      .addSelect('account.username', 'username')\r\n      .addSelect('account.fullname', 'fullname')\r\n      .addSelect('account.description', 'description')\r\n      .addSelect('account.role_id', 'roleId')\r\n      .addSelect('account.email', 'email')\r\n      .addSelect('account.phone', 'phone')\r\n      .addSelect('account.disabledAt', 'disabledAt')\r\n      .addSelect('a.username', 'disabledBy')\r\n      .leftJoin(Accounts, 'a', 'a.id = account.disabled_by')\r\n      .andWhere('account.disabled_at IS NOT NULL')\r\n      .andWhere('account.deleted_at IS NULL')\r\n      .andWhere('account.username ILIKE :name', { name: `%${search.trim()}%` })\r\n\r\n      .getRawMany<Accounts>();\r\n  }\r\n\r\n  async restoreDisabledAccountById(accountId: string, id: string) {\r\n    const isRestored = await this.createQueryBuilder('accounts')\r\n      .update({\r\n        disabledAt: null,\r\n        disabledBy: null,\r\n        updatedBy: accountId,\r\n        updatedAt: new Date(),\r\n      })\r\n      .where('accounts.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isRestored.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  async deleteById(accountId: string, id: string) {\r\n    const isDeleted = await this.createQueryBuilder('accounts')\r\n      .update({\r\n        deletedAt: new Date(),\r\n        deletedBy: accountId,\r\n        disabledAt: null,\r\n        disabledBy: null,\r\n      })\r\n      .where('accounts.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isDeleted.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  findDeletedAccounts(search: string): Promise<Accounts[]> {\r\n    return (\r\n      this.createQueryBuilder('account')\r\n        .select('account.id', 'id')\r\n        .addSelect('account.username', 'username')\r\n        .addSelect('account.fullname', 'fullname')\r\n        .addSelect('account.description', 'description')\r\n        .addSelect('account.role_id', 'roleId')\r\n        .addSelect('account.email', 'email')\r\n        .addSelect('account.phone', 'phone')\r\n        .addSelect('account.deletedAt', 'deletedAt')\r\n        .addSelect('a.username', 'deletedBy')\r\n        .leftJoin(Accounts, 'a', 'a.id = account.deleted_by')\r\n        .andWhere('account.deleted_at IS NOT NULL')\r\n        .andWhere('account.username ILIKE :name', {\r\n          name: `%${search.trim()}%`,\r\n        })\r\n        // .andWhere('account.deleted_at IS NULL')\r\n        .getRawMany<Accounts>()\r\n    );\r\n  }\r\n\r\n  async restoreDeletedAccountById(accountId: string, id: string) {\r\n    const isRestored = await this.createQueryBuilder('accounts')\r\n      .update({\r\n        deletedAt: null,\r\n        deletedBy: null,\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n      })\r\n      .where('accounts.id = :id', { id: id })\r\n      .execute();\r\n    if (isRestored.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  async findById(id: string): Promise<Accounts> {\r\n    return this.createQueryBuilder('account')\r\n      .select('account.id', 'id')\r\n      .addSelect('account.username', 'username')\r\n      .addSelect('account.description', 'description')\r\n      .addSelect('account.fullname', 'fullname')\r\n      .addSelect('account.createdAt', 'createdAt')\r\n      .addSelect('account.updatedAt', 'updatedAt')\r\n      .addSelect('account.role_id', 'roleId')\r\n      .addSelect('account.email', 'email')\r\n      .addSelect('account.phone', 'phone')\r\n      .addSelect('role.name', 'role')\r\n      .addSelect('a.username', 'createdBy')\r\n      .addSelect('aa.username', 'updatedBy')\r\n      .leftJoin(Accounts, 'a', 'a.id = account.created_by')\r\n      .leftJoin(Accounts, 'aa', 'aa.id = account.updated_by')\r\n      .innerJoin(Roles, 'role', 'role.id = account.role_id')\r\n      .where('account.disabled_at IS NULL')\r\n      .andWhere('account.deleted_at IS NULL')\r\n      .andWhere('account.id = :accountId', { accountId: id })\r\n      .getRawOne<Accounts>();\r\n  }\r\n\r\n  findRoleByKeycloakId(keycloakId: string): Promise<string> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select('r.name', 'role')\r\n      .innerJoin(Roles, 'r', 'r.id = accounts.role_id')\r\n      .where('accounts.keycloak_id = :keycloakId', { keycloakId: keycloakId })\r\n      .getRawOne()\r\n      .then((data) => data?.role);\r\n  }\r\n\r\n  async findProfileInformationById(keycloakId: string) {\r\n    return this.createQueryBuilder('a')\r\n      .select([\r\n        'a.id',\r\n        'a.username',\r\n        'a.email',\r\n        'a.description',\r\n        'a.phone',\r\n        'a.created_at',\r\n        'a.updated_at',\r\n        'a.fullname',\r\n        'a.avatar',\r\n      ])\r\n      .addSelect('r.name', 'role')\r\n      .innerJoin(Roles, 'r', 'a.role_id = r.id')\r\n      .where('a.keycloak_id = :keycloakId', { keycloakId })\r\n      .andWhere('a.disabled_at IS NULL')\r\n      .andWhere('a.deleted_at IS NULL')\r\n      .getOneOrFail();\r\n  }\r\n\r\n  async findUsernameById(id: string): Promise<string> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select('accounts.username', 'username')\r\n      .where('accounts.id = :id', { id })\r\n      .getRawOne()\r\n      .then((data) => data['username']);\r\n  }\r\n\r\n  findUsername(): Promise<string[]> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select('accounts.username', 'username')\r\n      .andWhere('accounts.disabled_at IS NULL')\r\n      .andWhere('accounts.deleted_at IS NULL')\r\n      .getRawMany<{ username: string }>()\r\n      .then((data) => data.map((acc) => acc.username));\r\n  }\r\n\r\n  async findRoleNameById(id: string): Promise<string> {\r\n    return this.createQueryBuilder('accounts')\r\n      .select('r.name', 'name')\r\n      .innerJoin(Roles, 'r', 'r.id = accounts.role_id')\r\n      .where('accounts.id = :id', { id: id })\r\n      .getRawOne()\r\n      .then((data) => data['name']);\r\n  }\r\n}\r\n","import { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { Repository } from 'typeorm';\r\nimport { BookingReasonHist } from '../models';\r\nimport { BookingReason } from '../models/booking-reason.entity';\r\n\r\n@CustomRepository(BookingReasonHist)\r\nexport class BookingReasonHistRepository extends Repository<BookingReasonHist> {\r\n  async createNew(payload: BookingReason): Promise<BookingReasonHist> {\r\n    const bookingReasonId = payload.id;\r\n    delete payload.id;\r\n    return this.save(\r\n      {\r\n        bookingReasonId: bookingReasonId,\r\n        ...payload,\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  async deleteAllHist(id: string) {\r\n    return await this.createQueryBuilder('booking_reason_hist')\r\n      .delete()\r\n      .where('booking_reason_hist.booking_reason_id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n}\r\n","import { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { Repository } from 'typeorm';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { paginateRaw, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { BookingReason } from '../models/booking-reason.entity';\r\nimport { Accounts } from '../models';\r\nimport { BadRequestException } from '@nestjs/common';\r\n\r\n@CustomRepository(BookingReason)\r\nexport class BookingReasonRepository extends Repository<BookingReason> {\r\n  existsById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('rt')\r\n      .select('COUNT(1)', 'count')\r\n      .where('rt.id = :id', { id: id })\r\n      .getRawOne()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  async findByPagination(\r\n    payload: PaginationParams\r\n  ): Promise<Pagination<BookingReason>> {\r\n    const query = this.createQueryBuilder('br')\r\n      .select('br.id', 'id')\r\n      .addSelect('br.name', 'name')\r\n      .where('br.deleted_at IS NULL')\r\n      .andWhere('LOWER(br.name) ILIKE :search', {\r\n        search: `%${payload.search}%`,\r\n      })\r\n      .orderBy(payload.sort, payload.dir as 'ASC' | 'DESC');\r\n    return paginateRaw<BookingReason>(query, {\r\n      limit: payload.limit,\r\n      page: payload.page,\r\n    });\r\n  }\r\n\r\n  findBookingReasonName(): Promise<BookingReason[]> {\r\n    return this.createQueryBuilder('dt')\r\n      .select('dt.id', 'id')\r\n      .addSelect('dt.name', 'name')\r\n      .andWhere('dt.deleted_at IS NULL')\r\n      .getRawMany<BookingReason>();\r\n  }\r\n\r\n  async findById(id: string): Promise<BookingReason> {\r\n    return this.createQueryBuilder('br')\r\n      .select('br.id', 'id')\r\n      .addSelect('br.name', 'name')\r\n      .addSelect('br.description', 'description')\r\n      .addSelect('br.created_at', 'createdAt')\r\n      .addSelect('a.username', 'createdBy')\r\n      .addSelect('br.updated_at', 'updatedAt')\r\n      .addSelect('aa.username', 'updatedBy')\r\n      .addSelect('br.deleted_at', 'deletedAt')\r\n      .addSelect('aaa.username', 'deletedBy')\r\n      .leftJoin(Accounts, 'a', 'a.id = br.created_by')\r\n      .leftJoin(Accounts, 'aa', 'aa.id = br.updated_by')\r\n      .leftJoin(Accounts, 'aaa', 'aaa.id = br.deleted_by')\r\n      .where('br.id = :id', { id: id })\r\n      .andWhere('br.deleted_at IS NULL')\r\n      .getRawOne<BookingReason>();\r\n  }\r\n\r\n  async createNew(\r\n    accountId: string,\r\n    payload: BookingReason\r\n  ): Promise<BookingReason> {\r\n    try {\r\n      return await this.save(\r\n        {\r\n          name: payload.name.trim(),\r\n          description: payload.description,\r\n          createdAt: new Date(),\r\n          createdBy: accountId,\r\n        },\r\n        {\r\n          transaction: true,\r\n        }\r\n      );\r\n    } catch (e) {\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async updateById(\r\n    accountId: string,\r\n    payload: BookingReason,\r\n    id: string\r\n  ): Promise<BookingReason> {\r\n    return await this.save(\r\n      {\r\n        id: id,\r\n        name: payload.name,\r\n        description: payload.description,\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  // async get(id: string): Promise<BookingReason> {\r\n  //   return this.createQueryBuilder('booking-reason')\r\n  //     .select('booking-reason.id', 'id')\r\n  //     .addSelect('booking-reason.name', 'name')\r\n  //     .addSelect('booking-reason.description', 'description')\r\n  //     .addSelect('booking-reason.created_by', 'createdBy')\r\n  //     .addSelect('booking-reason.created_at', 'createdAt')\r\n  //     .addSelect('booking-reason.updated_by', 'updatedBy')\r\n  //     .addSelect('booking-reason.updated_at', 'updatedAt')\r\n  //     .addSelect('booking-reason.deleted_by', 'deletedBy')\r\n  //     .addSelect('booking-reason.deleted_at', 'deletedAt')\r\n\r\n  //     .where('booking-reason.id = :id', { id: id })\r\n  //     .getRawOne<BookingReason>();\r\n  // }\r\n\r\n  async deleteById(accountId: string, id: string) {\r\n    const isDeleted = await this.createQueryBuilder('booking_reason')\r\n      .update({\r\n        deletedBy: accountId,\r\n        deletedAt: new Date(),\r\n      })\r\n      .where('booking_reason.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isDeleted.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  findDeletedByPagination(search: string): Promise<BookingReason[]> {\r\n    return this.createQueryBuilder('br')\r\n      .select('br.id', 'id')\r\n      .addSelect('br.name', 'name')\r\n      .addSelect('br.deleted_at', 'deletedAt')\r\n      .addSelect('a.username', 'deletedBy')\r\n      .innerJoin(Accounts, 'a', 'a.id = br.deleted_by')\r\n      .where('br.name ILIKE :search', { search: `%${search.trim()}%` })\r\n      .andWhere('br.deleted_at IS NOT NULL')\r\n      .orderBy('br.deleted_at', 'DESC')\r\n      .getRawMany<BookingReason>();\r\n  }\r\n\r\n  async restoreDeletedById(accountId: string, id: string) {\r\n    const isRestored = await this.createQueryBuilder('booking_reason')\r\n      .update({\r\n        deletedBy: null,\r\n        deletedAt: null,\r\n        updatedBy: accountId,\r\n        updatedAt: new Date(),\r\n      })\r\n      .where('booking_reason.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isRestored.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  async permanentlyDeleteById(id: string) {\r\n    return this.createQueryBuilder('booking_reason')\r\n      .delete()\r\n      .where('booking_reason.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n\r\n  async findAll() {\r\n    return this.createQueryBuilder('booking_reason')\r\n      .select('booking_reason.id', 'id')\r\n      .addSelect('booking_reason.name', 'name')\r\n      .where('booking_reason.deleted_at IS NULL')\r\n      .andWhere('booking_reason.deleted_by IS NULL')\r\n      .getRawMany();\r\n  }\r\n}\r\n","import { Entity } from 'typeorm';\r\nimport { QueryRunner, Repository } from 'typeorm';\r\nimport { BookingRequestDevices, Devices } from '../models';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { BadRequestException } from '@nestjs/common';\r\n\r\n@CustomRepository(BookingRequestDevices)\r\nexport class BookingRoomDevicesRepository extends Repository<BookingRequestDevices> {\r\n  async findByRequestId(id: string): Promise<BookingRequestDevices[]> {\r\n    return this.createQueryBuilder('brd')\r\n      .select('brd.id', 'id')\r\n      .addSelect('brd.booking_request_id', 'bookingRequestId')\r\n      .addSelect('brd.device_id', 'deviceId')\r\n      .addSelect('brd.device_quantity', 'deviceQuantity')\r\n      .addSelect('d.name', 'deviceName')\r\n      .innerJoin(Devices, 'd', 'd.id = brd.device_id')\r\n      .where('brd.booking_request_id = :id', { id: id })\r\n      .getRawMany<BookingRequestDevices>();\r\n  }\r\n\r\n  async addDeviceToRequest(\r\n    bookingRequestId: string,\r\n    deviceId: string,\r\n    quantity: number,\r\n    queryRunner: QueryRunner\r\n  ) {\r\n     return await queryRunner.manager.save(BookingRequestDevices, {\r\n       bookingRequestId: bookingRequestId,\r\n       deviceId: deviceId,\r\n       deviceQuantity: quantity,\r\n     });\r\n  }\r\n}\r\n","import { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { QueryRunner, Repository } from 'typeorm';\r\nimport { BookingRequest, BookingRequestHist } from '../models';\r\n\r\n@CustomRepository(BookingRequestHist)\r\nexport class BookingRequestHistRepository extends Repository<BookingRequestHist> {\r\n  async createNew(payload: BookingRequest, queryRunner: QueryRunner): Promise<BookingRequestHist> {\r\n    const bookingRequestId = payload.id;\r\n    delete payload.id\r\n    return await queryRunner.manager.save(BookingRequestHist, {\r\n      bookingRequestId: bookingRequestId,\r\n      ...payload,\r\n    });\r\n  }\r\n}\r\n\r\n\r\n","import { Entity } from 'typeorm';\r\nimport { DataSource, QueryRunner, Repository, UpdateResult } from 'typeorm';\r\nimport {\r\n  Accounts,\r\n  BookingRequest,\r\n  BookingRequestDevices,\r\n  Rooms,\r\n  RoomType,\r\n} from '../models';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { BookingRoomStatus } from '../enum/booking-room-status.enum';\r\nimport { GetBookingRoomsPaginationPayload } from '../payload/request/get-booking-rooms-pagination.payload';\r\nimport { IPaginationMeta, paginateRaw } from 'nestjs-typeorm-paginate';\r\nimport { Slot } from '../models/slot.entity';\r\nimport { BookingRequestAddRequestPayload } from '../payload/request/booking-request-add.payload';\r\nimport { BookingReason } from '../models/booking-reason.entity';\r\nimport { BadRequestException } from '@nestjs/common';\r\nimport { GetAllBookingRequestsFilter } from '../payload/request/get-all-booking-rooms-filter.payload';\r\nimport dayjs = require('dayjs');\r\n\r\n@CustomRepository(BookingRequest)\r\nexport class BookingRoomRepository extends Repository<BookingRequest> {\r\n  async findByBookingStatus(status: BookingRoomStatus, next5Mins: Date) {\r\n    return this.createQueryBuilder('booking_request')\r\n      .where('booking_request.status = :status', { status: status })\r\n      .andWhere('booking_request.requested_at < :time', { time: next5Mins })\r\n      .getMany();\r\n  }\r\n\r\n  getAllRequest() {\r\n    return this.createQueryBuilder('booking_request')\r\n      .select('booking_request.checkin_Date', 'checkinDate')\r\n      .addSelect('booking_request.id', 'id')\r\n      .addSelect('booking_request.room_id', 'roomId')\r\n      .addSelect('booking_request.status', 'status')\r\n      .where(\r\n        `booking_request.status IN ('BOOKED', 'CHECKED_IN', 'CHECKED_OUT', 'CANCELLED')`\r\n      )\r\n      .getRawMany();\r\n  }\r\n\r\n  getRequest(id: string) {\r\n    return this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('booking_request.checkin_Date', 'checkinDate')\r\n      .addSelect('booking_request.checkin_slot', 'checkinSlotId')\r\n      .addSelect('booking_request.checkout_slot', 'checkoutSlotId')\r\n      .addSelect('booking_request.requested_by', 'requestedBy')\r\n      .addSelect('s.name', 'checkinSlotName')\r\n      .addSelect('ss.name', 'checkoutSlotName')\r\n      .addSelect('booking_request.status', 'status')\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .leftJoin(Slot, 's', 's.id = booking_request.checkin_slot')\r\n      .leftJoin(Slot, 'ss', 'ss.id = booking_request.checkout_slot')\r\n      .where('booking_request.id = :id', { id: id })\r\n      .getRawOne();\r\n  }\r\n\r\n  getCountRequestInWeekOfUser(id: string, date: string) {\r\n    const curr = new Date(date); // get current date\r\n    console.log(date)\r\n    const firstDay = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week\r\n    const lastDay = firstDay + 6; // last day is the first day + 6\r\n    const sunday = new Date(curr.setDate(firstDay));\r\n    const satuday = new Date(curr.setDate(curr.getDate() + lastDay));\r\n    return this.createQueryBuilder('booking_request')\r\n      .select('COUNT(1)', 'count')\r\n      .where('booking_request.requested_by = :id', { id: id })\r\n      .andWhere('booking_request.checkin_date >= :sunday', {\r\n        sunday: sunday,\r\n      })\r\n      .andWhere('booking_request.checkin_date <= :satuday', {\r\n        satuday: satuday,\r\n      })\r\n      .andWhere(`booking_request.status NOT LIKE 'CANCELLED'`)\r\n      .getRawOne()\r\n      .then((data) => data?.count);\r\n  }\r\n\r\n  findByPaginationPayload(\r\n    payload: GetBookingRoomsPaginationPayload,\r\n    accountId\r\n  ) {\r\n    const query = this.createQueryBuilder('booking_request')\r\n      .select('booking_request.checkin_Date', 'checkinDate')\r\n      .addSelect('booking_request.room_id', 'roomId')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('r.description', 'roomDescription')\r\n      .addSelect('booking_request.booking_reason_id', 'reasonType')\r\n      .addSelect('booking_request.status', 'status')\r\n      .addSelect('booking_request.requested_at', 'bookedAt')\r\n      .addSelect('a.username', 'requestedBy')\r\n      .addSelect('booking_request.checkin_date', 'checkinDate')\r\n      .addSelect('booking_request.id', 'id')\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .innerJoin(Accounts, 'a', 'a.id = booking_request.requested_by')\r\n      .where('r.name ILIKE :roomName', {\r\n        roomName: `%${payload.search}%`,\r\n      })\r\n      .andWhere('booking_request.status LIKE :status', {\r\n        status: `%${payload.status}%`,\r\n      })\r\n      .orderBy(payload.sort, payload.dir as 'ASC' | 'DESC');\r\n    if (payload.checkInAt && payload.checkInAt !== '') {\r\n      query.andWhere('booking_request.checkedin_at >= :checkInAt', {\r\n        checkInAt: payload.checkInAt,\r\n      });\r\n    }\r\n    if (payload.checkOutAt && payload.checkOutAt !== '') {\r\n      query.andWhere('booking_request.checkout_at >= :checkOutAt', {\r\n        checkOutAt: payload.checkOutAt,\r\n      });\r\n    }\r\n    if (payload.checkinDate && payload.checkinDate !== '') {\r\n      query.andWhere('booking_request.checkin_date >= :checkinDate', {\r\n        checkinDate: payload.checkinDate,\r\n      });\r\n    }\r\n    if (payload.reasonType && payload.reasonType !== '') {\r\n      query.andWhere('booking_request.booking_reason_id = :reason', {\r\n        reason: payload.reasonType,\r\n      });\r\n    }\r\n    if (accountId) {\r\n      query.andWhere('booking_request.requested_by = :accountId', {\r\n        accountId: accountId,\r\n      });\r\n    }\r\n    return paginateRaw<BookingRequest, IPaginationMeta>(query, {\r\n      page: payload.page,\r\n      limit: payload.limit,\r\n    });\r\n  }\r\n\r\n  getBookingByRoomInWeek(payload: { roomId: string; date: string }) {\r\n    const curr = new Date(payload.date); // get current date\r\n    const firstDay = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week\r\n    const lastDay = firstDay + 6; // last day is the first day + 6\r\n    const sunday = new Date(curr.setDate(firstDay));\r\n    const satuday = new Date(curr.setDate(curr.getDate() + lastDay));\r\n    const query = this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('booking_request.checkin_Date', 'checkinDate')\r\n      .addSelect('booking_request.room_id', 'roomId')\r\n      .addSelect('booking_request.status', 'status')\r\n      .addSelect('booking_request.checkin_slot', 'checkinSlot')\r\n      .addSelect('booking_request.checkout_slot', 'checkoutSlot')\r\n      .addSelect('slot_in.slot_num', 'slotIn')\r\n      .addSelect('slot_out.slot_num', 'slotOut')\r\n      .innerJoin(Slot, 'slot_in', 'slot_in.id = booking_request.checkin_slot')\r\n      .innerJoin(\r\n        Slot,\r\n        'slot_out',\r\n        'slot_out.id = booking_request.checkout_slot'\r\n      )\r\n      .andWhere('booking_request.room_id = :roomId', { roomId: payload.roomId })\r\n      .andWhere(\r\n        \"(booking_request.status = 'PENDING' OR booking_request.status = 'BOOKED')\"\r\n      );\r\n    // .andWhere(\"booking_request.status LIKE 'PENDING'\");\r\n    if (payload.date && payload.date !== '') {\r\n      query.andWhere('booking_request.checkin_date >= :sunday', {\r\n        sunday: sunday,\r\n      });\r\n      query.andWhere('booking_request.checkin_date <= :satuday', {\r\n        satuday: satuday,\r\n      });\r\n    }\r\n    return query.getRawMany<BookingRequest>();\r\n  }\r\n\r\n  getRequestPendingOfRoomInDay(\r\n    roomId: string,\r\n    requestId: string,\r\n    date: string\r\n  ): Promise<\r\n    { id: string; slotIn: number; slotOut: number; status: string }[]\r\n  > {\r\n    const query = this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('slot_in.slot_num', 'slotIn')\r\n      .addSelect('slot_out.slot_num', 'slotOut')\r\n      .addSelect('slot_in.name', 'slotInName')\r\n      .addSelect('slot_out.name', 'slotOutName')\r\n      .addSelect('a.username', 'requestedBy')\r\n      .addSelect('r.name', 'reason')\r\n      .addSelect('booking_request.status', 'status')\r\n      .innerJoin(Slot, 'slot_in', 'slot_in.id = booking_request.checkin_slot')\r\n      .innerJoin(Accounts, 'a', 'a.id = booking_request.requested_by')\r\n      .innerJoin(BookingReason, 'r', 'r.id = booking_request.booking_reason_id')\r\n      .innerJoin(\r\n        Slot,\r\n        'slot_out',\r\n        'slot_out.id = booking_request.checkout_slot'\r\n      )\r\n      .where('booking_request.checkinDate = :checkinDate', {\r\n        checkinDate: date,\r\n      })\r\n      .andWhere('booking_request.room_id = :roomId', {\r\n        roomId: roomId,\r\n      })\r\n      .andWhere('booking_request.id != :id', {\r\n        id: requestId,\r\n      })\r\n      .andWhere(\"(booking_request.status = 'PENDING')\");\r\n    return query.getRawMany<{\r\n      id: string;\r\n      slotIn: number;\r\n      slotOut: number;\r\n      status: string;\r\n    }>();\r\n  }\r\n\r\n  getRequestBookedInDay(date: string): Promise<\r\n    {\r\n      id: string;\r\n      roomId: string;\r\n      roomName: string;\r\n      slotStart: number;\r\n      slotEnd: number;\r\n    }[]\r\n  > {\r\n    return (\r\n      this.createQueryBuilder('booking_request')\r\n        .select('booking_request.id', 'id')\r\n        .addSelect('booking_request.room_id', 'roomId')\r\n        .addSelect('r.name', 'roomName')\r\n        .addSelect('slot_start.slot_num', 'slotStart')\r\n        .addSelect('slot_end.slot_num', 'slotEnd')\r\n        // .addSelect('slot_start.name', 'slotStart')\r\n        // .addSelect('slot_end.name', 'slotEnd')\r\n        .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n        .innerJoin(\r\n          Slot,\r\n          'slot_start',\r\n          'slot_start.id = booking_request.checkin_slot'\r\n        )\r\n        .innerJoin(\r\n          Slot,\r\n          'slot_end',\r\n          'slot_end.id = booking_request.checkout_slot'\r\n        )\r\n        .where('booking_request.checkinDate = :checkinDate', {\r\n          checkinDate: date,\r\n        })\r\n        .andWhere(\"(booking_request.status = 'BOOKED')\")\r\n        .getRawMany<{\r\n          id: string;\r\n          roomId: string;\r\n          roomName: string;\r\n          slotStart: number;\r\n          slotEnd: number;\r\n        }>()\r\n    );\r\n  }\r\n\r\n  getRequestBookedInMultiDay(dateStart: string, dateEnd: string): Promise<\r\n  {\r\n    id: string;\r\n    roomId: string;\r\n    roomName: string;\r\n    slotStart: number;\r\n    slotEnd: number;\r\n  }[]\r\n> {\r\n  return (\r\n    this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('booking_request.room_id', 'roomId')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('slot_start.slot_num', 'slotStart')\r\n      .addSelect('slot_end.slot_num', 'slotEnd')\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .innerJoin(\r\n        Slot,\r\n        'slot_start',\r\n        'slot_start.id = booking_request.checkin_slot'\r\n      )\r\n      .innerJoin(\r\n        Slot,\r\n        'slot_end',\r\n        'slot_end.id = booking_request.checkout_slot'\r\n      )\r\n      .where('booking_request.checkinDate >= :dateStart', {\r\n        dateStart: dateStart,\r\n      })\r\n      .where('booking_request.checkinDate <= :dateEnd', {\r\n        dateEnd: dateEnd,\r\n      })\r\n      .andWhere(\"(booking_request.status = 'BOOKED')\")\r\n      .getRawMany<{\r\n        id: string;\r\n        roomId: string;\r\n        roomName: string;\r\n        slotStart: number;\r\n        slotEnd: number;\r\n      }>()\r\n  );\r\n}\r\n\r\n  getBookingPendingAndBookedInDay(\r\n    date: string,\r\n    roomId: string\r\n  ): Promise<\r\n    {\r\n      id: string;\r\n      slotIn: number;\r\n      slotOut: number;\r\n      status: string;\r\n    }[]\r\n  > {\r\n    const query = this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('slot_in.slot_num', 'slotIn')\r\n      .addSelect('slot_out.slot_num', 'slotOut')\r\n      .addSelect('booking_request.status', 'status')\r\n      .innerJoin(Slot, 'slot_in', 'slot_in.id = booking_request.checkin_slot')\r\n      .innerJoin(\r\n        Slot,\r\n        'slot_out',\r\n        'slot_out.id = booking_request.checkout_slot'\r\n      )\r\n      .where('booking_request.checkinDate = :checkinDate', {\r\n        checkinDate: date,\r\n      })\r\n      .andWhere('booking_request.room_id = :roomId', {\r\n        roomId: roomId,\r\n      })\r\n      .andWhere(\r\n        \"(booking_request.status = 'PENDING' OR booking_request.status = 'BOOKED')\"\r\n      );\r\n    return query.getRawMany<{\r\n      id: string;\r\n      slotIn: number;\r\n      slotOut: number;\r\n      status: string;\r\n    }>();\r\n  }\r\n\r\n  getBookingPendingAndBookedInMultiDay(\r\n    dateStart: string,\r\n    dateEnd: string,\r\n    roomId: string\r\n  ): Promise<\r\n    {\r\n      id: string;\r\n      slotIn: number;\r\n      slotOut: number;\r\n      status: string;\r\n    }[]\r\n  > {\r\n    const query = this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('slot_in.slot_num', 'slotIn')\r\n      .addSelect('slot_out.slot_num', 'slotOut')\r\n      .addSelect('booking_request.status', 'status')\r\n      .innerJoin(Slot, 'slot_in', 'slot_in.id = booking_request.checkin_slot')\r\n      .innerJoin(\r\n        Slot,\r\n        'slot_out',\r\n        'slot_out.id = booking_request.checkout_slot'\r\n      )\r\n      .where('booking_request.checkinDate >= :dateStart', {\r\n        dateStart: dateStart,\r\n      })\r\n      .andWhere('booking_request.checkinDate <= :dateEnd', {\r\n        dateEnd: dateEnd,\r\n      })\r\n      .andWhere('booking_request.room_id = :roomId', {\r\n        roomId: roomId,\r\n      })\r\n      .andWhere(\r\n        \"(booking_request.status = 'PENDING' OR booking_request.status = 'BOOKED')\"\r\n      );\r\n    return query.getRawMany<{\r\n      id: string;\r\n      slotIn: number;\r\n      slotOut: number;\r\n      status: string;\r\n    }>();\r\n  }\r\n\r\n  getRequestBookedInDayOfUser(\r\n    date: string,\r\n    userId: string\r\n  ): Promise<\r\n    {\r\n      id: string;\r\n      roomName: string;\r\n      slotIn: number;\r\n      slotOut: number;\r\n      status: string;\r\n    }[]\r\n  > {\r\n    const query = this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('slot_in.slot_num', 'slotIn')\r\n      .addSelect('slot_out.slot_num', 'slotOut')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('booking_request.status', 'status')\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .innerJoin(Slot, 'slot_in', 'slot_in.id = booking_request.checkin_slot')\r\n      .innerJoin(\r\n        Slot,\r\n        'slot_out',\r\n        'slot_out.id = booking_request.checkout_slot'\r\n      )\r\n      .where('booking_request.checkinDate = :checkinDate', {\r\n        checkinDate: date,\r\n      })\r\n      .andWhere('booking_request.requested_by = :userId', {\r\n        userId: userId,\r\n      })\r\n      .andWhere(\"booking_request.status = 'BOOKED'\");\r\n    return query.getRawMany<{\r\n      id: string;\r\n      roomName: string;\r\n      slotIn: number;\r\n      slotOut: number;\r\n      status: string;\r\n    }>();\r\n  }\r\n\r\n  getTotalRowCount(): Promise<number> {\r\n    return;\r\n  }\r\n\r\n  findByCurrentBookingListAndAccountId(\r\n    accountId: string\r\n  ): Promise<BookingRequest[]> {\r\n    return this.createQueryBuilder('booking_request')\r\n      .select('booking_request.checkin_date', 'checkinDate')\r\n      .addSelect('booking_request.requested_at', 'bookedAt')\r\n      .addSelect('booking_request.status', 'status')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('booking_request.id', 'id')\r\n      .addSelect('booking_request.requested_at', 'requestedAt')\r\n      .addSelect('booking_request.checkedin_at', 'checkinAt')\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .where('booking_request.requested_by = :accountId', {\r\n        accountId: accountId,\r\n      })\r\n      .andWhere(`booking_request.status IN ('BOOKING', 'BOOKED', 'CHECKED_IN')`)\r\n      .getRawMany<BookingRequest>();\r\n  }\r\n\r\n  findByIdAndAccountId(accountId: string, id: string): Promise<BookingRequest> {\r\n    return this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('booking_request.status', 'status')\r\n      .addSelect('booking_request.checkin_Date', 'checkinDate')\r\n      .addSelect('booking_request.booking_reason_id', 'reasonType')\r\n      .addSelect('booking_request.description', 'description')\r\n      .addSelect('booking_request.requested_at', 'requestedAt')\r\n      .addSelect('booking_request.requested_by', 'requestedBy')\r\n      .addSelect('booking_request.updated_at', 'updatedAt')\r\n      .addSelect('booking_request.requested_at', 'bookedAt')\r\n      .addSelect('r.type', 'roomType')\r\n      .addSelect('r.id', 'roomId')\r\n      .addSelect('r.name', 'roomName')\r\n\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .innerJoin(Accounts, 'a', 'a.id = booking_request.requested_by')\r\n      .where('booking_request.requested_by = :accountId', {\r\n        accountId: accountId,\r\n      })\r\n      .andWhere('booking_request.id = :id', { id: id })\r\n      .getRawOne<BookingRequest>();\r\n  }\r\n  getRequestByRoomId(roomId: string) {\r\n    console.log('IDDDDDDDDDDDDDD: ' + roomId);\r\n    const date = new Date();\r\n    const query = this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('slot_in.slot_num', 'slotStartNum')\r\n      .addSelect('slot_out.slot_num', 'slotEndNum')\r\n      .addSelect('slot_in.name', 'checkinSlot')\r\n      .addSelect('slot_out.name', 'checkoutSlot')\r\n      .addSelect('a.username', 'requestedBy')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('booking_request.checkin_date', 'checkinDate')\r\n      .addSelect('br.name', 'reason')\r\n      .addSelect('booking_request.status', 'status')\r\n      .innerJoin(Accounts, 'a', 'a.id = booking_request.requested_by')\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .innerJoin(\r\n        BookingReason,\r\n        'br',\r\n        'br.id = booking_request.booking_reason_id'\r\n      )\r\n      .innerJoin(Slot, 'slot_in', 'slot_in.id = booking_request.checkin_slot')\r\n      .innerJoin(\r\n        Slot,\r\n        'slot_out',\r\n        'slot_out.id = booking_request.checkout_slot'\r\n      )\r\n\r\n      .where('booking_request.checkinDate >= :toDay', {\r\n        toDay: date,\r\n      })\r\n      .andWhere('booking_request.room_id = :roomId', {\r\n        roomId: roomId,\r\n      })\r\n      .andWhere(\"booking_request.status IN ('PENDING', 'BOOKED')\")\r\n      .orderBy('booking_request.checkin_date', 'ASC');\r\n    return query.getRawMany<{\r\n      id: string;\r\n      slotIn: number;\r\n      slotOut: number;\r\n      status: string;\r\n      requestedBy: string;\r\n    }>();\r\n  }\r\n  getRequestBySlotId(slotId: string) {\r\n    const date = new Date();\r\n    const query = this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('slot_in.slot_num', 'slotStartNum')\r\n      .addSelect('slot_out.slot_num', 'slotEndNum')\r\n      .addSelect('slot_in.name', 'checkinSlot')\r\n      .addSelect('slot_out.name', 'checkoutSlot')\r\n      .addSelect('a.username', 'requestedBy')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('booking_request.checkin_date', 'checkinDate')\r\n      .addSelect('br.name', 'reason')\r\n      .addSelect('booking_request.status', 'status')\r\n      .innerJoin(Accounts, 'a', 'a.id = booking_request.requested_by')\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .innerJoin(\r\n        BookingReason,\r\n        'br',\r\n        'br.id = booking_request.booking_reason_id'\r\n      )\r\n      .innerJoin(Slot, 'slot_in', 'slot_in.id = booking_request.checkin_slot')\r\n      .innerJoin(\r\n        Slot,\r\n        'slot_out',\r\n        'slot_out.id = booking_request.checkout_slot'\r\n      )\r\n      .innerJoin(Slot, 'slot_del', 'slot_del.id = :slotId', {\r\n        slotId: slotId,\r\n      })\r\n      .where('booking_request.checkinDate >= :toDay', {\r\n        toDay: date,\r\n      })\r\n      .andWhere('slot_in.slot_num <= slot_del.slot_num')\r\n      .andWhere('slot_out.slot_num >= slot_del.slot_num')\r\n      .andWhere(\"booking_request.status IN ('PENDING', 'BOOKED')\")\r\n      .orderBy('booking_request.checkin_date', 'ASC');\r\n    return query.getRawMany<{\r\n      id: string;\r\n      slotIn: number;\r\n      slotOut: number;\r\n      status: string;\r\n      requestedBy: string;\r\n    }>();\r\n  }\r\n  getRequestByDeviceId(deviceId: string) {\r\n    const date = new Date();\r\n    const query = this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('slot_in.slot_num', 'slotStartNum')\r\n      .addSelect('slot_out.slot_num', 'slotEndNum')\r\n      .addSelect('slot_in.name', 'checkinSlot')\r\n      .addSelect('slot_out.name', 'checkoutSlot')\r\n      .addSelect('a.username', 'requestedBy')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('booking_request.checkin_date', 'checkinDate')\r\n      .addSelect('br.name', 'reason')\r\n      .addSelect('booking_request.status', 'status')\r\n      .innerJoin(Accounts, 'a', 'a.id = booking_request.requested_by')\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .innerJoin(\r\n        BookingRequestDevices,\r\n        'brd',\r\n        'brd.booking_request_id = booking_request.id'\r\n      )\r\n      .innerJoin(\r\n        BookingReason,\r\n        'br',\r\n        'br.id = booking_request.booking_reason_id'\r\n      )\r\n      .innerJoin(Slot, 'slot_in', 'slot_in.id = booking_request.checkin_slot')\r\n      .innerJoin(\r\n        Slot,\r\n        'slot_out',\r\n        'slot_out.id = booking_request.checkout_slot'\r\n      )\r\n\r\n      .where('booking_request.checkinDate >= :toDay', {\r\n        toDay: date,\r\n      })\r\n      .andWhere('brd.device_id = :deviceId', {\r\n        deviceId: deviceId,\r\n      })\r\n      .andWhere(\"booking_request.status IN ('PENDING', 'BOOKED')\")\r\n      .orderBy('booking_request.checkin_date', 'ASC');\r\n    return query.getRawMany<{\r\n      id: string;\r\n      slotIn: number;\r\n      slotOut: number;\r\n      status: string;\r\n      requestedBy: string;\r\n    }>();\r\n  }\r\n  getRequestBookingByAccountId(accountId: string) {\r\n    return this.createQueryBuilder(`booking_request`)\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('a.username', 'requestedBy')\r\n      .addSelect('booking_request.checkin_Date', 'checkinDate')\r\n\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .innerJoin(Accounts, 'a', 'a.id = booking_request.requested_by')\r\n      .where(`booking_request.status = :status`, { status: 'BOOKING' })\r\n      .andWhere('booking_request.requested_by = :account_id', {\r\n        account_id: accountId,\r\n      })\r\n      .orderBy('booking_request.checkin_date', 'ASC')\r\n      .getRawMany<BookingRequest>();\r\n  }\r\n\r\n  existsById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('booking_request')\r\n      .select('COUNT(1)', 'count')\r\n      .where('booking_request.id = :id', { id: id })\r\n      .getRawOne<{ count: number }>()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  isAcceptById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('booking_request')\r\n      .select('COUNT(1)', 'count')\r\n      .where('booking_request.id = :id', { id: id })\r\n      .andWhere(\"booking_request.status = 'BOOKED'\")\r\n      .getRawOne<{ count: number }>()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  isCancelledById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('booking_request')\r\n      .select('COUNT(1)', 'count')\r\n      .where('booking_request.id = :id', { id: id })\r\n      .andWhere(\"booking_request.status = 'CANCELLED'\")\r\n      .getRawOne<{ count: number }>()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  getCountRequestBookingPending() {\r\n    return this.createQueryBuilder('booking_request')\r\n      .select('COUNT(1)', 'count')\r\n      .where(\"booking_request.status = 'PENDING'\")\r\n      .getRawOne<{ count: number }>();\r\n  }\r\n\r\n  async findById(id: string): Promise<BookingRequest> {\r\n    return this.createQueryBuilder('br')\r\n      .select('br.id', 'id')\r\n      .addSelect('r.id', 'roomId')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('r.description', 'roomDescription')\r\n      .addSelect('br.checkin_Date', 'checkinDate')\r\n      .addSelect('br.status', 'status')\r\n      .addSelect('br.booking_reason_id', 'reasonType')\r\n      .addSelect('br.description', 'description')\r\n      .addSelect('br.checkedin_at', 'checkinAt')\r\n      .addSelect('bkr.name', 'reason')\r\n      .addSelect('br.requested_at', 'requestedAt')\r\n      .addSelect('br.requested_by', 'requestedById')\r\n      .addSelect('a.username', 'requestedBy')\r\n      .addSelect('br.updated_at', 'updatedAt')\r\n      .addSelect('aa.username', 'updatedBy')\r\n      .addSelect('br.cancelled_at', 'cancelledAt')\r\n      .addSelect('aaa.username', 'cancelledBy')\r\n      .addSelect('aaaa.username', 'acceptedBy')\r\n      .addSelect('br.cancel_reason', 'cancelReason')\r\n      .addSelect('br.accepted_at', 'acceptedAt')\r\n      .addSelect('bf.username', 'bookedFor')\r\n      .addSelect('s.name', 'checkinSlot')\r\n      .addSelect('ss.name', 'checkoutSlot')\r\n      .addSelect('br.checkin_slot', 'checkinSlotId')\r\n      .addSelect('br.checkout_slot', 'checkoutSlotId')\r\n      .innerJoin(Rooms, 'r', 'r.id = br.room_id')\r\n      .innerJoin(Accounts, 'a', 'a.id = br.requested_by')\r\n      .leftJoin(Accounts, 'aa', 'aa.id = br.updated_by')\r\n      .leftJoin(Accounts, 'aaa', 'aaa.id = br.cancelled_by')\r\n      .leftJoin(Accounts, 'aaaa', 'aaaa.id = br.accepted_by')\r\n      .leftJoin(Accounts, 'bf', 'bf.id = br.booked_for')\r\n      .leftJoin(Slot, 's', 's.id = br.checkin_slot')\r\n      .leftJoin(Slot, 'ss', 'ss.id = br.checkout_slot')\r\n      .innerJoin(BookingReason, 'bkr', 'bkr.id = br.booking_reason_id')\r\n      .where('br.id = :id', { id: id })\r\n      .getRawOne<BookingRequest>();\r\n  }\r\n\r\n  async createNewRequest(\r\n    payload: BookingRequestAddRequestPayload,\r\n    userId: string,\r\n    status: string,\r\n    queryRunner: QueryRunner\r\n  ) {\r\n    return await queryRunner.manager.save(BookingRequest, {\r\n      roomId: payload.roomId,\r\n      requestedBy: userId,\r\n      requestedAt: new Date(),\r\n      status: status,\r\n      bookingReasonId: payload.bookingReasonId,\r\n      description: payload.description,\r\n      checkinSlot: payload.checkinSlot,\r\n      checkoutSlot: payload.checkoutSlot,\r\n      checkinDate: payload.checkinDate,\r\n      bookedFor: payload.bookedFor || userId,\r\n    });\r\n  }\r\n\r\n  async cancelRoomBookingById(\r\n    accountId: string,\r\n    id: string,\r\n    reason: string,\r\n    role: string,\r\n    queryRunner: QueryRunner\r\n  ) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: id,\r\n      },\r\n    });\r\n    if (\r\n      oldData.requestedBy === accountId ||\r\n      role === 'Librarian' ||\r\n      role === 'System Admin'\r\n    ) {\r\n      return await queryRunner.manager.save(BookingRequest, {\r\n        ...oldData,\r\n        status: 'CANCELLED',\r\n        cancelReason: reason,\r\n        updatedBy: accountId,\r\n        updatedAt: new Date(),\r\n        cancelledBy: accountId,\r\n        cancelledAt: new Date(),\r\n      });\r\n    } else {\r\n      throw new BadRequestException(\r\n        \"You are not allowed to cancel someone else's request\"\r\n      );\r\n    }\r\n  }\r\n\r\n  // createNewBooking(payload: BookingRequestAddRequestPayload, userId: string) {\r\n  //   if (!payload.checkoutDate || payload.checkoutDate === payload.checkinDate) {\r\n  //     return this.save(\r\n  //       {\r\n  //         roomId: payload.roomId,\r\n  //         requestedBy: userId,\r\n  //         requestedAt: new Date(),\r\n  //         checkinDate: payload.checkinDate,\r\n  //         checkoutDate: payload.checkoutDate,\r\n  //         checkinSlot: payload.checkinSlot,\r\n  //         checkoutSlot: payload.checkoutSlot,\r\n  //         status: 'BOOKED',\r\n  //         description: payload.description,\r\n  //         bookingReasonId: payload.bookingReasonId,\r\n  //       },\r\n  //       {\r\n  //         transaction: true,\r\n  //       }\r\n  //     );\r\n  //   }\r\n  // }\r\n\r\n  async acceptById(\r\n    accountId: string,\r\n    roomId: string,\r\n    queryRunner: QueryRunner\r\n  ) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: roomId,\r\n      },\r\n    });\r\n    return await queryRunner.manager.save(BookingRequest, {\r\n      ...oldData,\r\n      status: 'BOOKED',\r\n      updatedBy: accountId,\r\n      updatedAt: new Date(),\r\n      acceptedBy: accountId,\r\n      acceptedAt: new Date(),\r\n    });\r\n  }\r\n\r\n  async rejectById(\r\n    accountId: string,\r\n    roomId: string,\r\n    reason: string,\r\n    queryRunner: QueryRunner\r\n  ) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: roomId,\r\n      },\r\n    });\r\n    return await queryRunner.manager.save(BookingRequest, {\r\n      ...oldData,\r\n      status: 'CANCELLED',\r\n      updatedBy: accountId,\r\n      updatedAt: new Date(),\r\n      cancelReason: reason,\r\n      cancelledBy: accountId,\r\n      cancelledAt: new Date(),\r\n    });\r\n  }\r\n\r\n  findBookingRoomRequestsByFilter(\r\n    filters: GetAllBookingRequestsFilter\r\n  ): Promise<BookingRequest[]> {\r\n    const query = this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('rt.name', 'roomType')\r\n      .addSelect('booking_request.checkin_date', 'checkinDate')\r\n      .addSelect('st.slot_num', 'slotStart')\r\n      .addSelect('se.slot_num', 'slotEnd')\r\n      .addSelect('booking_request.status', 'status')\r\n      .addSelect('a.username', 'requestedBy')\r\n      .innerJoin(Accounts, 'a', 'a.id = booking_request.requested_by')\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .innerJoin(RoomType, 'rt', 'rt.id = r.type')\r\n      .innerJoin(Slot, 'st', 'st.id = booking_request.checkin_slot')\r\n      .innerJoin(Slot, 'se', 'se.id = booking_request.checkout_slot')\r\n\r\n      .where('r.name LIKE :name', { name: `%${filters.roomName}%` })\r\n      .andWhere('booking_request.checkin_date >= :dateStart', {\r\n        dateStart: filters.dateStart,\r\n      })\r\n      .andWhere('booking_request.checkin_date <= :dateEnd', {\r\n        dateEnd: filters.dateEnd,\r\n      })\r\n      .andWhere('st.slot_num >= :slotStart', {\r\n        slotStart: filters.slotStart,\r\n      })\r\n      .andWhere('se.slot_num <= :slotEnd', {\r\n        slotEnd: filters.slotEnd,\r\n      });\r\n    if (filters.status) {\r\n      query.andWhere('booking_request.status IN (:...status)', {\r\n        status: JSON.parse(filters.status),\r\n      });\r\n    }\r\n    return query.getRawMany<BookingRequest>();\r\n  }\r\n\r\n  findCurrentCheckoutInformation(accountId: string) {\r\n    return this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('a.username', 'requestedBy')\r\n      .addSelect('booking_request.id', 'description')\r\n      .addSelect('booking_request.checkedin_at', 'checkedInAt')\r\n      .addSelect('booking_request.status', 'status')\r\n      .addSelect('st.slot_num', 'checkinSlot')\r\n      .addSelect('se.slot_num', 'checkoutSlot')\r\n      .addSelect('booking_request.checkin_date', 'checkinDate')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('rt.name', 'roomType')\r\n      .addSelect('booking_request.accepted_by', 'acceptedBy')\r\n      .addSelect('booking_request.accepted_at', 'acceptedAt')\r\n      .addSelect('br.name', 'bookingReason')\r\n      .innerJoin(\r\n        BookingReason,\r\n        'br',\r\n        'br.id = booking_request.booking_reason_id'\r\n      )\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .innerJoin(RoomType, 'rt', 'rt.id = r.type')\r\n      .innerJoin(Accounts, 'a', 'a.id = booking_request.requested_by')\r\n      .innerJoin(Slot, 'st', 'st.id = booking_request.checkin_slot')\r\n      .innerJoin(Slot, 'se', 'se.id = booking_request.checkout_slot')\r\n      .where('booking_request.requested_by = :accountId', {\r\n        accountId: accountId,\r\n      })\r\n      .andWhere('booking_request.status = :status', { status: 'CHECKED_IN' })\r\n      .andWhere('booking_request.checkedout_at IS NULL')\r\n      .andWhere('booking_request.checkedin_at IS NOT NULL')\r\n      .andWhere('booking_request.accepted_by IS NOT NULL')\r\n      .andWhere('booking_request.accepted_at IS NOT NULL')\r\n      .andWhere('booking_request.cancelled_at IS NULL')\r\n      .andWhere('booking_request.cancelled_by IS NULL')\r\n      .getRawOne();\r\n  }\r\n\r\n  checkoutBookingRoom(id: string, accountId: string) {\r\n    return this.createQueryBuilder('booking_request')\r\n      .update({\r\n        status: 'CHECKED_OUT',\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n        checkedoutAt: new Date(),\r\n      })\r\n      .where('booking_request.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n\r\n  findBookingRoomHistory(\r\n    accountId: string,\r\n    filters: GetAllBookingRequestsFilter\r\n  ) {\r\n    const query = this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('rt.name', 'roomType')\r\n      .addSelect('booking_request.requested_at', 'requestedAt')\r\n      .addSelect('booking_request.requested_by', 'requestedBy')\r\n      .addSelect('booking_request.status', 'status')\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .innerJoin(RoomType, 'rt', 'r.type = rt.id')\r\n      .innerJoin(Slot, 'st', 'st.id = booking_request.checkin_slot')\r\n      .innerJoin(Slot, 'se', 'se.id = booking_request.checkout_slot')\r\n      .where('booking_request.requested_by = :accountId', {\r\n        accountId: accountId,\r\n      })\r\n      .andWhere('r.name LIKE :name', { name: `%${filters.roomName}%` })\r\n      .andWhere('booking_request.checkin_date >= :dateStart', {\r\n        dateStart: filters.dateStart,\r\n      })\r\n      .andWhere('booking_request.checkin_date <= :dateEnd', {\r\n        dateEnd: filters.dateEnd,\r\n      })\r\n      .andWhere('st.slot_num >= :slotStart', {\r\n        slotStart: filters.slotStart,\r\n      })\r\n      .andWhere('se.slot_num <= :slotEnd', {\r\n        slotEnd: filters.slotEnd,\r\n      });\r\n    if (filters.status) {\r\n      query.andWhere('booking_request.status IN (:...status)', {\r\n        status: JSON.parse(filters.status),\r\n      });\r\n    }\r\n    return query.getRawMany();\r\n  }\r\n\r\n  findCurrentCheckinInformation(accountId: string) {\r\n    return this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('booking_request.room_id', 'roomId')\r\n      .addSelect('a.username', 'requestedBy')\r\n      .addSelect('booking_request.requested_at', 'requestedAt')\r\n      .addSelect('booking_request.description', 'description')\r\n      .addSelect('br.name', 'bookingReason')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('booking_request.checkin_date', 'checkinDate')\r\n      .addSelect('st.slot_num', 'checkinSlot')\r\n      .addSelect('se.slot_num', 'checkoutSlot')\r\n      .addSelect('booking_request.accepted_at', 'acceptedAt')\r\n      .innerJoin(Slot, 'st', 'st.id = booking_request.checkin_slot')\r\n      .innerJoin(Slot, 'se', 'se.id = booking_request.checkout_slot')\r\n      .innerJoin(Accounts, 'a', 'a.id = booking_request.requested_by')\r\n      .innerJoin(Rooms, 'r', 'booking_request.room_id = r.id')\r\n      .innerJoin(\r\n        BookingReason,\r\n        'br',\r\n        'br.id = booking_request.booking_reason_id'\r\n      )\r\n      .where('booking_request.requested_by = :requestedBy', {\r\n        requestedBy: accountId,\r\n      })\r\n      .andWhere('booking_request.status = :status', { status: 'BOOKED' })\r\n      .andWhere('booking_request.cancelled_by IS NULL')\r\n      .andWhere('booking_request.cancelled_at IS NULL')\r\n      .andWhere('booking_request.checkedin_at IS NULL')\r\n      .andWhere('booking_request.checkedout_at IS NULL')\r\n      .orderBy('booking_request.accepted_at', 'DESC')\r\n      .limit(1)\r\n      .getRawOne();\r\n  }\r\n\r\n  attemptCheckinBookingRoom(\r\n    accountId: string,\r\n    bookingRequestId: string,\r\n    signature: string\r\n  ) {\r\n    return this.createQueryBuilder('booking_request')\r\n      .update({\r\n        signatureCheckin: signature,\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n      })\r\n      .where('booking_request.id = :id', { id: bookingRequestId })\r\n      .andWhere('booking_request.status = :status', { status: 'BOOKED' })\r\n      .andWhere('booking_request.checkedout_at IS NULL')\r\n      .andWhere('booking_request.checkedin_at IS NULL')\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n\r\n  async attemptCheckoutBookingRoom(\r\n    accountId: string,\r\n    bookingRequestId: string,\r\n    signature: string\r\n  ) {\r\n    return this.createQueryBuilder('booking_request')\r\n      .update({\r\n        signatureCheckout: signature,\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n      })\r\n      .where('booking_request.id = :id', { id: bookingRequestId })\r\n      .andWhere('booking_request.status = :status', { status: 'CHECKED_IN' })\r\n      .andWhere('booking_request.checkedout_at IS NULL')\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n\r\n  async acceptCheckinById(accountId: string, id: string) {\r\n    return this.createQueryBuilder('booking_request')\r\n      .update({\r\n        updatedBy: accountId,\r\n        updatedAt: new Date(),\r\n        checkedinAt: new Date(),\r\n        status: 'CHECKED_IN',\r\n      })\r\n      .where('booking_request.id = :id', { id: id })\r\n      .andWhere('booking_request.status = :status', { status: 'BOOKED' })\r\n      .andWhere('booking_request.checkedin_at IS NULL')\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n\r\n  async rejectCheckinById(accountId: string, id: string) {\r\n    return this.createQueryBuilder('booking_request')\r\n      .update({\r\n        updatedBy: accountId,\r\n        updatedAt: new Date(),\r\n        checkedoutAt: new Date(),\r\n        status: 'CHECKED_OUT',\r\n      })\r\n      .where('booking_request.id = :id', { id: id })\r\n      .andWhere('booking_request.status = :status', { status: 'CHECKED_IN' })\r\n      .andWhere('booking_request.checkedout_at IS NULL')\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n\r\n  async acceptCheckoutById(accountId: string, id: string) {\r\n    return this.createQueryBuilder('booking_request')\r\n      .update({\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n        status: 'CHECKED_OUT',\r\n        checkedoutAt: new Date(),\r\n      })\r\n      .where('booking_request.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n\r\n  async rejectCheckoutById(accountId: string, id: string) {\r\n    return this.createQueryBuilder('booking_request')\r\n      .update({\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n        status: 'CANCELLED',\r\n        checkedoutAt: new Date(),\r\n      })\r\n      .where('booking_request.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n\r\n  async findBookingRequestsByFilterAndRequestedBy(\r\n    filters: GetAllBookingRequestsFilter,\r\n    accountId: string\r\n  ) {\r\n    const query = this.createQueryBuilder('booking_request')\r\n      .select('booking_request.id', 'id')\r\n      .addSelect('r.name', 'roomName')\r\n      .addSelect('rt.name', 'roomType')\r\n      .addSelect('booking_request.checkin_date', 'checkinDate')\r\n      .addSelect('st.slot_num', 'slotStart')\r\n      .addSelect('se.slot_num', 'slotEnd')\r\n      .addSelect('booking_request.status', 'status')\r\n      .addSelect('a.username', 'requestedBy')\r\n      .innerJoin(Accounts, 'a', 'a.id = booking_request.requested_by')\r\n      .innerJoin(Rooms, 'r', 'r.id = booking_request.room_id')\r\n      .innerJoin(RoomType, 'rt', 'rt.id = r.type')\r\n      .innerJoin(Slot, 'st', 'st.id = booking_request.checkin_slot')\r\n      .innerJoin(Slot, 'se', 'se.id = booking_request.checkout_slot')\r\n\r\n      .where('r.name LIKE :name', { name: `%${filters.roomName}%` })\r\n      .andWhere('a.id = :accountId', { accountId: accountId })\r\n      .andWhere('booking_request.checkin_date >= :dateStart', {\r\n        dateStart: filters.dateStart,\r\n      })\r\n      .andWhere('booking_request.checkin_date <= :dateEnd', {\r\n        dateEnd: filters.dateEnd,\r\n      })\r\n      .andWhere('st.slot_num >= :slotStart', {\r\n        slotStart: filters.slotStart,\r\n      })\r\n      .andWhere('se.slot_num <= :slotEnd', {\r\n        slotEnd: filters.slotEnd,\r\n      });\r\n    if (filters.status) {\r\n      query.andWhere('booking_request.status IN (:...status)', {\r\n        status: JSON.parse(filters.status),\r\n      });\r\n    }\r\n    return query.getRawMany<BookingRequest>();\r\n  }\r\n}\r\n","import { Repository } from 'typeorm';\r\n\r\nexport class BookingRoomFeedbackRepository extends Repository<any> {}\r\n","import { Repository } from \"typeorm\";\r\nimport { Devices, DeviceHist } from \"../models\";\r\nimport { CustomRepository } from \"../decorators/typeorm-ex.decorator\";\r\n\r\n@CustomRepository(DeviceHist)\r\nexport class DeviceHistRepository extends Repository<DeviceHist> {\r\n  async createNew(payload: Devices): Promise<DeviceHist> {\r\n    const deviceId = payload.id;\r\n    delete payload.id\r\n    return this.save({\r\n      deviceId: deviceId,\r\n      type: payload.type,\r\n      ...payload,\r\n    });\r\n  }\r\n}\r\n","import { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { Repository } from 'typeorm';\r\nimport { DeviceType, DeviceTypeHist } from '../models';\r\n\r\n@CustomRepository(DeviceTypeHist)\r\nexport class DeviceTypeHistRepository extends Repository<any> {\r\n  async createNew(payload: DeviceType): Promise<DeviceTypeHist> {\r\n    const deviceTypeId = payload.id;\r\n    delete payload.id;\r\n    const data = await this.save({\r\n      deviceTypeId: deviceTypeId,\r\n      ...payload,\r\n    });\r\n    return data;\r\n  }\r\n\r\n  async deleteAllHist(id: string) {\r\n    return await this.createQueryBuilder('device_type_hist')\r\n      .delete()\r\n      .where('device_type_hist.device_type_id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n}\r\n","import { Repository } from 'typeorm';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { DeviceType } from '../models/device-type.entity';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { paginateRaw, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Accounts } from '../models';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\n\r\n@CustomRepository(DeviceType)\r\nexport class DeviceTypeRepository extends Repository<DeviceType> {\r\n  existsById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('rt')\r\n      .select('COUNT(1)', 'count')\r\n      .where('rt.id = :id', { id: id })\r\n      .getRawOne()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  findByPagination(\r\n    pagination: PaginationParams\r\n  ): Promise<Pagination<DeviceType>> {\r\n    const query = this.createQueryBuilder('dt')\r\n      .select('dt.id', 'id')\r\n      .addSelect('dt.name', 'name')\r\n      .where('dt.deleted_at IS NULL')\r\n      .andWhere('LOWER(dt.name) LIKE LOWER(:search)', {\r\n        search: `%${pagination.search.trim()}%`,\r\n      })\r\n      .orderBy(pagination.sort, pagination.dir as 'ASC' | 'DESC');\r\n\r\n    return paginateRaw<DeviceType>(query, {\r\n      page: pagination.page,\r\n      limit: pagination.limit,\r\n    });\r\n  }\r\n\r\n  findDeviceTypeName(): Promise<DeviceType[]> {\r\n    return this.createQueryBuilder('dt')\r\n      .select('dt.id', 'id')\r\n      .addSelect('dt.name', 'name')\r\n      .andWhere('dt.deleted_at IS NULL')\r\n      .getRawMany<DeviceType>();\r\n  }\r\n\r\n  async findById(id: string): Promise<DeviceType> {\r\n    return this.createQueryBuilder('dt')\r\n      .select('dt.id', 'id')\r\n      .addSelect('dt.name', 'name')\r\n      .addSelect('dt.description', 'description')\r\n      .addSelect('a.username', 'createdBy')\r\n      .addSelect('dt.created_at', 'createdAt')\r\n      .addSelect('aa.username', 'updatedBy')\r\n      .addSelect('dt.updated_at', 'updatedAt')\r\n      .innerJoin(Accounts, 'a', 'a.id = dt.created_by')\r\n      .leftJoin(Accounts, 'aa', 'aa.id = dt.updated_by')\r\n      .where('dt.id = :id', { id: id })\r\n      .andWhere('dt.deleted_at IS NULL')\r\n      .getRawOne<DeviceType>();\r\n  }\r\n\r\n  async addNew(\r\n    accountId: string,\r\n    payload: { name: string; description: string }\r\n  ): Promise<DeviceType> {\r\n    return this.save<DeviceType>(\r\n      {\r\n        name: payload.name.trim(),\r\n        description: payload.description,\r\n        createdBy: accountId,\r\n        createdAt: new Date(),\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  async updateById(\r\n    accountId: string,\r\n    deviceTypeId: string,\r\n    payload: MasterDataAddRequestPayload\r\n  ) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: deviceTypeId,\r\n      }\r\n    })\r\n    return this.save(\r\n      {\r\n        ...oldData,\r\n        id: deviceTypeId,\r\n        name: payload.name.trim(),\r\n        description: payload.description,\r\n        updatedBy: accountId,\r\n        updatedAt: new Date(),\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  async deleteById(accountId: string, id: string) {\r\n    const isDeleted = await this.createQueryBuilder('device_type')\r\n      .update({\r\n        deletedAt: new Date(),\r\n        deletedBy: accountId,\r\n      })\r\n      .where('device_type.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isDeleted.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  findDeletedByPagination(search: string): Promise<DeviceType[]> {\r\n    return this.createQueryBuilder('device_type')\r\n      .select('device_type.id', 'id')\r\n      .addSelect('device_type.name', 'name')\r\n      .addSelect('device_type.deleted_at', 'deletedAt')\r\n      .addSelect('a.username', 'deletedBy')\r\n      .innerJoin(Accounts, 'a', 'a.id = device_type.deleted_by')\r\n      .where('device_type.name ILIKE :search', { search: `%${search.trim()}%` })\r\n      .andWhere('device_type.deleted_at IS NOT NULL')\r\n      .orderBy('device_type.deleted_at', 'DESC')\r\n      .getRawMany<DeviceType>();\r\n  }\r\n\r\n  async restoreDeletedById(accountId: string, id: string) {\r\n    const isRestored = await this.createQueryBuilder('device_type')\r\n      .update({\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n        deletedAt: null,\r\n        deletedBy: null,\r\n      })\r\n      .where('device_type.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isRestored.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  async permanentlyDeleteById(id: string) {\r\n    return this.createQueryBuilder('device_type')\r\n      .delete()\r\n      .where('device_type.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n\r\n  // async deleteByIdAndAccountId(\r\n  //   accountId: string,\r\n  //   id: string\r\n  // ): Promise<UpdateResult> {\r\n  //   return this.createQueryBuilder('rt')\r\n  //     .update({\r\n  //       deletedAt: new Date(),\r\n  //       deletedBy: accountId,\r\n  //     })\r\n  //     .where('rt.id = :id', { id: id })\r\n  //     .useTransaction(true)\r\n  //     .execute();\r\n  // }\r\n\r\n  // restoreDisabledById(accountId: string, id: string) {\r\n  //   return this.createQueryBuilder('rt')\r\n  //     .update({\r\n  //       updatedAt: new Date(),\r\n  //       updatedBy: accountId,\r\n  //     })\r\n  //     .where('rt.id = :id', { id: id })\r\n  //     .useTransaction(true)\r\n  //     .execute();\r\n  // }\r\n\r\n    // async get(id: string): Promise<DeviceType> {\r\n  //   return this.createQueryBuilder('dt')\r\n  //     .select('dt.id', 'id')\r\n  //     .addSelect('dt.name', 'name')\r\n  //     .addSelect('dt.description', 'description')\r\n  //     .addSelect('dt.created_by', 'createdBy')\r\n  //     .addSelect('dt.created_at', 'createdAt')\r\n  //     .addSelect('dt.updated_by', 'updatedBy')\r\n  //     .addSelect('dt.updated_at', 'updatedAt')\r\n  //     .addSelect('dt.deleted_by', 'deletedBy')\r\n  //     .addSelect('dt.deleted_at', 'deletedAt')\r\n\r\n  //     .where('dt.id = :id', { id: id })\r\n  //     .getRawOne<DeviceType>();\r\n  // }\r\n}\r\n","import { FindOneOptions, Repository, UpdateResult } from 'typeorm';\r\nimport { Accounts, Devices, Rooms, RoomType } from '../models';\r\nimport { RepositoryPaginationPayload } from '../models/search-pagination.payload';\r\nimport { AddDeviceRequest, UpdateDeviceRequest } from '@app/models';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport {\r\n  IPaginationMeta,\r\n  paginateRaw,\r\n  Pagination,\r\n} from 'nestjs-typeorm-paginate';\r\nimport { DeviceType } from '../models/device-type.entity';\r\nimport { DevicesPaginationParams } from '../controllers/devices-pagination.model';\r\nimport { DataAddRequestPayload } from '../payload/request/data-add.request.payload';\r\n\r\n@CustomRepository(Devices)\r\nexport class DevicesRepository extends Repository<Devices> {\r\n  async existsById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('devices')\r\n      .select('COUNT(1)', 'count')\r\n      .where('devices.id = :id', { id: id })\r\n      .getRawOne()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  async getSize(): Promise<number> {\r\n    const result = await this.createQueryBuilder(`devices`)\r\n      .select(`COUNT(id) as size`)\r\n      .where(`devices.disabled_at IS NULL`)\r\n      .andWhere(`devices.deleted_at IS NULL`)\r\n      .getRawOne<{\r\n        size: number;\r\n      }>();\r\n    return result.size;\r\n  }\r\n\r\n  async isExistedByName(name: string): Promise<boolean> {\r\n    return this.createQueryBuilder('devices')\r\n      .select('COUNT(devices.name)')\r\n      .where('devices.name = :name', { name })\r\n      .getRawOne()\r\n      .then((data) => data['count'] > 0);\r\n  }\r\n\r\n  searchDevices(payload: DevicesPaginationParams) {\r\n    const query = this.createQueryBuilder('d')\r\n      .select('d.id', 'id')\r\n      .addSelect('d.name', 'name')\r\n      .addSelect('d.description', 'description')\r\n      .addSelect('d.createdAt', 'createdAt')\r\n      .addSelect('d.updatedAt', 'updatedAt')\r\n      .addSelect('dt.name', 'type')\r\n      .innerJoin(DeviceType, 'dt', 'dt.id = d.type')\r\n      .where('LOWER(d.name) ILIKE LOWER(:search)', {\r\n        search: `%${payload.search.trim()}%`,\r\n      })\r\n      .andWhere(`d.deleted_at IS NULL`)\r\n      .andWhere(`d.disabled_at IS NULL`)\r\n      .orderBy(payload.sort, payload.dir as 'ASC' | 'DESC');\r\n    if (payload.deviceType && payload.deviceType !== '') {\r\n      query.andWhere('dt.name = :deviceTypeName', {\r\n        deviceTypeName: payload.deviceType,\r\n      });\r\n    }\r\n    return paginateRaw<Devices>(query, {\r\n      limit: payload.limit,\r\n      page: payload.page,\r\n    });\r\n  }\r\n\r\n  findDeviceName(): Promise<DeviceType[]> {\r\n    return this.createQueryBuilder('device')\r\n      .select('device.id', 'id')\r\n      .addSelect('device.name', 'name')\r\n      .andWhere('device.deleted_at IS NULL')\r\n      .orderBy('device.name', 'ASC')\r\n      .getRawMany<DeviceType>();\r\n  }\r\n\r\n  getDevicesByDeviceType(deviceTypeId: string) {\r\n    return this.createQueryBuilder(`device`)\r\n      .select('device.id', 'id')\r\n      .addSelect('device.name', 'name')\r\n      .addSelect('device.type', 'type')\r\n      .addSelect('dt.name', 'deviceTypeName')\r\n      .innerJoin(DeviceType, 'dt', 'dt.id = device.type')\r\n      .where(`device.deleted_at IS NULL`)\r\n      .andWhere(`device.disabled_at IS NULL`)\r\n      .andWhere('device.type = :type', { type: deviceTypeId })\r\n\r\n      .getRawMany<Devices>();\r\n  }\r\n\r\n  async findById(id: string): Promise<Devices> {\r\n    return this.createQueryBuilder('devices')\r\n      .select('devices.id', 'id')\r\n      .addSelect('devices.name', 'name')\r\n      .addSelect('devices.description', 'description')\r\n      .addSelect('devices.created_at', 'createdAt')\r\n      .addSelect('devices.updated_at', 'updatedAt')\r\n      .addSelect('devices.disabled_at', 'disableAt')\r\n      .addSelect('devices.deleted_at', 'deletedAt')\r\n      .addSelect('devices.disabled_by', 'disabledBy')\r\n      .addSelect('devices.deleted_by', 'deletedBy')\r\n      .addSelect('devices.type', 'deviceTypeId')\r\n      .addSelect('dt.name', 'deviceTypeName')\r\n      .addSelect('a.username', 'createdBy')\r\n      .addSelect('aa.username', 'updatedBy')\r\n      .innerJoin(Accounts, 'a', 'devices.created_by = a.id')\r\n      .leftJoin(Accounts, 'aa', 'devices.updated_by = aa.id')\r\n      .innerJoin(DeviceType, 'dt', 'dt.id = devices.type')\r\n      .where('devices.disabled_at IS NULL')\r\n      .andWhere('devices.deleted_at IS NULL')\r\n      .andWhere('devices.id = :deviceId', { deviceId: id })\r\n      .getRawOne<Devices>();\r\n  }\r\n\r\n  createNewDevice(payload: AddDeviceRequest, userId: string): Promise<Devices> {\r\n    return this.save(\r\n      {\r\n        name: payload.name.trim(),\r\n        description: payload.description,\r\n        type: payload.type,\r\n        createdBy: userId,\r\n        createdAt: new Date(),\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  async updateById(\r\n    accountId: string,\r\n    deviceId: string,\r\n    payload: DataAddRequestPayload\r\n  ) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: deviceId,\r\n      },\r\n    });\r\n    return this.save(\r\n      {\r\n        ...oldData,\r\n        id: deviceId,\r\n        name: payload.name.trim(),\r\n        description: payload.description,\r\n        type: payload.type,\r\n        updatedBy: accountId,\r\n        updatedAt: new Date(),\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  async checkIfDeviceIsDeletedById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('devices')\r\n      .select('devices.deleted_at')\r\n      .where('devices.id = :id', { id: id })\r\n      .getRawOne<boolean>()\r\n      .then((data) => (data ? data['deleted_at'] : true));\r\n  }\r\n\r\n  async checkIfDeviceIsDisabledById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('devices')\r\n      .select('devices.disabled_at')\r\n      .where('devices.id = :id', { id: id })\r\n      .getRawOne<boolean>()\r\n      .then((data) => (data ? data['disabled_at'] : true));\r\n  }\r\n\r\n  async disableById(accountId: string, id: string) {\r\n    const isDisabled = await this.createQueryBuilder('devices')\r\n      .update({\r\n        disabledBy: accountId,\r\n        disabledAt: new Date(),\r\n      })\r\n      .where('devices.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isDisabled.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  getDisabledDevices(search: string) {\r\n    return this.createQueryBuilder('devices')\r\n      .select('devices.id', 'id')\r\n      .addSelect('devices.name', 'name')\r\n      .addSelect('devices.disabled_at', 'disabledAt')\r\n      .addSelect('a.username', 'disabledBy')\r\n      .addSelect('dt.name', 'roomTypeName')\r\n      .innerJoin(Accounts, 'a', 'devices.disabled_by = a.id')\r\n      .innerJoin(DeviceType, 'dt', 'devices.type = dt.id')\r\n      .where(`devices.deleted_at IS NULL`)\r\n      .andWhere(`devices.disabled_at IS NOT NULL`)\r\n      .andWhere('devices.name ILIKE :search', { search: `%${search.trim()}%` })\r\n      .getRawMany<Rooms>();\r\n  }\r\n\r\n  async restoreDisabledDeviceById(accountId: string, id: string) {\r\n    const isRestored = await this.createQueryBuilder('devices')\r\n      .update({\r\n        disabledAt: null,\r\n        disabledBy: null,\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n      })\r\n      .where('devices.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isRestored.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  async deleteById(accountId: string, id: string) {\r\n    const isDeleted = await this.createQueryBuilder('devices')\r\n      .update({\r\n        deletedAt: new Date(),\r\n        deletedBy: accountId,\r\n        disabledAt: null,\r\n        disabledBy: null,\r\n      })\r\n      .where('devices.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isDeleted.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  getDeletedDevices(search: string) {\r\n    return this.createQueryBuilder(`devices`)\r\n      .select('devices.id', 'id')\r\n      .addSelect('devices.name', 'name')\r\n      .addSelect('devices.deleted_at', 'deletedAt')\r\n      .addSelect('a.username', 'deletedBy')\r\n      .addSelect('dt.name', 'deviceTypeName')\r\n      .innerJoin(Accounts, 'a', 'devices.deleted_by = a.id')\r\n      .innerJoin(DeviceType, 'dt', 'dt.id = devices.type')\r\n      .where(`devices.deleted_at IS NOT NULL`)\r\n      .andWhere(`devices.disabled_at IS NULL`)\r\n      .andWhere('devices.name ILIKE :name', { name: `%${search.trim()}%` })\r\n      .getRawMany<Devices>();\r\n  }\r\n\r\n  async restoreDeletedDeviceById(id: string) {\r\n    const isRestored = await this.createQueryBuilder('devices')\r\n      .update({\r\n        deletedBy: null,\r\n        deletedAt: null,\r\n      })\r\n      .where('devices.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isRestored.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  // findDeviceListByBookingRoomRequest(name: string, type: string, sort: string) {\r\n  //   return this.createQueryBuilder('devices')\r\n  //     .select(['devices.id', 'devices.name'])\r\n  //     .where('devices.disabled_at IS NULL')\r\n  //     .andWhere('devices.deleted_at IS NULL')\r\n  //     .andWhere('devices.name LIKE :name', { name: `%${name}%` })\r\n  //     .orderBy('devices.name', sort as 'ASC' | 'DESC')\r\n  //     .getMany();\r\n  // }\r\n}\r\n","import { Repository } from 'typeorm';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { Feedback } from '../models';\r\nimport { FeedbackHist } from '../models/feedback-hist.entity';\r\n\r\n@CustomRepository(FeedbackHist)\r\nexport class FeedbackHistRepository extends Repository<FeedbackHist> {\r\n  async createNew(payload: Feedback): Promise<FeedbackHist> {\r\n    const feedbackId = payload.id;\r\n    delete payload.id;\r\n    const data = await this.save({\r\n      feedbackId: feedbackId,\r\n      ...payload,\r\n    });\r\n    return data;\r\n  }\r\n}\r\n","import { paginateRaw, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Repository } from 'typeorm';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { Accounts } from '../models';\r\nimport { FeedbackType } from '../models/feedback-type.entity';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\n\r\n@CustomRepository(FeedbackType)\r\nexport class FeedbackTypeRepository extends Repository<FeedbackType> {\r\n    existsById(id: string): Promise<boolean> {\r\n        return this.createQueryBuilder('ft')\r\n          .select('COUNT(1)', 'count')\r\n          .where('ft.id = :id', { id: id })\r\n          .getRawOne()\r\n          .then((data) => data?.count > 0);\r\n      }\r\n    \r\n      findByPagination(\r\n        pagination: PaginationParams\r\n      ): Promise<Pagination<FeedbackType>> {\r\n        const query = this.createQueryBuilder('ft')\r\n          .select('ft.id', 'id')\r\n          .addSelect('ft.name', 'name')\r\n          .where('ft.deleted_at IS NULL')\r\n          .andWhere('ft.name ILIKE :search', {\r\n            search: `%${pagination.search.trim()}%`,\r\n          })\r\n          .orderBy(pagination.sort, pagination.dir as 'ASC' | 'DESC');\r\n    \r\n        return paginateRaw<FeedbackType>(query, {\r\n          page: pagination.page,\r\n          limit: pagination.limit,\r\n        });\r\n      }\r\n    \r\n      findFeedbackTypeName(): Promise<FeedbackType[]> {\r\n        return this.createQueryBuilder('ft')\r\n          .select('ft.id', 'id')\r\n          .addSelect('ft.name', 'name')\r\n          .andWhere('ft.deleted_at IS NULL')\r\n          .getRawMany<FeedbackType>();\r\n      }\r\n    \r\n      async findById(id: string): Promise<FeedbackType> {\r\n        return this.createQueryBuilder('ft')\r\n          .select('ft.id', 'id')\r\n          .addSelect('ft.name', 'name')\r\n          .addSelect('ft.description', 'description')\r\n          .addSelect('a.username', 'createdBy')\r\n          .addSelect('ft.created_at', 'createdAt')\r\n          .addSelect('aa.username', 'updatedBy')\r\n          .addSelect('ft.updated_at', 'updatedAt')\r\n          .innerJoin(Accounts, 'a', 'a.id = ft.created_by')\r\n          .leftJoin(Accounts, 'aa', 'aa.id = ft.updated_by')\r\n          .where('ft.id = :id', { id: id })\r\n          .andWhere('ft.deleted_at IS NULL')\r\n          .getRawOne<FeedbackType>();\r\n      }\r\n    \r\n      async addNew(\r\n        accountId: string,\r\n        payload: { name: string; description: string }\r\n      ): Promise<FeedbackType> {\r\n        return this.save<FeedbackType>(\r\n          {\r\n            name: payload.name.trim(),\r\n            description: payload.description,\r\n            createdBy: accountId,\r\n            createdAt: new Date(),\r\n          },\r\n          {\r\n            transaction: true,\r\n          }\r\n        );\r\n      }\r\n    \r\n      async updateById(\r\n        accountId: string,\r\n        feedbackTypeId: string,\r\n        payload: MasterDataAddRequestPayload\r\n      ) {\r\n        const oldData = await this.findOneOrFail({\r\n          where: {\r\n            id: feedbackTypeId,\r\n          }\r\n        })\r\n        return this.save(\r\n          {\r\n            ...oldData,\r\n            id: feedbackTypeId,\r\n            name: payload.name.trim(),\r\n            description: payload.description,\r\n            updatedBy: accountId,\r\n            updatedAt: new Date(),\r\n          },\r\n          {\r\n            transaction: true,\r\n          }\r\n        );\r\n      }\r\n    \r\n      async deleteById(accountId: string, id: string) {\r\n        const isDeleted = await this.createQueryBuilder('ft')\r\n          .update({\r\n            deletedAt: new Date(),\r\n            deletedBy: accountId,\r\n          })\r\n          .where('ft.id = :id', { id: id })\r\n          .useTransaction(true)\r\n          .execute();\r\n        if (isDeleted.affected > 0) {\r\n          return this.findOneOrFail({\r\n            where: {\r\n              id: id,\r\n            },\r\n          });\r\n        }\r\n      }\r\n    \r\n      findDeletedByPagination(search: string): Promise<FeedbackType[]> {\r\n        return this.createQueryBuilder('ft')\r\n          .select('ft.id', 'id')\r\n          .addSelect('ft.name', 'name')\r\n          .addSelect('ft.deleted_at', 'deletedAt')\r\n          .addSelect('a.username', 'deletedBy')\r\n          .innerJoin(Accounts, 'a', 'a.id = ft.deleted_by')\r\n          .where('ft.name ILIKE :search', { search: `%${search.trim()}%` })\r\n          .andWhere('ft.deleted_at IS NOT NULL')\r\n          .orderBy('ft.deleted_at', 'DESC')\r\n          .getRawMany<FeedbackType>();\r\n      }\r\n    \r\n      async restoreDeletedById(accountId: string, id: string) {\r\n        const isRestored = await this.createQueryBuilder('ft')\r\n          .update({\r\n            updatedAt: new Date(),\r\n            updatedBy: accountId,\r\n            deletedAt: null,\r\n            deletedBy: null,\r\n          })\r\n          .where('ft.id = :id', { id: id })\r\n          .useTransaction(true)\r\n          .execute();\r\n        if (isRestored.affected > 0) {\r\n          return this.findOneOrFail({\r\n            where: {\r\n              id: id,\r\n            },\r\n          });\r\n        }\r\n      }\r\n    \r\n      async permanentlyDeleteById(id: string) {\r\n        return this.createQueryBuilder('ft')\r\n          .delete()\r\n          .where('ft.id = :id', { id: id })\r\n          .useTransaction(true)\r\n          .execute();\r\n      }\r\n    \r\n}\r\n","import { paginateRaw, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Repository } from 'typeorm';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { Accounts } from '../models';\r\nimport { Feedback } from '../models/feedback.entity';\r\nimport { FeedbackResolveRequestPayload } from '../payload/request/feedback-resolve.request.payload';\r\nimport { FeedbackSendRequestPayload } from '../payload/request/feedback-send.request.payload';\r\n\r\n@CustomRepository(Feedback)\r\nexport class FeedbackRepository extends Repository<Feedback> {\r\n  existsById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('f')\r\n      .select('COUNT(1)', 'count')\r\n      .where('f.id = :id', { id: id })\r\n      .getRawOne()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  findByPagination(\r\n    pagination: PaginationParams\r\n  ): Promise<Pagination<Feedback>> {\r\n    const query = this.createQueryBuilder('f')\r\n      .select('f.id', 'id')\r\n      .addSelect('f.created_by', 'createdBy')\r\n      .addSelect('f.created_at', 'createdAt')\r\n      .addSelect('f.status', 'status')\r\n      .addSelect('a.username', 'createdByName')\r\n      .innerJoin(Accounts, 'a', 'a.id = f.created_by')\r\n      .where('f.deleted_at IS NULL')\r\n      //   .andWhere('f.name ILIKE :search', {\r\n      //     search: `%${pagination.search.trim()}%`,\r\n      //   })\r\n      .orderBy('f.created_at', 'DESC');\r\n\r\n    return paginateRaw<Feedback>(query, {\r\n      page: pagination.page,\r\n      limit: pagination.limit,\r\n    });\r\n  }\r\n\r\n  async findById(id: string): Promise<Feedback> {\r\n    return this.createQueryBuilder('fb')\r\n      .select('fb.id', 'id')\r\n      .addSelect('fb.feedback_msg', 'feedbackMess')\r\n      .addSelect('fb.status', 'status')\r\n      .addSelect('fb.resolved_msg', 'resolvedMess')\r\n      .addSelect('a.username', 'resolvedBy')\r\n      .addSelect('fb.resolved_at', 'resolvedAt')\r\n      .addSelect('aa.username', 'createdBy')\r\n      .addSelect('fb.created_at', 'createdAt')\r\n      .addSelect('aaa.username', 'rejectedBy')\r\n      .addSelect('fb.rejected_at', 'rejectedAt')\r\n      .leftJoin(Accounts, 'a', 'a.id = fb.resolved_by')\r\n      .leftJoin(Accounts, 'aa', 'aa.id = fb.created_by')\r\n      .leftJoin(Accounts, 'aaa', 'aaa.id = fb.rejected_by')\r\n      .where('fb.id = :id', { id: id })\r\n      .andWhere('fb.deleted_at IS NULL')\r\n      .getRawOne<Feedback>();\r\n  }\r\n\r\n  async addNew(\r\n    accountId: string,\r\n    payload: FeedbackSendRequestPayload\r\n  ): Promise<Feedback> {\r\n    return this.save<Feedback>(\r\n      {\r\n        feedbackMessage: payload.message,\r\n        feedbackTypeId: payload.type,\r\n        createdBy: accountId,\r\n        createdAt: new Date(),\r\n        status: 'PENDING',\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  async resolveById(\r\n    accountId: string,\r\n    feedbackId: string,\r\n    payload: FeedbackResolveRequestPayload\r\n  ) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: feedbackId,\r\n      }\r\n    })\r\n    return this.save(\r\n      {\r\n        ...oldData,\r\n        id: feedbackId,\r\n        resolvedMessage: payload.resolveMessage,\r\n        status: 'RESOLVED',\r\n        resolvedBy: accountId,\r\n        resolvedAt: new Date(),\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  async rejectById(\r\n    accountId: string,\r\n    feedbackId: string,\r\n  ) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: feedbackId,\r\n      }\r\n    })\r\n    return this.save(\r\n      {\r\n        ...oldData,\r\n        id: feedbackId,\r\n        status: 'REJECTED',\r\n        rejectedBy: accountId,\r\n        rejectedAt: new Date(),\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n}\r\n","export * from './account.repository';\r\nexport * from './booking-request.repository';\r\nexport * from './devices.repository';\r\nexport * from './device-hist.repository';\r\nexport * from './room-wishlist.repository';\r\nexport * from './rooms.repository';\r\nexport * from './notification-type.repository';\r\nexport * from './account-hist.repository';\r\nexport * from './feedback-type.repository';\r\nexport * from './feedback-hist.repository';\r\nexport * from './feedback.repository';\r\nexport * from './booking-reason.repository';\r\nexport * from './booking-reason-hist.repository';\r\nexport * from './booking-request-devices.repository';\r\nexport * from './booking-request.repository';\r\nexport * from './booking-room-feedback.repository';\r\nexport * from './room-wishlist-hist.repository';\r\n","import { Repository } from 'typeorm';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { NotificationType } from '../models/notification-type.entity';\r\n\r\n@CustomRepository(NotificationType)\r\nexport class NotificationTypeRepository extends Repository<NotificationType> {}\r\n","import { QueryRunner, Repository } from 'typeorm';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { Notification } from '../models/notification.entity';\r\n\r\n@CustomRepository(Notification)\r\nexport class NotificationRepository extends Repository<Notification> {\r\n  existsById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('noti')\r\n      .select('COUNT(1)', 'count')\r\n      .where('noti.id = :id', { id: id })\r\n      .getRawOne()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  async findById(id: string): Promise<Notification> {\r\n    return this.createQueryBuilder('noti')\r\n      .select('noti.id', 'id')\r\n      .addSelect('noti.title', 'title')\r\n      .addSelect('noti.message', 'message')\r\n      .addSelect('noti.created_at', 'createdAt')\r\n      .where('noti.id = :id', { id: id })\r\n      .getRawOne<Notification>();\r\n  }\r\n\r\n  async sendNotification(\r\n    payload: { title: string; message: string },\r\n    receiver,\r\n    queryRunner: QueryRunner\r\n  ): Promise<Notification> {\r\n    return queryRunner.manager.save(Notification, {\r\n      title: payload.title,\r\n      message: payload.message,\r\n      // createdBy: accountId,\r\n      createdAt: new Date(),\r\n      receiver: receiver,\r\n    });\r\n  }\r\n\r\n  getYourOwnNotifications(userId): Promise<Notification[]> {\r\n    return this.createQueryBuilder('noti')\r\n      .select('noti.id', 'id')\r\n      .addSelect('noti.title', 'title')\r\n      .addSelect('noti.message', 'message')\r\n      .addSelect('noti.created_at', 'createdAt')\r\n      .addSelect('noti.receiver', 'receiver')\r\n      .where('noti.receiver = :id', { id: userId })\r\n      .orderBy('noti.created_at', 'DESC')\r\n      .getRawMany<Notification>();\r\n  }\r\n}\r\n","import { Repository } from 'typeorm';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { RoleHist } from '../models/role-hist.entity';\r\nimport { Roles } from '../models/role.entity';\r\n\r\n@CustomRepository(RoleHist)\r\nexport class RoleHistRepository extends Repository<RoleHist> {\r\n  async createNew(payload: Roles): Promise<RoleHist> {\r\n    const roleId = payload.id;\r\n    delete payload.id\r\n    return this.save({\r\n      roleId: roleId,\r\n      ...payload,\r\n    });\r\n  }\r\n\r\n  async deleteAllHist(id: string) {\r\n    return await this.createQueryBuilder('role_hist')\r\n      .delete()\r\n      .where('role_hist.role_id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n}\r\n","import { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { Roles } from '../models/role.entity';\r\nimport { Repository, UpdateResult } from 'typeorm';\r\nimport { Accounts } from '../models';\r\nimport { IPaginationMeta, paginateRaw } from 'nestjs-typeorm-paginate';\r\nimport { Pagination } from 'nestjs-typeorm-paginate';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\n\r\n@CustomRepository(Roles)\r\nexport class RolesRepository extends Repository<Roles> {\r\n  async existsById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('r')\r\n      .select('COUNT(1)', 'count')\r\n      .where('r.id = :id', { id: id })\r\n      .getRawOne()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  async isExistedByName(name: string): Promise<boolean> {\r\n    return this.createQueryBuilder('rooms')\r\n      .select('COUNT(rooms.name)')\r\n      .where('rooms.name = :name', { name })\r\n      .getRawOne()\r\n      .then((data) => data['count'] > 0);\r\n  }\r\n\r\n  async findByPagination(\r\n    pagination: PaginationParams\r\n  ): Promise<Pagination<Roles>> {\r\n    const query = this.createQueryBuilder('r')\r\n      .select('r.id', 'id')\r\n      .addSelect('r.name', 'name')\r\n      .addSelect('r.description', 'description')\r\n      .where('r.deleted_at IS NULL')\r\n      .andWhere('r.name ILIKE :search', {\r\n        search: `%${pagination.search.trim()}%`,\r\n      })\r\n      .orderBy(pagination.sort, pagination.dir as 'ASC' | 'DESC');\r\n    return paginateRaw<Roles, IPaginationMeta>(query, {\r\n      limit: pagination.limit,\r\n      page: pagination.page,\r\n    });\r\n  }\r\n\r\n  findRoleName(): Promise<Roles[]> {\r\n    return this.createQueryBuilder('roles')\r\n      .select('roles.id', 'id')\r\n      .addSelect('roles.name', 'name')\r\n      .andWhere(\"roles.deleted_at IS NULL\")\r\n      .getRawMany<Roles>();\r\n  }\r\n\r\n  findById(id: string): Promise<Roles> {\r\n    return this.createQueryBuilder('r')\r\n      .select('r.id', 'id')\r\n      .addSelect('r.name', 'name')\r\n      .addSelect('r.description', 'description')\r\n      .addSelect('r.created_at', 'createdAt')\r\n      .addSelect('r.updated_at', 'updatedAt')\r\n      .addSelect('a.username', 'createdBy')\r\n      .addSelect('aa.username', 'updatedBy')\r\n      .innerJoin(Accounts, 'a', 'a.id = r.created_by')\r\n      .leftJoin(Accounts, 'aa', 'aa.id = r.updated_by')\r\n      .where('r.id = :id', { id: id })\r\n      .andWhere('r.deleted_at IS NULL')\r\n      .getRawOne<Roles>();\r\n  }\r\n\r\n  // async get(id: string): Promise<Roles> {\r\n  //   return this.createQueryBuilder('roles')\r\n  //     .select('roles.id', 'id')\r\n  //     .addSelect('roles.name', 'name')\r\n  //     .addSelect('roles.description', 'description')\r\n  //     .addSelect('roles.created_by', 'createdBy')\r\n  //     .addSelect('roles.created_at', 'createdAt')\r\n  //     .addSelect('roles.updated_by', 'updatedBy')\r\n  //     .addSelect('roles.updated_at', 'updatedAt')\r\n  //     .addSelect('roles.deleted_by', 'deletedBy')\r\n  //     .addSelect('roles.deleted_at', 'deletedAt')\r\n\r\n  //     .where('roles.id = :id', { id: id })\r\n  //     .getRawOne<Roles>();\r\n  // }\r\n\r\n  async addNew(\r\n    accountId: string,\r\n    payload: { name: string; description: string }\r\n  ): Promise<Roles> {\r\n    return this.save<Roles>(\r\n      {\r\n        name: payload.name.trim(),\r\n        description: payload.description,\r\n        createdBy: accountId,\r\n        createdAt: new Date(),\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  async updateById(id: string, accountId: string, payload: any) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: id,\r\n      }\r\n    })\r\n    return this.save(\r\n      {\r\n        ...oldData,\r\n        id: id,\r\n        description: payload.description,\r\n        updatedBy: accountId,\r\n        updatedAt: new Date(),\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  async deleteById(accountId: string, id: string){\r\n    const isDeleted = await this.createQueryBuilder('role')\r\n      .update({\r\n        deletedAt: new Date(),\r\n        deletedBy: accountId,\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n      })\r\n      .where('role.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isDeleted.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  getDeletedRoles(search: string): Promise<Roles[]> {\r\n    return this.createQueryBuilder('role')\r\n      .select('role.id', 'id')\r\n      .addSelect('role.name', 'name')\r\n      .addSelect('role.deleted_at', 'deletedAt')\r\n      .addSelect('a.username', 'deletedBy')\r\n      .innerJoin(Accounts, 'a', 'a.id = role.deleted_by')\r\n      .where('role.name ILIKE :search', { search: `%${search.trim()}%` })\r\n      .andWhere('role.deleted_at IS NOT NULL')\r\n      .orderBy('role.deleted_at', 'DESC')\r\n      .getRawMany<Roles>();\r\n  }\r\n\r\n  async restoreDeletedById(accountId: string, id: string){\r\n    const isRestored = await this.createQueryBuilder('role')\r\n      .update({\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n        deletedAt: null,\r\n        deletedBy: null,\r\n      })\r\n      .where('role.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isRestored.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      })\r\n  }\r\n}\r\n\r\n  permanentlyDeleteById(id: string) {\r\n    return this.createQueryBuilder('role')\r\n      .delete()\r\n      .where('role.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n}\r\n","import { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { QueryRunner, Repository } from 'typeorm';\r\nimport { RoomHist, Rooms } from '../models';\r\n\r\n@CustomRepository(RoomHist)\r\nexport class RoomHistRepository extends Repository<RoomHist> {\r\n  async createNew(payload: Rooms, queryRunner: QueryRunner): Promise<RoomHist> {\r\n    const roomId = payload.id;\r\n    delete payload.id\r\n    return queryRunner.manager.save(RoomHist, {\r\n      roomId: roomId,\r\n      ...payload,\r\n    });\r\n  }\r\n}\r\n","import { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { Repository } from 'typeorm';\r\nimport { RoomTypeHist, RoomType } from '../models';\r\n\r\n@CustomRepository(RoomTypeHist)\r\nexport class RoomTypeHistRepository extends Repository<RoomTypeHist> {\r\n  async createNew(payload: RoomType): Promise<RoomTypeHist> {\r\n    const roomTypeId = payload.id;\r\n    delete payload.id\r\n    return this.save({\r\n      roomTypeId: roomTypeId,\r\n      ...payload,\r\n    });\r\n  }\r\n\r\n  async deleteAllHist(id: string) {\r\n    return await this.createQueryBuilder('room_type_hist')\r\n       .delete()\r\n       .where('room_type_hist.room_type_id = :id', { id: id })\r\n       .useTransaction(true)\r\n       .execute();\r\n   }\r\n}\r\n","import { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { Repository, UpdateResult } from 'typeorm';\r\nimport { RoomType } from '../models/room-type.entity';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { Accounts } from '../models';\r\n\r\nimport {\r\n  IPaginationMeta,\r\n  paginateRaw,\r\n  Pagination,\r\n} from 'nestjs-typeorm-paginate';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\nimport { BadRequestException, Logger } from '@nestjs/common';\r\nimport { DeviceTypeService } from '../services/device-type.service';\r\n\r\n@CustomRepository(RoomType)\r\nexport class RoomTypeRepository extends Repository<RoomType> {\r\n  private readonly logger = new Logger(DeviceTypeService.name);\r\n  existsById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('rt')\r\n      .select('COUNT(1)', 'count')\r\n      .where('rt.id = :id', { id: id })\r\n      .getRawOne()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  findRoomTypesByPagination(\r\n    pagination: PaginationParams\r\n  ): Promise<Pagination<RoomType>> {\r\n    const query = this.createQueryBuilder('rt')\r\n      .select('rt.id', 'id')\r\n      .addSelect('rt.name', 'name')\r\n      .where('rt.deleted_at IS NULL')\r\n      .andWhere('LOWER(rt.name) ILIKE :search', {\r\n        search: `%${pagination.search.trim()}%`,\r\n      })\r\n      .orderBy(pagination.sort, pagination.dir as 'ASC' | 'DESC');\r\n    return paginateRaw<RoomType>(query, {\r\n      page: pagination.page,\r\n      limit: pagination.limit,\r\n    });\r\n  }\r\n\r\n  findRoomTypeName(): Promise<RoomType[]> {\r\n    return this.createQueryBuilder('rt')\r\n      .select('rt.id', 'id')\r\n      .addSelect('rt.name', 'name')\r\n      .andWhere('rt.deleted_at IS NULL')\r\n      .getRawMany<RoomType>();\r\n  }\r\n\r\n  async findById(id: string): Promise<RoomType> {\r\n    return this.createQueryBuilder('rt')\r\n      .select('rt.id', 'id')\r\n      .addSelect('rt.name', 'name')\r\n      .addSelect('rt.description', 'description')\r\n      .addSelect('a.username', 'createdBy')\r\n      .addSelect('rt.created_at', 'createdAt')\r\n      .addSelect('aa.username', 'updatedBy')\r\n      .addSelect('rt.updated_at', 'updatedAt')\r\n      .innerJoin(Accounts, 'a', 'a.id = rt.created_by')\r\n      .leftJoin(Accounts, 'aa', 'aa.id = rt.updated_by')\r\n      .where('rt.id = :id', { id: id })\r\n      .andWhere('rt.deleted_at IS NULL')\r\n      .getRawOne<RoomType>();\r\n  }\r\n\r\n  // async get(id: string): Promise<RoomType> {\r\n  //   return this.createQueryBuilder('rt')\r\n  //     .select('rt.id', 'id')\r\n  //     .addSelect('rt.name', 'name')\r\n  //     .addSelect('rt.description', 'description')\r\n  //     .addSelect('rt.created_by', 'createdBy')\r\n  //     .addSelect('rt.created_at', 'createdAt')\r\n  //     .addSelect('rt.updated_by', 'updatedBy')\r\n  //     .addSelect('rt.updated_at', 'updatedAt')\r\n  //     .addSelect('rt.deleted_by', 'deletedBy')\r\n  //     .addSelect('rt.deleted_at', 'deletedAt')\r\n\r\n  //     .where('rt.id = :id', { id: id })\r\n  //     .getRawOne<RoomType>();\r\n  // }\r\n\r\n  async addNew(\r\n    accountId: string,\r\n    payload: { name: string; description: string }\r\n  ): Promise<RoomType> {\r\n    try {\r\n      const roomType = await this.save({\r\n        name: payload.name.trim(),\r\n        description: payload.description,\r\n        createdBy: accountId,\r\n        createdAt: new Date(),\r\n      });\r\n      return roomType;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async updateById(\r\n    accountId: string,\r\n    roomTypeId: string,\r\n    payload: MasterDataAddRequestPayload\r\n  ) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: roomTypeId,\r\n      }\r\n    })\r\n    return this.save(\r\n      {\r\n        ...oldData,\r\n        id: roomTypeId,\r\n        name: payload.name.trim(),\r\n        description: payload.description,\r\n        updatedBy: accountId,\r\n        updatedAt: new Date(),\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  async deleteById(accountId: string, id: string) {\r\n    const isDeleted = await this.createQueryBuilder('room_type')\r\n      .update({\r\n        deletedAt: new Date(),\r\n        deletedBy: accountId,\r\n      })\r\n      .where('room_type.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isDeleted.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  findDeletedByPagination(search: string): Promise<RoomType[]> {\r\n    return this.createQueryBuilder('rt')\r\n      .select('rt.id', 'id')\r\n      .addSelect('rt.name', 'name')\r\n      .addSelect('rt.deleted_at', 'deletedAt')\r\n      .addSelect('a.username', 'deletedBy')\r\n      .innerJoin(Accounts, 'a', 'a.id = rt.deleted_by')\r\n      .where('rt.name ILIKE :search', { search: `%${search.trim()}%` })\r\n      .andWhere('rt.deleted_at IS NOT NULL')\r\n      .orderBy('rt.deleted_at', 'DESC')\r\n      .getRawMany<RoomType>();\r\n  }\r\n\r\n  async restoreDeletedById(accountId: string, id: string) {\r\n    const isRestored = await this.createQueryBuilder('room_type')\r\n      .update({\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n        deletedAt: null,\r\n        deletedBy: null,\r\n      })\r\n      .where('room_type.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isRestored.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  permanentlyDeleteById(id: string) {\r\n    return this.createQueryBuilder('room_type')\r\n      .delete()\r\n      .where('room_type.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n}\r\n","import { Repository } from 'typeorm';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { RoomWishlistHist } from '../models';\r\n\r\n@CustomRepository(RoomWishlistHist)\r\nexport class RoomWishlistHistRepository extends Repository<RoomWishlistHist> {}\r\n","import { Repository } from 'typeorm';\r\nimport { RoomWishlist } from '../models';\r\nimport { WishlistBookingRoomResponseDTO } from '../dto/wishlist-booking-room.response.dto';\r\nimport { WishlistBookingRoomRequestDTO } from '../dto/wishlist-booking-room.request.dto';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\n\r\n@CustomRepository(RoomWishlist)\r\nexport class RoomWishlistRepository extends Repository<RoomWishlist> {\r\n  findAll(\r\n    roomName: string,\r\n    slotFrom: number,\r\n    slotTo: number,\r\n    accountId: string\r\n  ) {\r\n    return this.createQueryBuilder('room_wishlist')\r\n      .select(\r\n        'room_wishlist.id as id, r.id as roomId, r.name as roomName, room_wishlist.slot_num as slot'\r\n      )\r\n      .innerJoin('rooms', 'r', 'r.id = room_wishlist.room_id')\r\n      .innerJoin('accounts', 'a', 'room_wishlist.created_by = a.id')\r\n      .where('a.id = :id', { id: accountId })\r\n      .andWhere('r.name LIKE :roomName', { roomName: `%${roomName ?? ''}%` })\r\n      .groupBy('room_wishlist.id')\r\n      .addGroupBy('r.id')\r\n      .addGroupBy('room_wishlist.slot_num')\r\n      .having('room_wishlist.slot_num >= :slotFrom', { slotFrom: slotFrom })\r\n      .andHaving('room_wishlist.slot_num <= :slotTo', { slotTo: slotTo })\r\n      .getRawMany<WishlistBookingRoomResponseDTO>();\r\n  }\r\n\r\n  addToWishList(keycloakUserId: string, wishlist: RoomWishlist) {\r\n    return this.createQueryBuilder('room_wishlist')\r\n      .insert()\r\n      .into<RoomWishlist>(RoomWishlist, ['room_id', 'created_at'])\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n\r\n  async checkIfWishlistAlreadyExist(payload: {\r\n    roomId: string;\r\n    slot: number;\r\n  }): Promise<boolean> {\r\n    return this.createQueryBuilder('room_wishlist')\r\n      .select('COUNT(1)', 'check')\r\n      .where('room_wishlist.room_id = :roomId', { roomId: payload.roomId })\r\n      .andWhere('room_wishlist.slot_num = :slot', { slot: payload.slot })\r\n      .getRawOne()\r\n      .then((data) => data.check > 0);\r\n  }\r\n\r\n  removeFromWishlist(accountId: string, roomId: string, slot: number) {\r\n    return this.createQueryBuilder('room_wishlist')\r\n      .delete()\r\n      .where('room_wishlist.created_by = :createdBy', { createdBy: accountId })\r\n      .andWhere('room_wishlist.room_id = :roomId', { roomId: roomId })\r\n      .andWhere('room_wishlist.slot_num = :slot', { slot: slot })\r\n      .useTransaction(true)\r\n      .execute();\r\n  }\r\n} /*\r\nSELECT rw.id, r.id as roomid, r.name as roomName, rw.slot_num as slot FROM room_wishlist rw INNER JOIN accounts a\r\nON rw.created_by = a.id INNER JOIN rooms r ON r.id = rw.room_id\r\nWHERE r.name LIKE '%%' AND a.keycloak_id = '8c592883-e40d-45dc-a4da-ebb4ec9778c9'\r\n*/\r\n","import {\r\n  Brackets,\r\n  In,\r\n  Like,\r\n  QueryRunner,\r\n  Repository,\r\n  UpdateResult,\r\n} from 'typeorm';\r\nimport { RepositoryPaginationPayload } from '../models/search-pagination.payload';\r\nimport { Rooms } from '../models';\r\nimport { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { Accounts, Devices } from '../models';\r\nimport { ChooseBookingRoomFilterPayload } from '../payload/request/choose-booking-room-filter.payload';\r\nimport {\r\n  IPaginationMeta,\r\n  paginateRaw,\r\n  Pagination,\r\n} from 'nestjs-typeorm-paginate';\r\nimport { RoomsPaginationParams } from '../controllers/rooms-pagination.model';\r\nimport { RoomType } from '../models/room-type.entity';\r\nimport { DataAddRequestPayload } from '../payload/request/data-add.request.payload';\r\n\r\n@CustomRepository(Rooms)\r\nexport class RoomsRepository extends Repository<Rooms> {\r\n  async getSize(): Promise<number> {\r\n    const result = await this.createQueryBuilder(`rooms`)\r\n      .select(`COUNT(id) as size`)\r\n      .where(`rooms.deleted_at IS NULL`)\r\n      .andWhere(`rooms.disabled_at IS NULL`)\r\n      .getRawOne<{\r\n        size: number;\r\n      }>();\r\n    return result.size;\r\n  }\r\n\r\n  async existsById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('rooms')\r\n      .select('COUNT(rooms.name)')\r\n      .where('rooms.id = :id', { id })\r\n      .getRawOne()\r\n      .then((data) => data['count'] > 0);\r\n  }\r\n\r\n  async checkIfRoomIsDeletedById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('rooms')\r\n      .select('rooms.deleted_at')\r\n      .where('rooms.id = :id', { id: id })\r\n      .getRawOne<boolean>()\r\n      .then((data) => (data ? data['deleted_at'] : true));\r\n  }\r\n\r\n  async checkIfRoomIsDisabledById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('rooms')\r\n      .select('rooms.disabled_at')\r\n      .where('rooms.id = :id', { id: id })\r\n      .getRawOne<boolean>()\r\n      .then((data) => (data ? data['disabled_at'] : true));\r\n  }\r\n\r\n  async isExistedByName(name: string): Promise<boolean> {\r\n    return this.createQueryBuilder('rooms')\r\n      .select('COUNT(rooms.name)')\r\n      .where('rooms.name = :name', { name })\r\n      .getRawOne()\r\n      .then((data) => data['count'] > 0);\r\n  }\r\n\r\n  searchRoom(payload: RoomsPaginationParams) {\r\n    const query = this.createQueryBuilder('r')\r\n      .leftJoin(Accounts, 'a', 'r.created_by = a.id')\r\n      .leftJoin(Accounts, 'aa', 'r.updated_by = aa.id')\r\n      .select('r.id', 'id')\r\n      .addSelect('r.name', 'name')\r\n      .addSelect('r.description', 'description')\r\n      .addSelect('rt.name', 'type')\r\n      .addSelect('r.createdAt', 'createdAt')\r\n      .addSelect('r.updatedAt', 'updatedAt')\r\n      .addSelect('a.username', 'createdBy')\r\n      .addSelect('aa.username', 'updatedBy')\r\n      .innerJoin(RoomType, 'rt', 'rt.id = r.type')\r\n      .where('LOWER(r.name) LIKE LOWER(:search)', {\r\n        search: `%${payload.search.trim()}%`,\r\n      })\r\n      .andWhere(`r.deleted_at IS NULL`)\r\n      .andWhere(`r.disabled_at IS NULL`)\r\n      .orderBy(payload.sort, payload.dir as 'ASC' | 'DESC');\r\n    if (payload.roomType && payload.roomType !== '') {\r\n      query.andWhere('rt.name = :roomTypeName', {\r\n        roomTypeName: payload.roomType,\r\n      });\r\n    }\r\n    return paginateRaw<Rooms>(query, {\r\n      limit: payload.limit,\r\n      page: payload.page,\r\n    });\r\n  }\r\n\r\n  async findRoomNames(): Promise<Rooms[]> {\r\n    return this.createQueryBuilder('rooms')\r\n      .select('rooms.name', 'name')\r\n      .addSelect('rooms.id', 'id')\r\n      .where('rooms.disabled_at IS NULL')\r\n      .andWhere('rooms.deleted_at IS NULL')\r\n      .orderBy('rooms.name', 'ASC')\r\n      .getRawMany<Rooms>();\r\n  }\r\n\r\n  async findById(id: string): Promise<Rooms> {\r\n    return this.createQueryBuilder('rooms')\r\n      .select('rooms.id', 'id')\r\n      .addSelect('rooms.name', 'name')\r\n      .addSelect('rt.id', 'roomTypeId')\r\n      .addSelect('rt.name', 'roomTypeName')\r\n      .addSelect('rooms.created_at', 'createdAt')\r\n      .addSelect('a.username', 'createdBy')\r\n      .addSelect('rooms.updated_at', 'updatedAt')\r\n      .addSelect('aa.username', 'updatedBy')\r\n      .addSelect('rooms.description', 'description')\r\n      .leftJoin(Accounts, 'a', 'rooms.created_by = a.id')\r\n      .leftJoin(Accounts, 'aa', 'rooms.updated_by = aa.id')\r\n      .innerJoin(RoomType, 'rt', 'rt.id = rooms.type')\r\n      .where('rooms.disabled_at IS NULL')\r\n      .andWhere('rooms.deleted_at IS NULL')\r\n      .andWhere('rooms.id = :roomId', { roomId: id })\r\n      .getRawOne<Rooms>();\r\n  }\r\n\r\n  createNewRoom(\r\n    payload: DataAddRequestPayload,\r\n    userId: string,\r\n    queryRunner: QueryRunner\r\n  ): Promise<Rooms> {\r\n    if (payload.isDisabled) {\r\n      return queryRunner.manager.save(Rooms, {\r\n        name: payload.name.trim(),\r\n        description: payload.description,\r\n        type: payload.type,\r\n        createdBy: userId,\r\n        createdAt: new Date(),\r\n        disabledBy: userId,\r\n        disabledAt: new Date(),\r\n      });\r\n    } else {\r\n      return this.save(\r\n        {\r\n          name: payload.name.trim(),\r\n          description: payload.description,\r\n          type: payload.type,\r\n          createdBy: userId,\r\n          createdAt: new Date(),\r\n        },\r\n        {\r\n          transaction: true,\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  async updateById(\r\n    accountId: string,\r\n    roomId: string,\r\n    payload: DataAddRequestPayload,\r\n    queryRunner: QueryRunner\r\n  ) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: roomId,\r\n      },\r\n    });\r\n    return queryRunner.manager.save(\r\n      Rooms,\r\n      {\r\n        ...oldData,\r\n        id: roomId,\r\n        name: payload.name.trim(),\r\n        description: payload.description,\r\n        type: payload.type,\r\n        updatedBy: accountId,\r\n        updatedAt: new Date(),\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  findDisabledRooms(search: string) {\r\n    return this.createQueryBuilder('rooms')\r\n      .select('rooms.id', 'id')\r\n      .addSelect('rooms.name', 'name')\r\n      .addSelect('rooms.disabled_at', 'disabledAt')\r\n      .addSelect('a.username', 'disabledBy')\r\n      .addSelect('rt.name', 'roomTypeName')\r\n      .innerJoin(Accounts, 'a', 'rooms.disabled_by = a.id')\r\n      .innerJoin(RoomType, 'rt', 'rooms.type = rt.id')\r\n      .where(`rooms.deleted_at IS NULL`)\r\n      .andWhere(`rooms.disabled_at IS NOT NULL`)\r\n      .andWhere('rooms.name ILIKE :search', { search: `%${search.trim()}%` })\r\n      .getRawMany<Rooms>();\r\n  }\r\n\r\n  getRoomsByRoomType(roomTypeId: string) {\r\n    return this.createQueryBuilder(`rooms`)\r\n      .select('rooms.id', 'id')\r\n      .addSelect('rooms.name', 'name')\r\n      .addSelect('rooms.type', 'type')\r\n      .addSelect('rt.name', 'roomTypeName')\r\n      .innerJoin(RoomType, 'rt', 'rt.id = rooms.type')\r\n      .where(`rooms.deleted_at IS NULL`)\r\n      .andWhere(`rooms.disabled_at IS NULL`)\r\n      .where('rooms.type = :type', { type: roomTypeId })\r\n\r\n      .getRawMany<Rooms>();\r\n  }\r\n\r\n  async disableById(accountId: string, id: string, queryRunner: QueryRunner) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: id,\r\n      },\r\n    });\r\n    return queryRunner.manager.save(Rooms, {\r\n      ...oldData,\r\n      disabledBy: accountId,\r\n      disabledAt: new Date(),\r\n    });\r\n  }\r\n\r\n  async restoreDisabledRoomById(\r\n    accountId: string,\r\n    id: string,\r\n    queryRunner: QueryRunner\r\n  ) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: id,\r\n      },\r\n    });\r\n    return queryRunner.manager.save(Rooms, {\r\n      ...oldData,\r\n      disabledBy: null,\r\n      disabledAt: null,\r\n      updatedBy: accountId,\r\n      updatedAt: new Date(),\r\n    });\r\n  }\r\n\r\n  async deleteById(accountId: string, id: string, queryRunner: QueryRunner) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: id,\r\n      },\r\n    });\r\n    return queryRunner.manager.save(Rooms, {\r\n      ...oldData,\r\n      deletedAt: new Date(),\r\n      deletedBy: accountId,\r\n      disabledAt: null,\r\n      disabledBy: null,\r\n    });\r\n  }\r\n\r\n  findDeletedRooms(search: string) {\r\n    return this.createQueryBuilder(`rooms`)\r\n      .select('rooms.id', 'id')\r\n      .addSelect('rooms.name', 'name')\r\n      .addSelect('rooms.deleted_at', 'deletedAt')\r\n      .addSelect('a.username', 'deletedBy')\r\n      .addSelect('rt.name', 'roomTypeName')\r\n      .innerJoin(Accounts, 'a', 'rooms.deleted_by = a.id')\r\n      .innerJoin(RoomType, 'rt', 'rt.id = rooms.type')\r\n      .where(`rooms.deleted_at IS NOT NULL`)\r\n      .andWhere(`rooms.disabled_at IS NULL`)\r\n      .andWhere('rooms.name ILIKE :name', { name: `%${search.trim()}%` })\r\n      .getRawMany<Rooms>();\r\n  }\r\n\r\n  async restoreDeletedRoomById(\r\n    accountId: string,\r\n    id: string,\r\n    queryRunner: QueryRunner\r\n  ) {\r\n    const oldData = await this.findOneOrFail({\r\n      where: {\r\n        id: id,\r\n      },\r\n    });\r\n    return queryRunner.manager.save(Rooms, {\r\n      ...oldData,\r\n      deletedBy: null,\r\n      deletedAt: null,\r\n      updatedBy: accountId,\r\n      updatedAt: new Date(),\r\n    });\r\n  }\r\n\r\n  getAllRoomsForElasticIndex(): Promise<Rooms[]> {\r\n    return this.createQueryBuilder('rooms')\r\n      .select([\r\n        'rooms.id',\r\n        'rooms.name',\r\n        'rooms.description',\r\n        'rooms.isDeleted',\r\n        'rooms.isDisabled',\r\n      ])\r\n      .getMany();\r\n  }\r\n\r\n  filterByNameAndType(payload: ChooseBookingRoomFilterPayload) {\r\n    const query = this.createQueryBuilder('rooms')\r\n      .select('rooms.id', 'id')\r\n      .addSelect('rooms.name', 'name')\r\n      .addSelect('rooms.type', 'type')\r\n      .where('rooms.disabled_at IS NULL')\r\n      .andWhere('rooms.deleted_at IS NULL')\r\n      .andWhere('rooms.name ILIKE :name', {\r\n        name: `%${payload.roomName.name}%`,\r\n      })\r\n      .orderBy('rooms.name', payload.roomName.sort)\r\n      .addOrderBy('rooms.type', payload.roomType.sort);\r\n    if (payload.roomType.name.length > 0) {\r\n      query.andWhere('rooms.type = :type', { type: payload.roomType.name });\r\n    }\r\n    return query.getRawMany<Rooms>();\r\n  }\r\n\r\n  filterRoomFreeByRoomBooked(listIdRoomBooked: string[]) {\r\n    console.log('AAAAAAAAa: ', listIdRoomBooked);\r\n    const query = this.createQueryBuilder('rooms')\r\n      .select('rooms.id', 'id')\r\n      .addSelect('rooms.name', 'name')\r\n      // .addSelect('rooms.type', 'type')\r\n      .addSelect('rooms.description', 'description')\r\n      .addSelect('rt.name', 'type')\r\n      .innerJoin(RoomType, 'rt', 'rt.id = rooms.type')\r\n      .where('rooms.disabled_at IS NULL')\r\n      .andWhere('rooms.deleted_at IS NULL');\r\n    if (listIdRoomBooked?.length > 0) {\r\n      query.andWhere('rooms.id NOT IN (:...listIdRoomBooked)', {\r\n        listIdRoomBooked: listIdRoomBooked,\r\n      });\r\n    }\r\n    return query.getRawMany<Rooms>();\r\n  }\r\n}\r\n","import { CustomRepository } from '../decorators/typeorm-ex.decorator';\r\nimport { Slot } from '../models/slot.entity';\r\nimport { QueryRunner, Repository } from 'typeorm';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { paginateRaw, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Accounts } from '../models';\r\n\r\n@CustomRepository(Slot)\r\nexport class SlotRepository extends Repository<Slot> {\r\n  existsById(id: string): Promise<boolean> {\r\n    return this.createQueryBuilder('sl')\r\n      .select('COUNT(1)', 'count')\r\n      .where('sl.id = :id', { id: id })\r\n      .getRawOne()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  isHaveSlotSameNameActive(name: string): Promise<boolean> {\r\n    return this.createQueryBuilder('sl')\r\n      .select('COUNT(1)', 'count')\r\n      .where('sl.name ILIKE :name', { name: name })\r\n      .andWhere('sl.deleted_by IS NULL')\r\n      .andWhere('sl.deleted_at IS NULL')\r\n      .getRawOne()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  isHaveSlotSameNumActive(slotNum: number): Promise<boolean> {\r\n    return this.createQueryBuilder('sl')\r\n      .select('COUNT(1)', 'count')\r\n      .where('sl.slotNum = :slotNum', { slotNum: slotNum })\r\n      .andWhere('sl.deleted_by IS NULL')\r\n      .andWhere('sl.deleted_at IS NULL')\r\n      .getRawOne()\r\n      .then((data) => data?.count > 0);\r\n  }\r\n\r\n  findByPagination(params: PaginationParams): Promise<Pagination<Slot>> {\r\n    const query = this.createQueryBuilder('s')\r\n      .select('s.id', 'id')\r\n      .addSelect('s.time_start', 'timeStart')\r\n      .addSelect('s.time_end', 'timeEnd')\r\n      .addSelect('s.name', 'name')\r\n      .where('s.deleted_at IS NULL')\r\n      .andWhere('LOWER(s.name) LIKE LOWER(:search)', {\r\n        search: `%${params.search}%`,\r\n      })\r\n      .orderBy('s.slot_num', 'ASC')\r\n      .orderBy(params.sort, params.dir as 'ASC' | 'DESC');\r\n    return paginateRaw<Slot>(query, {\r\n      page: params.page,\r\n      limit: params.limit,\r\n    });\r\n  }\r\n\r\n  async getNumOfSlot(id: string): Promise<{ slotNum: number, timeStart: string }> {\r\n    return this.createQueryBuilder('slot')\r\n      .select('slot.slot_num', 'slotNum')\r\n      .addSelect('slot.time_start', 'timeStart')\r\n      .where('slot.id = :slotId', { slotId: id })\r\n      .getRawOne();\r\n  }\r\n\r\n  async findSlotNames(): Promise<Slot[]> {\r\n    return this.createQueryBuilder('slots')\r\n      .select('slots.name', 'name')\r\n      .addSelect('slots.id', 'id')\r\n      .addSelect('slots.slot_num', 'slotNum')\r\n      .addSelect('slots.time_start', 'timeStart')\r\n      .addSelect('slots.time_end', 'timeEnd')\r\n      .where('slots.deleted_by IS NULL')\r\n      .andWhere('slots.deleted_at IS NULL')\r\n      .orderBy('slot_num', 'ASC')\r\n      .getRawMany<Slot>();\r\n  }\r\n\r\n  async findById(id: string): Promise<Slot> {\r\n    return this.createQueryBuilder('s')\r\n      .select('s.id', 'id')\r\n      .addSelect('s.name', 'name')\r\n      .addSelect('s.slot_num', 'slotNum')\r\n      .addSelect('s.time_start', 'timeStart')\r\n      .addSelect('s.time_end', 'timeEnd')\r\n      .addSelect('a.username', 'createdBy')\r\n      .addSelect('s.created_at', 'createdAt')\r\n      .addSelect('s.deleted_at', 'deletedAt')\r\n      .addSelect('aa.username', 'updatedBy')\r\n      .addSelect('s.updated_at', 'updatedAt')\r\n      .addSelect('s.description', 'description')\r\n      .innerJoin(Accounts, 'a', 'a.id = s.created_by')\r\n      .leftJoin(Accounts, 'aa', 'aa.id = s.updated_by')\r\n      .where('s.id = :id', { id: id })\r\n      .getRawOne<Slot>();\r\n  }\r\n\r\n  findAll(): Promise<Slot[]> {\r\n    return this.find({\r\n      where: {\r\n        deletedAt: null,\r\n        deletedBy: null,\r\n      },\r\n      order: {\r\n        ['slotNum']: 'ASC',\r\n      },\r\n    });\r\n  }\r\n\r\n  async addNew(\r\n    accountId: string,\r\n    payload: { name: string; slotNum: number, timeStart: string, timeEnd: string, description: string }\r\n  ): Promise<Slot> {\r\n    return this.save<Slot>(\r\n      {\r\n        name: payload.name.trim(),\r\n        slotNum: payload.slotNum,\r\n        timeStart: payload.timeStart,\r\n        timeEnd: payload.timeEnd,\r\n        description: payload.description,\r\n        createdBy: accountId,\r\n        createdAt: new Date(),\r\n      },\r\n      {\r\n        transaction: true,\r\n      }\r\n    );\r\n  }\r\n\r\n  async deleteById(accountId: string, id: string, queryRunner: QueryRunner) {\r\n    return await queryRunner.manager.save(Slot, {\r\n      id: id,\r\n      deletedBy: accountId,\r\n      deletedAt: new Date(),\r\n    });\r\n  }\r\n\r\n  findDeletedByPagination(search: string): Promise<Slot[]> {\r\n    return this.createQueryBuilder('sl')\r\n      .select('sl.id', 'id')\r\n      .addSelect('sl.name', 'name')\r\n      .addSelect('sl.time_start', 'timeStart')\r\n      .addSelect('sl.time_end', 'timeEnd')\r\n      .addSelect('sl.deleted_at', 'deletedAt')\r\n      .addSelect('a.username', 'deletedBy')\r\n      .innerJoin(Accounts, 'a', 'a.id = sl.deleted_by')\r\n      .where('sl.name ILIKE :search', { search: `%${search.trim()}%` })\r\n      .andWhere('sl.deleted_at IS NOT NULL')\r\n      .orderBy('sl.deleted_at', 'DESC')\r\n      .getRawMany<Slot>();\r\n  }\r\n\r\n  async restoreDeletedById(accountId: string, id: string) {\r\n    const isRestored = await this.createQueryBuilder('slot')\r\n      .update({\r\n        updatedAt: new Date(),\r\n        updatedBy: accountId,\r\n        deletedAt: null,\r\n        deletedBy: null,\r\n      })\r\n      .where('slot.id = :id', { id: id })\r\n      .useTransaction(true)\r\n      .execute();\r\n    if (isRestored.affected > 0) {\r\n      return this.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { Accounts, AccountHist } from '../models';\r\nimport { AccountHistRepository } from '../repositories/account-hist.repository';\r\n\r\n@Injectable()\r\nexport class AccountHistService {\r\n  constructor(private readonly repository: AccountHistRepository) {}\r\n\r\n  async createNew(account: Accounts): Promise<AccountHist> {\r\n    return this.repository.createNew(account);\r\n  }\r\n}\r\n","import {\r\n  BadRequestException,\r\n  HttpException,\r\n  HttpStatus,\r\n  Injectable,\r\n  Logger,\r\n} from '@nestjs/common';\r\nimport { Accounts } from '../models';\r\nimport { BaseService } from './base.service';\r\nimport { UpdateDeviceRequest, UsersDTO } from '@app/models';\r\nimport { AccountRepository } from '../repositories';\r\nimport { KeycloakService } from './keycloak.service';\r\nimport { UsersRequestPayload } from '../payload/request/users.payload';\r\nimport { CloudinaryService } from './cloudinary.service';\r\nimport { AccountsResponsePayload } from '../payload/response/accounts.payload';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { Direction } from '../models/search-pagination.payload';\r\nimport { ChangeProfilePasswordRequest } from '../payload/request/change-password.request.payload';\r\nimport { randomUUID } from 'crypto';\r\nimport { AccountsPaginationParams } from '../controllers/accounts-pagination.model';\r\nimport { AccountHistService } from './account-hist.service';\r\nimport { AccountAddRequestPayload } from '../payload/request/account-add.request.payload';\r\nimport { AccountUpdateProfilePayload } from '../payload/request/account-update-profile.request.payload';\r\n\r\n@Injectable()\r\nexport class AccountsService {\r\n  private readonly logger = new Logger(AccountsService.name);\r\n\r\n  constructor(\r\n    private readonly cloudinaryService: CloudinaryService,\r\n    private readonly keycloakService: KeycloakService,\r\n    private readonly repository: AccountRepository,\r\n    private readonly histService: AccountHistService\r\n  ) {}\r\n\r\n  async getAll(request: AccountsPaginationParams) {\r\n    try {\r\n      return await this.repository.searchAccount(request);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException('One or more parameters is invalid');\r\n    }\r\n  }\r\n\r\n  async getUserNames() {\r\n    try {\r\n      return await this.repository.findUserNames();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getRoleOfAccount(id: string) {\r\n    try {\r\n      const role = await this.repository.getRoleOfAccount(id);\r\n      return role;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException('One or more parameters is invalid');\r\n    }\r\n  }\r\n\r\n  async getById(id: string): Promise<Accounts> {\r\n    try {\r\n      const account = await this.repository.findById(id);\r\n      return account;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException('Account does not exist');\r\n    }\r\n  }\r\n\r\n  getUserIdByKeycloakId(keycloakId: string): Promise<string> {\r\n    return this.repository.findIdByKeycloakId(keycloakId);\r\n  }\r\n\r\n  findByKeycloakId(keycloakId: string): Promise<Accounts> {\r\n    try {\r\n      return this.repository.findByKeycloakId(keycloakId);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getAccountsByRoleId(roleId: string): Promise<Accounts[]> {\r\n    try {\r\n      return await this.repository.getAccountsByRoleId(roleId);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        'An error occurred while getting accounts by type ' + roleId\r\n      );\r\n    }\r\n  }\r\n\r\n  async add(\r\n    payload: AccountAddRequestPayload,\r\n    userId: string\r\n  ): Promise<Accounts> {\r\n    const isExisted = await this.repository.isExistedByUsername(\r\n      payload.username\r\n    );\r\n    if (isExisted) {\r\n      throw new BadRequestException('Username is duplicated!');\r\n    }\r\n    try {\r\n      const accountAdded = await this.repository.createNewAccount(\r\n        payload,\r\n        userId\r\n      );\r\n      await this.histService.createNew(accountAdded);\r\n      return accountAdded;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      if (\r\n        e.message.includes('constraint') &&\r\n        e.message.includes('devices_device_type_id_fk')\r\n      ) {\r\n        throw new BadRequestException(\r\n          'There is no device type with the provided id'\r\n        );\r\n      }\r\n      throw new BadRequestException('Error while creating a new device');\r\n    }\r\n  }\r\n\r\n  addAll(models: UsersDTO[]): Promise<Accounts[]> {\r\n    return Promise.resolve([]);\r\n  }\r\n\r\n  async updateById(\r\n    accountId: string,\r\n    id: string,\r\n    body: AccountUpdateProfilePayload\r\n  ) {\r\n    let account;\r\n    try {\r\n      account = await this.repository.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(\r\n        \"Account doesn't exist with the provided id\"\r\n      );\r\n    }\r\n\r\n    const data = await this.repository.findById(id);\r\n    if (data === undefined) {\r\n      throw new BadRequestException(\r\n        'This account is already deleted or disabled'\r\n      );\r\n    }\r\n\r\n    try {\r\n      const accountUpdated = await this.repository.updatePartially(\r\n        body,\r\n        account,\r\n        accountId\r\n      );\r\n      await this.histService.createNew(accountUpdated);\r\n      return accountUpdated;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error occurred while updating this account'\r\n      );\r\n    }\r\n  }\r\n\r\n  async disableById(accountId: string, id: string): Promise<any> {\r\n    const isExisted = await this.repository.existsById(id);\r\n    if (!isExisted) {\r\n      throw new BadRequestException(\r\n        'Account does not found with the provided id'\r\n      );\r\n    }\r\n    const isDisabled = await this.repository.checkIfAccountIsDisabledById(id);\r\n    if (isDisabled) {\r\n      throw new BadRequestException('This account is already disabled');\r\n    }\r\n    const isDeleted = await this.repository.checkIfAccountIsDeletedById(id);\r\n    if (isDeleted) {\r\n      throw new BadRequestException(\r\n        'This account is already deleted, can not disable'\r\n      );\r\n    }\r\n    try {\r\n      const account = await this.repository.disableById(accountId, id);\r\n      await this.histService.createNew(account);\r\n      return account;\r\n    } catch (e) {\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error occurred while disable this account'\r\n      );\r\n    }\r\n  }\r\n\r\n  async getDisabledAccounts(search: string): Promise<Accounts[]> {\r\n    try {\r\n      return await this.repository.findDisabledAccounts(search);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException('Error while getting disabled accounts');\r\n    }\r\n  }\r\n\r\n  async handleRestoreDisabledAccountById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Account does not found with the provided id'\r\n        );\r\n      }\r\n      const isDeleted = await this.repository.checkIfAccountIsDeletedById(id);\r\n      if (isDeleted) {\r\n        throw new BadRequestException('This account is already deleted');\r\n      }\r\n      const isDisabled = await this.repository.checkIfAccountIsDisabledById(id);\r\n      if (!isDisabled) {\r\n        throw new BadRequestException(\r\n          'This account ID is now active. Cannot restore it'\r\n        );\r\n      }\r\n      const account = await this.repository.restoreDisabledAccountById(\r\n        accountId,\r\n        id\r\n      );\r\n      await this.histService.createNew(account);\r\n      return account;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ??\r\n          'Error occurred while restore the disabled status of this account'\r\n      );\r\n    }\r\n  }\r\n\r\n  async deleteById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Account does not found with the provided id'\r\n        );\r\n      }\r\n      const isDeleted = await this.repository.checkIfAccountIsDeletedById(id);\r\n      if (isDeleted) {\r\n        throw new BadRequestException('This account is already deleted');\r\n      }\r\n      const account = await this.repository.deleteById(accountId, id);\r\n      await this.histService.createNew(account);\r\n      return account;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getDeletedAccounts(search: string): Promise<Accounts[]> {\r\n    try {\r\n      return await this.repository.findDeletedAccounts(search);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException('Error while getting deleted accounts');\r\n    }\r\n  }\r\n\r\n  async handleRestoreDeletedAccountById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Account does not found with the provided id'\r\n        );\r\n      }\r\n      const isDisabled = await this.repository.checkIfAccountIsDisabledById(id);\r\n      if (isDisabled) {\r\n        throw new BadRequestException('This account is already disabled');\r\n      }\r\n      const isDeleted = await this.repository.checkIfAccountIsDeletedById(id);\r\n      if (!isDeleted) {\r\n        throw new BadRequestException(\r\n          'This account ID is now active. Cannot restore it'\r\n        );\r\n      }\r\n\r\n      const account = await this.repository.restoreDeletedAccountById(\r\n        accountId,\r\n        id\r\n      );\r\n      await this.histService.createNew(account);\r\n      return account;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  syncUsersFromKeycloak(): Promise<any> {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  async uploadAvatarByAccountId(\r\n    image: Express.Multer.File,\r\n    id: string\r\n  ): Promise<void> {\r\n    try {\r\n      console.log(image);\r\n      const user = await this.repository.findById(id);\r\n      if (user.deletedAt || user.disabledAt) {\r\n        throw new BadRequestException('This account has been disabled');\r\n      }\r\n      const imageId = randomUUID();\r\n      await this.cloudinaryService.uploadImageAndGetURL(image.buffer, imageId);\r\n      const url = await this.cloudinaryService.getImageURLByFileName(imageId);\r\n      await this.repository.addAvatarURLById(url, id);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error while uploading avatar'\r\n      );\r\n    }\r\n  }\r\n\r\n  getAccountByKeycloakId(id: string) {\r\n    return this.repository\r\n      .findOneOrFail({\r\n        where: {\r\n          keycloakId: id,\r\n        },\r\n      })\r\n      .catch((e) => {\r\n        this.logger.error(e.message);\r\n        throw new BadRequestException('Error while retrieving account');\r\n      });\r\n  }\r\n\r\n  async getAccountRoleByKeycloakId(keycloakId: string): Promise<string> {\r\n    try {\r\n      return await this.repository.findRoleByKeycloakId(keycloakId);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async changePassword(\r\n    keycloakUser: KeycloakUserInstance,\r\n    payload: ChangeProfilePasswordRequest\r\n  ): Promise<void> {\r\n    try {\r\n      if (payload.password === payload.newPassword) {\r\n        throw new BadRequestException(\r\n          'Old password must not be the same with new password.'\r\n        );\r\n      }\r\n      await this.keycloakService.signInToKeycloak(\r\n        payload.username,\r\n        payload.password\r\n      );\r\n      await this.keycloakService.changePasswordByKeycloakId(\r\n        keycloakUser.sub,\r\n        payload.newPassword\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error while changing account password'\r\n      );\r\n    }\r\n  }\r\n\r\n  // async getUsernameByAccountId(id: string): Promise<string> {\r\n  //   try {\r\n  //     return await this.repository.findUsernameById(id);\r\n  //   } catch (e) {\r\n  //     this.logger.error(e);\r\n  //     throw new BadRequestException(e.message);\r\n  //   }\r\n  // }\r\n\r\n  async updateMyProfile(\r\n    keycloakUser: KeycloakUserInstance,\r\n    body: AccountUpdateProfilePayload\r\n  ): Promise<Accounts> {\r\n    try {\r\n      const user = await this.repository.findByKeycloakId(keycloakUser.sub);\r\n      if (!user) {\r\n        throw new BadRequestException(\r\n          'Account does not exist with the provided id'\r\n        );\r\n      }\r\n\r\n      return await this.repository.save({\r\n        ...user,\r\n        ...body,\r\n      });\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException('Error while update your profile.');\r\n    }\r\n  }\r\n\r\n  async changePasswordByKeycloakId(id: string, password: string) {\r\n    try {\r\n      const keycloakId = await this.repository.findKeycloakIdByAccountId(id);\r\n      await this.keycloakService.changePasswordByKeycloakId(\r\n        keycloakId,\r\n        password\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(\r\n        'Error while changing password by keycloak id'\r\n      );\r\n    }\r\n  }\r\n\r\n  async getAvatarURLByAccountId(accountId: string): Promise<string> {\r\n    return await this.repository.findAvatarURLById(accountId);\r\n  }\r\n\r\n  async getCurrentProfileInformation(keycloakId: string): Promise<Accounts> {\r\n    try {\r\n      return await this.repository.findProfileInformationById(keycloakId);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getUsernameList(): Promise<string[]> {\r\n    return this.repository.findUsername();\r\n  }\r\n\r\n  async getKeycloakIdByGoogleId(googleId: string): Promise<string> {\r\n    try {\r\n      return await this.repository.findKeycloakIdByGoogleId(googleId);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getAccountByGoogleId(googleId: string): Promise<Accounts> {\r\n    try {\r\n      return await this.repository.findByGoogleId(googleId);\r\n    } catch (e) {\r\n      this.logger.error(e.emssage);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async checkIfAccountAlreadyHasAvatarImage(\r\n    accountId: string\r\n  ): Promise<boolean> {\r\n    try {\r\n      const isExisted = this.repository.existsById(accountId);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Account does not exists with the provided id'\r\n        );\r\n      }\r\n      return await this.repository.checkIfUserAlreadyHasAvatar(accountId);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async addGoogleAvatarURLByAccountId(\r\n    googleImageURL: string,\r\n    accountId: string\r\n  ): Promise<void> {\r\n    try {\r\n      const result = await this.repository.addAvatarURLById(\r\n        googleImageURL,\r\n        accountId\r\n      );\r\n      if (result.affected < 1) {\r\n        throw new BadRequestException(\r\n          'Error while updating account google image'\r\n        );\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async updateGoogleIdByAccountEmail(\r\n    googleId: string,\r\n    email: string\r\n  ): Promise<void> {\r\n    try {\r\n      const result = await this.repository.updateGoogleIdByEmail(\r\n        googleId,\r\n        email\r\n      );\r\n      if (result.affected < 1) {\r\n        throw new HttpException(\r\n          'Invalid account. Please contract to administrator for more information',\r\n          HttpStatus.UNAUTHORIZED\r\n        );\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getAccountIdByKeycloakId(keycloakId: string) {\r\n    return this.repository.findIdByKeycloakId(keycloakId);\r\n  }\r\n\r\n  async getAccountRoleById(id: string) {\r\n    try {\r\n      return await this.repository.findRoleNameById(id);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n}\r\n","import {Injectable} from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  getData(): { message: string } {\r\n    return {message: 'pong!'};\r\n  }\r\n}\r\n","import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\r\nimport { AccountsService } from './accounts.service';\r\nimport { KeycloakService } from './keycloak.service';\r\nimport {\r\n  UsernamePasswordCredentials,\r\n  UsernamePasswordLoginResponse,\r\n} from '@app/models';\r\nimport { OAuth2Client } from 'google-auth-library';\r\nimport Exception from '../constants/exception.constant';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { Accounts } from '../models';\r\nimport { RoleService } from './role.service';\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n  private readonly logger = new Logger(AuthenticationService.name);\r\n\r\n  private readonly oAuthClientId: string;\r\n  private readonly oAuthAudience: string[];\r\n\r\n  constructor(\r\n    private readonly accountService: AccountsService,\r\n    private readonly configService: ConfigService,\r\n    private readonly keycloakService: KeycloakService\r\n  ) {\r\n    this.oAuthClientId = this.configService.get<string>(\r\n      'firebase.oauth.clientId'\r\n    );\r\n    this.oAuthAudience = this.configService.get<string[]>(\r\n      'firebase.oauth.audience'\r\n    );\r\n  }\r\n\r\n  async handleGoogleSignin(\r\n    idToken: string\r\n  ): Promise<UsernamePasswordLoginResponse> {\r\n    const client = new OAuth2Client(this.oAuthClientId);\r\n    try {\r\n      const decodedToken = await client.verifyIdToken({\r\n        idToken: idToken,\r\n        audience: this.oAuthAudience,\r\n      });\r\n\r\n      const userGoogleId = decodedToken.getUserId();\r\n\r\n      let keycloakToken = await this.accountService.getKeycloakIdByGoogleId(\r\n        userGoogleId\r\n      );\r\n      if (keycloakToken === undefined) {\r\n        await this.accountService.updateGoogleIdByAccountEmail(\r\n          userGoogleId,\r\n          decodedToken.getPayload().email\r\n        );\r\n        keycloakToken = await this.accountService.getKeycloakIdByGoogleId(\r\n          userGoogleId\r\n        );\r\n      }\r\n      let keycloakUser;\r\n      let user: Accounts;\r\n\r\n      if (keycloakToken !== undefined) {\r\n        keycloakUser =\r\n          await this.keycloakService.getAuthenticationTokenByMasterAccount(\r\n            keycloakToken\r\n          );\r\n        user = await this.accountService.getAccountByGoogleId(userGoogleId);\r\n        const doesUserHaveAvatar =\r\n          await this.accountService.checkIfAccountAlreadyHasAvatarImage(\r\n            user.id\r\n          );\r\n        if (!doesUserHaveAvatar) {\r\n          await this.accountService.addGoogleAvatarURLByAccountId(\r\n            decodedToken.getPayload().picture,\r\n            user.id\r\n          );\r\n        }\r\n      } else {\r\n        throw new HttpException(\r\n          'Invalid account. Please contract to administrator for more information',\r\n          HttpStatus.UNAUTHORIZED\r\n        );\r\n      }\r\n\r\n      const roleName = await this.accountService.getAccountRoleById(user.id);\r\n\r\n      return {\r\n        accessToken: keycloakUser.access_token,\r\n        refreshToken: keycloakUser.refresh_token,\r\n        id: user.id,\r\n        keycloakId: user.keycloakId,\r\n        username: user.username,\r\n        email: user.email,\r\n        phone: user.phone,\r\n        googleId: user.googleId,\r\n        role: roleName,\r\n        fullname: user.fullname,\r\n        avatar: user.avatar,\r\n      };\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      this.handleGoogleSignInException(e);\r\n    }\r\n  }\r\n\r\n  handleGoogleSignInException(e) {\r\n    if (`${e} `.includes('Token used too late')) {\r\n      throw new HttpException(\r\n        Exception.googleAccessTokenException.expired,\r\n        HttpStatus.BAD_REQUEST\r\n      );\r\n    } else if (`${e} `.includes('Invalid token signature')) {\r\n      throw new HttpException(\r\n        Exception.googleAccessTokenException.invalidToken,\r\n        HttpStatus.BAD_REQUEST\r\n      );\r\n    } else {\r\n      throw new HttpException(\r\n        Exception.googleAccessTokenException.invalidToken,\r\n        HttpStatus.BAD_REQUEST\r\n      );\r\n    }\r\n  }\r\n\r\n  async handleUsernamePasswordLogin(\r\n    credentials: UsernamePasswordCredentials\r\n  ): Promise<UsernamePasswordLoginResponse> {\r\n    const keycloakToken = await this.keycloakService.signInToKeycloak(\r\n      credentials.username,\r\n      credentials.password\r\n    );\r\n\r\n    const keycloakUser = await this.keycloakService.getUserInfo(\r\n      keycloakToken.access_token\r\n    );\r\n\r\n    const user = await this.accountService.findByKeycloakId(keycloakUser.sub);\r\n    const roleName = await this.accountService.getAccountRoleById(user.id);\r\n\r\n    return {\r\n      accessToken: keycloakToken.access_token,\r\n      refreshToken: keycloakToken.refresh_token,\r\n      id: user.id,\r\n      keycloakId: keycloakUser.sub,\r\n      username: user.username,\r\n      email: user.email,\r\n      phone: user.phone,\r\n      googleId: user.googleId,\r\n      role: roleName,\r\n      fullname: user.fullname,\r\n      avatar: user.avatar,\r\n    };\r\n  }\r\n}\r\n","\r\nexport abstract class BaseService<M, E, ID> {\r\n  abstract getAll(): Promise<E[]>;\r\n\r\n  abstract getAllByPagination(p: any): Promise<any>;\r\n\r\n  abstract addAll(models: M[]): Promise<E[]>;\r\n\r\n  abstract add(model: M): Promise<E>;\r\n\r\n  abstract deleteById(id: ID): Promise<void>;\r\n\r\n  abstract getById(id: ID): Promise<E>;\r\n\r\n  abstract updateById(model: M, id: ID): Promise<E>;\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { BookingReason } from '../models/booking-reason.entity';\r\nimport { BookingReasonHistRepository } from '../repositories/booking-reason-hist.repository';\r\nimport { BookingReasonHist } from '../models/booking-reason-hist.entity';\r\n\r\n@Injectable()\r\nexport class BookingReasonHistService {\r\n  constructor(private readonly repository: BookingReasonHistRepository) {}\r\n\r\n  async createNew(bookingReason: BookingReason): Promise<BookingReasonHist> {\r\n    return this.repository.createNew(bookingReason);\r\n  }\r\n\r\n  async deleteAllHist(id: string) {\r\n    return this.repository.deleteAllHist(id);\r\n   }\r\n}\r\n","import { BadRequestException, Injectable, Logger } from '@nestjs/common';\r\nimport { BookingReasonRepository } from '../repositories/booking-reason.repository';\r\nimport { BookingReasonHistService } from './booking-reason-hist.service';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { BookingReason } from '../models/booking-reason.entity';\r\nimport { Pagination } from 'nestjs-typeorm-paginate';\r\nimport { BookingReasonUpdateRequestPayload } from '../payload/request/booking-reason.request.payload';\r\n\r\n@Injectable()\r\nexport class BookingReasonService {\r\n  private readonly logger = new Logger(BookingReasonService.name);\r\n\r\n  constructor(\r\n    private readonly repository: BookingReasonRepository,\r\n    private readonly histService: BookingReasonHistService\r\n  ) {}\r\n\r\n  async getBookingReasonTypesWithPagination(pagination: PaginationParams) {\r\n    try {\r\n      if (!pagination || !pagination.page) {\r\n        return await this.repository.findAll();\r\n      } else {\r\n        return await this.repository.findByPagination(pagination);\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getBookingReasonNames() {\r\n    try {\r\n      return this.repository.findBookingReasonName();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getBookingReasonById(id: string): Promise<BookingReason> {\r\n    try {\r\n      return await this.repository.findById(id);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async createNewBookingReason(\r\n    accountId: string,\r\n    payload: BookingReason\r\n  ): Promise<BookingReason> {\r\n    try {\r\n      const bookingReason = await this.repository.createNew(accountId, {\r\n        name: payload.name,\r\n        description: payload.description,\r\n      });\r\n\r\n      await this.histService.createNew(bookingReason);\r\n      return bookingReason;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async updateBookingReasonById(\r\n    accountId: string,\r\n    updatePayload: BookingReasonUpdateRequestPayload,\r\n    id: string\r\n  ) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Room type does not found with the provided id'\r\n        );\r\n      }\r\n      const bookingReason = await this.repository.updateById(\r\n        accountId,\r\n        updatePayload,\r\n        id\r\n      );\r\n      await this.histService.createNew(bookingReason);\r\n      return bookingReason;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async deleteBookingReasonById(accountId: string, id: string) {\r\n    try {\r\n      const data = await this.repository.findById(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException('This reason already deleted!');\r\n      }\r\n      const reason = await this.repository.deleteById(accountId, id);\r\n      await this.histService.createNew(reason);\r\n      return reason;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getDeletedReasons(search: string) {\r\n    try {\r\n      return this.repository.findDeletedByPagination(search);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async restoreDeletedReasonById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Reason does not exist with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data !== undefined) {\r\n        throw new BadRequestException(\r\n          'This reason ID is now active. Cannot restore'\r\n        );\r\n      }\r\n      const reason = await this.repository.restoreDeletedById(accountId, id);\r\n      await this.histService.createNew(reason);\r\n      return reason;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async permanentlyDeleteReasonById(id: string) {\r\n    try {\r\n      const data = await this.repository.findById(id);\r\n      if (data !== undefined) {\r\n        throw new BadRequestException(\r\n          'Please delete this type after permanently delete'\r\n        );\r\n      } else {\r\n        await this.histService.deleteAllHist(id);\r\n        return this.repository.permanentlyDeleteById(id);\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n}\r\n","import { BadRequestException, Injectable, Logger, Scope } from '@nestjs/common';\r\nimport { DataSource, QueryRunner } from 'typeorm';\r\nimport { BookingRequestDevices } from '../models';\r\nimport { BookingRoomDevicesRepository } from '../repositories/booking-request-devices.repository';\r\n\r\n@Injectable()\r\nexport class BookingRoomDevicesService {\r\n  private readonly logger = new Logger(BookingRoomDevicesService.name);\r\n  constructor(\r\n    private readonly dataSource: DataSource,\r\n    private readonly repository: BookingRoomDevicesRepository\r\n  ) {}\r\n\r\n  async findByRequestId(id: string) {\r\n    try {\r\n      return await this.repository.findByRequestId(id);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async addDeviceToRequest(\r\n    bookingRequestId: string,\r\n    payload: {\r\n      value: string;\r\n      quantity: number;\r\n    }[],\r\n    queryRunner: QueryRunner\r\n  ) {\r\n    try {\r\n      if (payload) {\r\n        const bookingRequestDevices: BookingRequestDevices[] = [];\r\n        for (let i=0; i< payload.length; i++) {\r\n          const result = await this.repository.addDeviceToRequest(\r\n            bookingRequestId,\r\n            payload[i].value,\r\n            payload[i].quantity,\r\n            queryRunner\r\n          );\r\n          bookingRequestDevices.push(result);\r\n        }\r\n        return bookingRequestDevices;\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { QueryRunner } from 'typeorm';\r\nimport { BookingRequest, BookingRequestHist} from '../models';\r\nimport { BookingRequestHistRepository } from '../repositories/booking-request-hist.repository';\r\n\r\n@Injectable()\r\nexport class BookingRequestHistService {\r\n    constructor(private readonly repository: BookingRequestHistRepository) {}\r\n\r\n  async createNew(request: BookingRequest, queryRunner: QueryRunner): Promise<BookingRequestHist> {\r\n    return this.repository.createNew(request, queryRunner);\r\n  }\r\n}\r\n","import {\r\n  BadRequestException,\r\n  forwardRef,\r\n  Inject,\r\n  Injectable,\r\n  Logger,\r\n  Scope,\r\n} from '@nestjs/common';\r\nimport { RoomsService } from './rooms.service';\r\nimport { BookingRoomRepository } from '../repositories';\r\nimport { BookingRoomResponseDTO } from '../dto/booking-room.response.dto';\r\nimport { WishlistBookingRoomResponseDTO } from '../dto/wishlist-booking-room.response.dto';\r\nimport { RoomWishlistService } from './room-wishlist.service';\r\nimport { WishlistBookingRoomRequestDTO } from '../dto/wishlist-booking-room.request.dto';\r\nimport { BookingRoomsFilterRequestPayload } from '../payload/request/booking-rooms.request.payload';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { RemoveWishlistRequest } from '../payload/request/remove-from-booking-room-wishlist.request.payload';\r\nimport { DevicesService } from './devices.service';\r\nimport { AccountsService } from './accounts.service';\r\nimport { ChooseBookingRoomFilterPayload } from '../payload/request/choose-booking-room-filter.payload';\r\nimport { GetBookingRoomsPaginationPayload } from '../payload/request/get-booking-rooms-pagination.payload';\r\nimport { BookingRequest, Devices } from '../models';\r\nimport { RoomTypeService } from './room-type.service';\r\nimport { BookingRequestAddRequestPayload } from '../payload/request/booking-request-add.payload';\r\nimport { BookingRequestHistService } from './booking-room-hist.service';\r\nimport { SlotService } from './slot.service';\r\nimport dayjs = require('dayjs');\r\nimport { DataSource, QueryRunner } from 'typeorm';\r\nimport { BookingRoomDevicesService } from './booking-request-devices.service';\r\nimport { GetAllBookingRequestsFilter } from '../payload/request/get-all-booking-rooms-filter.payload';\r\nimport { NotificationService } from './notification.service';\r\n\r\n@Injectable()\r\nexport class BookingRoomService {\r\n  private readonly logger = new Logger(BookingRoomService.name);\r\n\r\n  constructor(\r\n    private readonly dataSource: DataSource,\r\n    private readonly repository: BookingRoomRepository,\r\n    private readonly notificationService: NotificationService,\r\n    private readonly roomWishlistService: RoomWishlistService,\r\n    private readonly accountService: AccountsService,\r\n    @Inject(forwardRef(() => SlotService))\r\n    private readonly slotService: SlotService,\r\n    @Inject(forwardRef(() => RoomsService))\r\n    private readonly roomService: RoomsService,\r\n    @Inject(forwardRef(() => RoomTypeService))\r\n    private readonly roomTypeService: RoomTypeService,\r\n    private readonly bookingRoomDeviceService: BookingRoomDevicesService,\r\n\r\n    private readonly histService: BookingRequestHistService\r\n  ) {}\r\n\r\n  async getStatistics() {\r\n    const result = {\r\n      totalTime: {\r\n        total: 0,\r\n        booked: 0,\r\n        cancelled: 0,\r\n      },\r\n      month: {\r\n        total: 0,\r\n        booked: 0,\r\n        cancelled: 0,\r\n      },\r\n      week: {\r\n        total: 0,\r\n        booked: 0,\r\n        cancelled: 0,\r\n      },\r\n      day: {\r\n        total: 0,\r\n        booked: 0,\r\n        cancelled: 0,\r\n      },\r\n    };\r\n    const today = new Date().setHours(0, 0, 0, 0);\r\n    const curr = new Date();\r\n    const firstDayInWeek = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week\r\n    const lastDayInWeek = firstDayInWeek + 6; // last day is the first day + 6\r\n    const sunday = new Date(curr.setDate(firstDayInWeek)).setHours(0, 0, 0, 0);\r\n    const satuday = new Date(curr.setDate(lastDayInWeek)).setHours(0, 0, 0, 0);\r\n    const firstDayInMonth = new Date(curr.setDate(1)).setHours(0, 0, 0, 0);\r\n    const lastDayInMonth = new Date(\r\n      curr.getFullYear(),\r\n      curr.getMonth() + 1,\r\n      0\r\n    ).setHours(0, 0, 0, 0);\r\n    const allRequest = await this.repository.getAllRequest();\r\n    for (let i = 0; i < allRequest.length; i++) {\r\n      const checkinDate = allRequest[i].checkinDate.setHours(0, 0, 0, 0);\r\n      if (checkinDate === today) {\r\n        result.day.total += 1;\r\n      }\r\n      if (checkinDate >= sunday && checkinDate <= satuday) {\r\n        result.week.total += 1;\r\n      }\r\n      if (checkinDate >= firstDayInMonth && checkinDate <= lastDayInMonth) {\r\n        result.month.total += 1;\r\n      }\r\n      result.totalTime.total += 1;\r\n      if (\r\n        allRequest[i].status === 'BOOKED' ||\r\n        allRequest[i].status === 'CHECKED_ID' ||\r\n        allRequest[i].status === 'CHECKED_OUT'\r\n      ) {\r\n        if (checkinDate === today) {\r\n          result.day.booked += 1;\r\n        }\r\n        if (checkinDate >= sunday && checkinDate <= satuday) {\r\n          result.week.booked += 1;\r\n        }\r\n        if (checkinDate >= firstDayInMonth && checkinDate <= lastDayInMonth) {\r\n          result.month.booked += 1;\r\n        }\r\n        result.totalTime.booked += 1;\r\n      } else {\r\n        if (checkinDate === today) {\r\n          result.day.cancelled += 1;\r\n        }\r\n        if (checkinDate >= sunday && checkinDate <= satuday) {\r\n          result.week.cancelled += 1;\r\n        }\r\n        if (checkinDate >= firstDayInMonth && checkinDate <= lastDayInMonth) {\r\n          result.month.cancelled += 1;\r\n        }\r\n        result.totalTime.cancelled += 1;\r\n      }\r\n    }\r\n    console.log('TODAY: ', dayjs(today).format('DD-MM_YYYY'));\r\n    return result;\r\n  }\r\n\r\n  getCountRequestInWeekOfUser = async (id: string, date: string) => {\r\n    try {\r\n      const result = {\r\n        usedBookingTime: 0,\r\n        totalBookingTime: 3,\r\n      };\r\n      result.usedBookingTime = Number(\r\n        await this.repository.getCountRequestInWeekOfUser(id, date)\r\n      );\r\n      return result;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException('Error while getting booking rooms');\r\n    }\r\n  };\r\n\r\n  async getBookingRooms(\r\n    payload: BookingRoomsFilterRequestPayload\r\n  ): Promise<BookingRoomResponseDTO[]> {\r\n    try {\r\n      const rooms = await this.roomService.getAllWithoutPagination();\r\n      const result: BookingRoomResponseDTO[] = [];\r\n      let counter = 1;\r\n      for (let i = 0; i < rooms.length; i++) {\r\n        for (let j = 1; j <= 6; j++) {\r\n          result.push({\r\n            stt: counter++,\r\n            roomId: rooms[i].id,\r\n            roomName: rooms[i].name,\r\n            slot: j,\r\n          });\r\n        }\r\n      }\r\n      console.log(payload.search);\r\n      console.log(\r\n        result.filter((bookingRoom) =>\r\n          bookingRoom.roomName.includes(payload.search)\r\n        )\r\n      );\r\n      return result.filter((bookingRoom) =>\r\n        bookingRoom.roomName.includes(payload.search)\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException('Error while getting booking rooms');\r\n    }\r\n  }\r\n\r\n  getRequestByRoomId(roomId: string) {\r\n    try {\r\n      return this.repository.getRequestByRoomId(roomId);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(\r\n        'An error occurred while getting request by room id ' + roomId\r\n      );\r\n    }\r\n  }\r\n\r\n  getRequestBySlotId(slotId: string) {\r\n    try {\r\n      return this.repository.getRequestBySlotId(slotId);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getRequestByDeviceId(deviceId: string) {\r\n    try {\r\n      return this.repository.getRequestByDeviceId(deviceId);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getRequestBookingByAccountId(\r\n    accountId: string\r\n  ): Promise<BookingRequest[]> {\r\n    try {\r\n      return await this.repository.getRequestBookingByAccountId(accountId);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        'An error occurred while getting request by account id ' + accountId\r\n      );\r\n    }\r\n  }\r\n\r\n  async getDevicesUseInRequest(requestId: string): Promise<BookingRequest[]> {\r\n    try {\r\n      return await this.bookingRoomDeviceService.findByRequestId(requestId);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        'An error occurred while getting request by account id ' + requestId\r\n      );\r\n    }\r\n  }\r\n\r\n  getWishlistBookingRooms(\r\n    roomName: string,\r\n    slotFrom: number,\r\n    slotTo: number,\r\n    accountId: string\r\n  ): Promise<WishlistBookingRoomResponseDTO[]> {\r\n    try {\r\n      return this.roomWishlistService.findAllWishlistBookingRooms(\r\n        roomName,\r\n        slotFrom,\r\n        slotTo,\r\n        accountId\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException('An error occurred while adding this room');\r\n    }\r\n  }\r\n\r\n  async addToBookingRoomWishlist(\r\n    accountId: string,\r\n    wishlist: WishlistBookingRoomRequestDTO\r\n  ) {\r\n    try {\r\n      return await this.roomWishlistService.addToWishlist(accountId, wishlist);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error while adding to booking room wish list'\r\n      );\r\n    }\r\n  }\r\n\r\n  async removeFromBookingRoomWishlist(\r\n    user: KeycloakUserInstance,\r\n    payload: RemoveWishlistRequest\r\n  ) {\r\n    try {\r\n      return await this.roomWishlistService.removeFromWishlist(\r\n        user.account_id,\r\n        payload\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error while removing from booking room wishlist'\r\n      );\r\n    }\r\n  }\r\n\r\n  // getBookingRoomDevices(name: string, type: string, sort: string) {\r\n  //   return this.deviceService.getBookingRoomDeviceList(name, type, sort);\r\n  // }\r\n\r\n  getUsernameList(): Promise<string[]> {\r\n    return this.accountService.getUsernameList();\r\n  }\r\n\r\n  getRoomNames(): Promise<Devices[]> {\r\n    return this.roomService.getRoomNames();\r\n  }\r\n\r\n  async getChoosingBookingRooms(filter: string) {\r\n    try {\r\n      const payload = filter\r\n        ? (JSON.parse(filter) as ChooseBookingRoomFilterPayload)\r\n        : ({\r\n            roomName: {\r\n              name: '',\r\n              sort: 'ASC',\r\n            },\r\n            roomType: {\r\n              name: 'e6f085ec',\r\n              sort: 'ASC',\r\n            },\r\n          } as ChooseBookingRoomFilterPayload);\r\n      if (payload.roomType.name.length > 0) {\r\n        const isExisted = await this.roomTypeService.existsById(\r\n          payload.roomType.name\r\n        );\r\n        if (!isExisted) {\r\n          throw new BadRequestException(\r\n            'Room type does not exist with provided id'\r\n          );\r\n        }\r\n      }\r\n      return this.roomService.getRoomsFilterByNameAndType(payload);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getAllBookingRoomsPagination(\r\n    payload: GetBookingRoomsPaginationPayload,\r\n    accountId\r\n  ) {\r\n    try {\r\n      const role = await this.accountService.getRoleOfAccount(accountId);\r\n      let filterByAccountId = null;\r\n      if (role.role_name === 'Staff') {\r\n        filterByAccountId = accountId;\r\n      }\r\n      return this.repository.findByPaginationPayload(\r\n        payload,\r\n        filterByAccountId\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getBookingByRoomInWeek(payload: { roomId: string; date: string }) {\r\n    try {\r\n      return this.repository.getBookingByRoomInWeek(payload);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getRequestPendingOfRoomInDay(\r\n    roomId: string,\r\n    requestId: string,\r\n    date: string\r\n  ) {\r\n    try {\r\n      return this.repository.getRequestPendingOfRoomInDay(\r\n        roomId,\r\n        requestId,\r\n        date\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getRequestOfRoomWithSameSlot(payload: {\r\n    roomId: string;\r\n    date: string;\r\n    requestId: string;\r\n    checkinSlotId: string;\r\n    checkoutSlotId: string;\r\n  }) {\r\n    try {\r\n      const slotIn = await this.slotService.getNumOfSlot(payload.checkinSlotId);\r\n      const slotOut = await this.slotService.getNumOfSlot(\r\n        payload.checkoutSlotId\r\n      );\r\n      const listRequestPending = await this.getRequestPendingOfRoomInDay(\r\n        payload.roomId,\r\n        payload.requestId,\r\n        payload.date\r\n      );\r\n      if (listRequestPending.length > 0) {\r\n        const listResult = listRequestPending.filter((request) => {\r\n          for (let j = request.slotIn; j <= request.slotOut; j++) {\r\n            if (j >= slotIn.slotNum && j <= slotOut.slotNum) {\r\n              return request;\r\n            }\r\n          }\r\n        });\r\n        return listResult;\r\n      }\r\n      return null;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getListRequestBookedInDayAndSlot(payload: {\r\n    date: string;\r\n    checkinSlotId: string;\r\n    checkoutSlotId: string;\r\n  }) {\r\n    try {\r\n      const listRequestBookedInDay =\r\n        await this.repository.getRequestBookedInDay(payload.date);\r\n\r\n      if (listRequestBookedInDay.length > 0) {\r\n        const slotIn = await this.slotService.getNumOfSlot(\r\n          payload.checkinSlotId\r\n        );\r\n        const slotOut = await this.slotService.getNumOfSlot(\r\n          payload.checkoutSlotId\r\n        );\r\n\r\n        const listRequestBookedInDayAndSlot = listRequestBookedInDay.filter(\r\n          (request) => {\r\n            for (let j = request.slotStart; j <= request.slotEnd; j++) {\r\n              if (j >= slotIn.slotNum && j <= slotOut.slotNum) {\r\n                return request;\r\n              }\r\n            }\r\n          }\r\n        );\r\n        console.log('LIST ROOM BOOKED: ', listRequestBookedInDayAndSlot);\r\n        return listRequestBookedInDayAndSlot;\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getListRequestBookedInMultiDay(payload: {\r\n    dateStart: string;\r\n    dateEnd: string;\r\n    checkinSlot: number;\r\n    checkoutSlot: number;\r\n  }) {\r\n    try {\r\n      const listRequestBookedInMultiDay =\r\n        await this.repository.getRequestBookedInMultiDay(\r\n          payload.dateStart,\r\n          payload.dateEnd\r\n        );\r\n\r\n      if (listRequestBookedInMultiDay.length > 0) {\r\n        const listRequestBookedInMultiDayAndSlot =\r\n          listRequestBookedInMultiDay.filter((request) => {\r\n            for (let j = request.slotStart; j <= request.slotEnd; j++) {\r\n              if (j >= payload.checkinSlot && j <= payload.checkoutSlot) {\r\n                return request;\r\n              }\r\n            }\r\n          });\r\n        return listRequestBookedInMultiDayAndSlot;\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getRoomFreeAtTime(payload: {\r\n    date: string;\r\n    checkinSlotId: string;\r\n    checkoutSlotId: string;\r\n  }) {\r\n    try {\r\n      const listRequestBookedInDaySameSlot =\r\n        await this.getListRequestBookedInDayAndSlot(payload);\r\n      const listRoomBookedInDaySameSlot = [];\r\n      if (listRequestBookedInDaySameSlot?.length > 0) {\r\n        listRequestBookedInDaySameSlot.map((request) => {\r\n          listRoomBookedInDaySameSlot.push(request.roomId);\r\n        });\r\n      }\r\n      const result = await this.roomService.filterRoomFreeByRoomBooked(\r\n        listRoomBookedInDaySameSlot\r\n      );\r\n      console.log('LIST ROOM FREE: ', result);\r\n      return result;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getRoomFreeAtMultiDate(payload: {\r\n    dateStart: string;\r\n    dateEnd: string;\r\n    checkinSlot: number;\r\n    checkoutSlot: number;\r\n  }) {\r\n    try {\r\n      const listRequestBookedInMultiDay =\r\n        await this.getListRequestBookedInMultiDay(payload);\r\n      const listRoomBookedInMultiDaySameSlot = [];\r\n      if (listRequestBookedInMultiDay?.length > 0) {\r\n        listRequestBookedInMultiDay.map((request) => {\r\n          listRoomBookedInMultiDaySameSlot.push(request.roomId);\r\n        });\r\n      }\r\n      const result = await this.roomService.filterRoomFreeByRoomBooked(\r\n        listRoomBookedInMultiDaySameSlot\r\n      );\r\n      return result;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getCurrentRoomBookingList(accountId: string) {\r\n    try {\r\n      return this.repository.findByCurrentBookingListAndAccountId(accountId);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getCurrentRoomBookingDetail(accountId: string, id: string) {\r\n    try {\r\n      return this.repository.findByIdAndAccountId(accountId, id);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getBookingRoomById(id: string) {\r\n    try {\r\n      const requestInfo = await this.repository.findById(id);\r\n      if (requestInfo) {\r\n        const listDevice = await this.bookingRoomDeviceService.findByRequestId(\r\n          id\r\n        );\r\n        return {\r\n          ...requestInfo,\r\n          listDevice: listDevice,\r\n        };\r\n      } else {\r\n        throw new BadRequestException('Not found request with provided id');\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getCountRequestBookingPending() {\r\n    try {\r\n      return this.repository.getCountRequestBookingPending();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async addNewRequest(\r\n    payload: BookingRequestAddRequestPayload,\r\n    userId: string\r\n  ): Promise<BookingRequest> {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n    try {\r\n      const role = await this.accountService.getRoleOfAccount(userId);\r\n      const slotIn = await this.slotService.getNumOfSlot(payload.checkinSlot);\r\n      const slotOut = await this.slotService.getNumOfSlot(payload.checkoutSlot);\r\n\r\n      const dateChoosed = new Date(payload.checkinDate).setHours(0, 0, 0, 0);\r\n      const today = new Date().setHours(0, 0, 0, 0);\r\n\r\n      if (dateChoosed < today) {\r\n        throw new BadRequestException(\r\n          'Are you trying to make a booking in the past? Are you crazy?'\r\n        );\r\n      } else if (dateChoosed === today) {\r\n        const timeCheckin = slotIn.timeStart;\r\n        const timeNow = dayjs(new Date()).format('HH:mm:ss');\r\n\r\n        if (timeCheckin < timeNow) {\r\n          throw new BadRequestException('The slot you chose is now over!');\r\n        }\r\n      }\r\n      if (slotIn.slotNum > slotOut.slotNum) {\r\n        throw new BadRequestException(\r\n          'Have error when booking, slot start > slot end'\r\n        );\r\n      }\r\n\r\n      if (payload.bookedFor !== userId && role.role_name === 'Staff') {\r\n        throw new BadRequestException(\r\n          'You are not authorized to make a booking for other users!'\r\n        );\r\n      }\r\n\r\n      let alreadyBookedOtherRoom = '';\r\n      const listRequestBookedInDayOfUser =\r\n        await this.repository.getRequestBookedInDayOfUser(\r\n          payload.checkinDate,\r\n          payload.bookedFor || userId\r\n        );\r\n      if (listRequestBookedInDayOfUser.length > 0) {\r\n        listRequestBookedInDayOfUser.map(async (request) => {\r\n          for (let j = request.slotIn; j <= request.slotOut; j++) {\r\n            if (j >= slotIn.slotNum && j <= slotOut.slotNum) {\r\n              alreadyBookedOtherRoom = request.roomName;\r\n              break;\r\n            }\r\n          }\r\n        });\r\n      }\r\n      if (alreadyBookedOtherRoom !== '') {\r\n        throw new BadRequestException(\r\n          payload.bookedFor\r\n            ? `This user have bookings for ${alreadyBookedOtherRoom} at same slot!`\r\n            : `You already have bookings for ${alreadyBookedOtherRoom} at same slot!`\r\n        );\r\n      }\r\n\r\n      const listRequestPeningAndBookedInDay =\r\n        await this.repository.getBookingPendingAndBookedInDay(\r\n          payload.checkinDate,\r\n          payload.roomId\r\n        );\r\n\r\n      let status = 'PENDING';\r\n      let haveRequestBooked = false;\r\n\r\n      if (role.role_name === 'Librarian' || role.role_name === 'System Admin') {\r\n        status = 'BOOKED';\r\n      }\r\n      if (role.role_name === 'Staff') {\r\n        const countRequestInWeek = Number(\r\n          await this.repository.getCountRequestInWeekOfUser(\r\n            userId,\r\n            payload.checkinDate\r\n          )\r\n        );\r\n        if (countRequestInWeek >= 3) {\r\n          throw new BadRequestException(\r\n            'You have run out of bookings for this week'\r\n          );\r\n        }\r\n      }\r\n      if (listRequestPeningAndBookedInDay.length > 0) {\r\n        listRequestPeningAndBookedInDay.map(async (request) => {\r\n          for (let j = request.slotIn; j <= request.slotOut; j++) {\r\n            if (j >= slotIn.slotNum && j <= slotOut.slotNum) {\r\n              if (request.status === 'PENDING') {\r\n                // j is slot of request pending\r\n                if (\r\n                  role.role_name === 'Librarian' ||\r\n                  role.role_name === 'System Admin'\r\n                ) {\r\n                  const reason =\r\n                    'This room is given priority for another request';\r\n                  this.repository.rejectById(\r\n                    userId,\r\n                    request.id,\r\n                    reason,\r\n                    queryRunner\r\n                  );\r\n                  break;\r\n                }\r\n              } else if (request.status === 'BOOKED') {\r\n                haveRequestBooked = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (haveRequestBooked) {\r\n        throw new BadRequestException(\r\n          'Already have request booked in this slot, try another slot'\r\n        );\r\n      }\r\n\r\n      const request = await this.repository.createNewRequest(\r\n        payload,\r\n        userId,\r\n        status,\r\n        queryRunner\r\n      );\r\n\r\n      await this.bookingRoomDeviceService.addDeviceToRequest(\r\n        request.id,\r\n        payload.listDevice,\r\n        queryRunner\r\n      );\r\n\r\n      // await this.histService.createNew(request, queryRunner);\r\n\r\n      await queryRunner.commitTransaction();\r\n\r\n      return request;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      await queryRunner.rollbackTransaction();\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async addMultiRequest(\r\n    payload: BookingRequestAddRequestPayload,\r\n    userId: string\r\n  ): Promise<BookingRequest[]> {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n    try {\r\n      const role = await this.accountService.getRoleOfAccount(userId);\r\n      const slotIn = await this.slotService.getNumOfSlot(payload.checkinSlot);\r\n      const slotOut = await this.slotService.getNumOfSlot(payload.checkoutSlot);\r\n\r\n      const dateChoosed = new Date(payload.checkinDate).setHours(0, 0, 0, 0);\r\n      const today = new Date().setHours(0, 0, 0, 0);\r\n\r\n      if (dateChoosed < today) {\r\n        throw new BadRequestException(\r\n          'Are you trying to make a booking in the past? Are you crazy?'\r\n        );\r\n      } else if (dateChoosed === today) {\r\n        const timeCheckin = slotIn.timeStart;\r\n        const timeNow = dayjs(new Date()).format('HH:mm:ss');\r\n\r\n        if (timeCheckin < timeNow) {\r\n          throw new BadRequestException('The slot you chose is now over!');\r\n        }\r\n      }\r\n      if (slotIn.slotNum > slotOut.slotNum) {\r\n        throw new BadRequestException(\r\n          'Have error when booking, slot start > slot end'\r\n        );\r\n      }\r\n\r\n      const fromDate = new Date(payload.checkinDate);\r\n      const toDate = new Date(payload.checkoutDate);\r\n\r\n      if (fromDate > toDate) {\r\n        throw new BadRequestException(\r\n          'Have error when booking, from date > to date'\r\n        );\r\n      }\r\n\r\n      let alreadyBookedOtherRoom = [];\r\n      const listRequestBookedInDayOfUser = [];\r\n      for (\r\n        let i = new Date(fromDate);\r\n        i <= toDate;\r\n        i.setDate(i.getDate() + 1)\r\n      ) {\r\n        const result = await this.repository.getRequestBookedInDayOfUser(\r\n          dayjs(i).format('YYYY-MM-DD'),\r\n          userId\r\n        );\r\n        if (result.length > 0) {\r\n          listRequestBookedInDayOfUser.push(...result);\r\n        }\r\n      }\r\n\r\n      if (listRequestBookedInDayOfUser.length > 0) {\r\n        listRequestBookedInDayOfUser.map(async (request) => {\r\n          for (let j = request.slotIn; j <= request.slotOut; j++) {\r\n            if (j >= slotIn.slotNum && j <= slotOut.slotNum) {\r\n              alreadyBookedOtherRoom = [\r\n                ...alreadyBookedOtherRoom,\r\n                request.roomName,\r\n              ];\r\n              break;\r\n            }\r\n          }\r\n        });\r\n      }\r\n      if (alreadyBookedOtherRoom.length > 0) {\r\n        throw new BadRequestException(\r\n          `You already have bookings for ${alreadyBookedOtherRoom} at same slot!`\r\n        );\r\n      }\r\n\r\n      const listRequestPeningAndBookedInDay =\r\n        await this.repository.getBookingPendingAndBookedInMultiDay(\r\n          payload.checkinDate,\r\n          payload.checkoutDate,\r\n          payload.roomId\r\n        );\r\n\r\n      for (\r\n        let i = new Date(fromDate);\r\n        i <= toDate;\r\n        i.setDate(i.getDate() + 1)\r\n      ) {\r\n        const result = await this.repository.getRequestBookedInDayOfUser(\r\n          dayjs(i).format('YYYY-MM-DD'),\r\n          userId\r\n        );\r\n        if (result.length > 0) {\r\n          listRequestBookedInDayOfUser.push(...result);\r\n        }\r\n      }\r\n\r\n      let status = 'PENDING';\r\n      let haveRequestBooked = false;\r\n\r\n      if (role.role_name === 'Librarian' || role.role_name === 'System Admin') {\r\n        status = 'BOOKED';\r\n      }\r\n\r\n      if (listRequestPeningAndBookedInDay.length > 0) {\r\n        listRequestPeningAndBookedInDay.map(async (request) => {\r\n          for (let j = request.slotIn; j <= request.slotOut; j++) {\r\n            if (j >= slotIn.slotNum && j <= slotOut.slotNum) {\r\n              if (request.status === 'PENDING') {\r\n                // j is slot of request pending\r\n                if (\r\n                  role.role_name === 'Librarian' ||\r\n                  role.role_name === 'System Admin'\r\n                ) {\r\n                  const reason =\r\n                    'This room is given priority for another request';\r\n                  this.repository.rejectById(\r\n                    userId,\r\n                    request.id,\r\n                    reason,\r\n                    queryRunner\r\n                  );\r\n                  break;\r\n                }\r\n              } else if (request.status === 'BOOKED') {\r\n                haveRequestBooked = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (haveRequestBooked) {\r\n        throw new BadRequestException(\r\n          'Already have request booked in this slot, try another slot'\r\n        );\r\n      }\r\n\r\n      const listRequestAdded = [];\r\n\r\n      for (\r\n        let z = new Date(fromDate);\r\n        z <= toDate;\r\n        z.setDate(z.getDate() + 1)\r\n      ) {\r\n        const newPayload = {\r\n          ...payload,\r\n          checkinDate: dayjs(z).format('YYYY-MM-DD'),\r\n        };\r\n\r\n        const request = await this.repository.createNewRequest(\r\n          newPayload,\r\n          userId,\r\n          status,\r\n          queryRunner\r\n        );\r\n        listRequestAdded.push(request);\r\n        await this.bookingRoomDeviceService.addDeviceToRequest(\r\n          request.id,\r\n          payload.listDevice,\r\n          queryRunner\r\n        );\r\n        // await this.histService.createNew(request, queryRunner);\r\n      }\r\n\r\n      await queryRunner.commitTransaction();\r\n\r\n      return listRequestAdded;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      await queryRunner.rollbackTransaction();\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async acceptById(accountId: string, id: string) {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      const request = await this.repository.getRequest(id);\r\n      if (!request) {\r\n        throw new BadRequestException(\r\n          'Request does not found with the provided id'\r\n        );\r\n      }\r\n      const isAccepted = await this.repository.isAcceptById(id);\r\n      if (isAccepted) {\r\n        throw new BadRequestException('Request already accepted!');\r\n      }\r\n\r\n      const isCancelled = await this.repository.isCancelledById(id);\r\n      if (isCancelled) {\r\n        throw new BadRequestException('Request already cancelled!');\r\n      }\r\n\r\n      const listRequestSameSlot = await this.getRequestOfRoomWithSameSlot({\r\n        roomId: request.roomId,\r\n        date: dayjs(request.checkinDate).format('YYYY-MM-DD'),\r\n        requestId: request.id,\r\n        checkinSlotId: request.checkinSlotId,\r\n        checkoutSlotId: request.checkoutSlotId,\r\n      });\r\n      if (listRequestSameSlot) {\r\n        const reason = 'This room is given priority for another request';\r\n        listRequestSameSlot.map((request) => {\r\n          return this.repository.rejectById(\r\n            accountId,\r\n            request.id,\r\n            reason,\r\n            queryRunner\r\n          );\r\n        });\r\n      }\r\n      const requestAccepted = await this.repository.acceptById(\r\n        accountId,\r\n        id,\r\n        queryRunner\r\n      );\r\n\r\n      await this.notificationService.sendAcceptRequestNotification(\r\n        dayjs(request.checkinDate).format('DD-MM-YYYY'),\r\n        request.checkinSlotName,\r\n        request.checkoutSlotName,\r\n        request.roomName,\r\n        request.requestedBy,\r\n        queryRunner\r\n      );\r\n\r\n      // await this.histService.createNew(requestAccepted);\r\n      await queryRunner.commitTransaction();\r\n      return requestAccepted;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      await queryRunner.rollbackTransaction();\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error occurred while accept request'\r\n      );\r\n    }\r\n  }\r\n\r\n  async rejectById(accountId: string, id: string, reason: string) {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Request does not found with the provided id'\r\n        );\r\n      }\r\n      const isAccepted = await this.repository.isAcceptById(id);\r\n      if (isAccepted) {\r\n        throw new BadRequestException('Request already accepted!');\r\n      }\r\n\r\n      const isCancelled = await this.repository.isCancelledById(id);\r\n      if (isCancelled) {\r\n        throw new BadRequestException('Request already cancelled!');\r\n      }\r\n      const requestRejected = await this.repository.rejectById(\r\n        accountId,\r\n        id,\r\n        reason,\r\n        queryRunner\r\n      );\r\n\r\n      const request = await this.repository.getRequest(id);\r\n\r\n      this.notificationService.sendRejectRequestNotification(\r\n        dayjs(request.checkinDate).format('DD-MM-YYYY'),\r\n        request.checkinSlotName,\r\n        request.checkoutSlotName,\r\n        request.roomName,\r\n        reason,\r\n        request.requestedBy,\r\n        queryRunner\r\n      );\r\n\r\n      await queryRunner.commitTransaction();\r\n      // await this.histService.createNew(requestRejected);\r\n      return requestRejected;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      await queryRunner.rollbackTransaction();\r\n\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error occurred while reject request'\r\n      );\r\n    }\r\n  }\r\n\r\n  async cancelRequest(\r\n    accountId: string,\r\n    id: string,\r\n    reason: string,\r\n    queryRunner: QueryRunner\r\n  ) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Request does not found with the provided id'\r\n        );\r\n      }\r\n      const isCancelled = await this.repository.isCancelledById(id);\r\n      if (isCancelled) {\r\n        throw new BadRequestException('Request already cancelled!');\r\n      }\r\n\r\n      const role = await this.accountService.getRoleOfAccount(accountId);\r\n      const requestCancelled = await this.repository.cancelRoomBookingById(\r\n        accountId,\r\n        id,\r\n        reason,\r\n        role.role_name,\r\n        queryRunner\r\n      );\r\n\r\n      const request = await this.repository.getRequest(id);\r\n\r\n      await this.notificationService.sendCancelRequestNotification(\r\n        dayjs(request.checkinDate).format('DD-MM-YYYY'),\r\n        request.checkinSlotName,\r\n        request.checkoutSlotName,\r\n        request.roomName,\r\n        reason,\r\n        request.requestedBy,\r\n        queryRunner\r\n      );\r\n\r\n      return requestCancelled;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async cancelRoomBookingById(accountId: string, id: string, reason: string) {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      const request = await this.cancelRequest(\r\n        accountId,\r\n        id,\r\n        reason,\r\n        queryRunner\r\n      );\r\n\r\n      await queryRunner.commitTransaction();\r\n      return request;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      await queryRunner.rollbackTransaction();\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getAllBookingRoomsRequestsByFilter(\r\n    accountId: string,\r\n    filters: GetAllBookingRequestsFilter\r\n  ) {\r\n    try {\r\n      const roleName = await this.accountService.getAccountRoleById(accountId);\r\n      if (roleName === 'System Admin' || roleName === 'Librarian') {\r\n        return await this.repository.findBookingRoomRequestsByFilter(filters);\r\n      }\r\n      return await this.repository.findBookingRequestsByFilterAndRequestedBy(\r\n        filters,\r\n        accountId\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getCurrentBookingCheckoutInformation(accountId: string) {\r\n    try {\r\n      return await this.repository.findCurrentCheckoutInformation(accountId);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  checkOutBookingRoom(bookingRequestId: string, accountId: string) {\r\n    return this.repository.checkoutBookingRoom(bookingRequestId, accountId);\r\n  }\r\n\r\n  getAllBookingRoomHistory(\r\n    accountId: string,\r\n    filters: GetAllBookingRequestsFilter\r\n  ) {\r\n    return this.repository.findBookingRoomHistory(accountId, filters);\r\n  }\r\n\r\n  getCurrentBookingCheckin(accountId: string) {\r\n    return this.repository.findCurrentCheckinInformation(accountId);\r\n  }\r\n\r\n  async attemptCheckin(\r\n    accountId: string,\r\n    bookingRequestId: string,\r\n    checkinSignature: { signature: string }\r\n  ) {\r\n    try {\r\n      await this.repository.attemptCheckinBookingRoom(\r\n        accountId,\r\n        bookingRequestId,\r\n        checkinSignature.signature\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async attemptCheckout(\r\n    accountId: string,\r\n    bookingRequestId: string,\r\n    checkinSignature: { signature: string }\r\n  ) {\r\n    try {\r\n      await this.repository.attemptCheckoutBookingRoom(\r\n        accountId,\r\n        bookingRequestId,\r\n        checkinSignature.signature\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async acceptCheckinById(accountId: string, id: string) {\r\n    try {\r\n      console.error('assss');\r\n      await this.repository.acceptCheckinById(accountId, id);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async rejectCheckinById(accountId: string, id: string, reason: string) {\r\n    try {\r\n      await this.repository.rejectCheckinById(accountId, id);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async acceptCheckoutById(accountId: string, id: string) {\r\n    try {\r\n      await this.repository.acceptCheckoutById(accountId, id);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async rejectCheckoutById(accountId: string, id: string, reason: string) {\r\n    try {\r\n      await this.repository.rejectCheckoutById(accountId, id);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, OnModuleInit } from \"@nestjs/common\";\r\nimport * as Cloudinary from \"cloudinary\";\r\nimport { ConfigService } from \"@nestjs/config\";\r\nimport { Environment } from \"@app/constants\";\r\nimport * as streamifier from \"streamifier\";\r\n\r\nconst cloudinary = Cloudinary.v2;\r\nconst cloudinaryUploader = cloudinary.uploader;\r\n\r\n@Injectable()\r\nexport class CloudinaryService implements OnModuleInit {\r\n\r\n  constructor(private readonly configService: ConfigService) {\r\n\r\n  }\r\n\r\n  onModuleInit() {\r\n    cloudinary.config({\r\n      api_key: this.configService.get<string>(Environment.cloudinary.apiKey),\r\n      api_secret: this.configService.get<string>(Environment.cloudinary.apiSecret),\r\n      cloud_name: this.configService.get<string>(Environment.cloudinary.name),\r\n      secure: this.configService.get<boolean>(Environment.cloudinary.secure)\r\n    });\r\n  }\r\n\r\n  async uploadImageAndGetURL(imagePayload: Buffer, id: string): Promise<string> {\r\n    const uploadResult = await cloudinaryUploader.upload_stream({\r\n      access_mode: \"public\",\r\n      use_filename: true,\r\n      unique_filename: false,\r\n      filename_override: id,\r\n      folder: \"accountsAvatar\",\r\n      async: true,\r\n      overwrite: true\r\n    }, (err, result) => {\r\n      return result.url;\r\n    });\r\n    await streamifier.createReadStream(imagePayload).pipe(uploadResult);\r\n    return id;\r\n  }\r\n\r\n  async getImageURLByFileName(id: string): Promise<string> {\r\n    const data = cloudinary.url(id);\r\n    const url = data.substring(0, data.lastIndexOf(\"/\") + 1);\r\n\r\n    const fileName = data.substring(data.lastIndexOf(\"/\") + 1, data.length);\r\n    return url + \"accountsAvatar/\" + fileName;\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { DeviceType, DeviceTypeHist } from '../models';\r\nimport { DeviceTypeHistRepository } from '../repositories/device-type-hist.repository';\r\n\r\n@Injectable()\r\nexport class DeviceTypeHistService {\r\n    constructor(private readonly repository: DeviceTypeHistRepository) {}\r\n\r\n  async createNew(deviceType: DeviceType): Promise<DeviceTypeHist> {\r\n    return this.repository.createNew(deviceType);\r\n  }\r\n\r\n  async deleteAllHist(id: string) {\r\n    return this.repository.deleteAllHist(id);\r\n   }\r\n}\r\n","import { BadRequestException, Injectable, Logger } from '@nestjs/common';\r\nimport { DeviceTypeRepository } from '../repositories/device-type.repository';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\nimport { DeviceTypeHistService } from './device-type-hist.service';\r\nimport { DevicesService } from './devices.service';\r\n\r\n@Injectable()\r\nexport class DeviceTypeService {\r\n  private readonly logger = new Logger(DeviceTypeService.name);\r\n\r\n  constructor(\r\n    private readonly repository: DeviceTypeRepository,\r\n    private readonly deviceService: DevicesService,\r\n    private readonly histService: DeviceTypeHistService\r\n  ) {}\r\n  async getAllDeviceTypes(param: PaginationParams) {\r\n    try {\r\n      return await this.repository.findByPagination(param);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getDeviceTypeNames() {\r\n    try {\r\n      return this.repository.findDeviceTypeName();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getDeviceTypeById(id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Device type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException('This device type is already deleted');\r\n      }\r\n      return data;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async addNewDeviceType(\r\n    accountId: string,\r\n    payload: { name: string; description: string }\r\n  ) {\r\n    try {\r\n      const deviceType = await this.repository.addNew(accountId, payload);\r\n      await this.histService.createNew(deviceType);\r\n      return deviceType;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async updateDeviceTypeById(\r\n    accountId: string,\r\n    id: string,\r\n    payload: MasterDataAddRequestPayload\r\n  ) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Device type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException(\r\n          'This device type is already deleted'\r\n        );\r\n      }\r\n      const deviceType = await this.repository.updateById(\r\n        accountId,\r\n        id,\r\n        payload\r\n      );\r\n      await this.histService.createNew(deviceType);\r\n      return deviceType;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async deleteDeviceTypeById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Device type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException(\r\n          'This type is already deleted'\r\n        );\r\n      }\r\n      const listDeviceOfThisType =\r\n        await this.deviceService.getDevicesByDeviceType(id);\r\n\r\n      if (\r\n        listDeviceOfThisType !== undefined &&\r\n        listDeviceOfThisType.length > 0\r\n      ) {\r\n        throw new BadRequestException(\r\n          'There are still device of this type, please change the type of those devices before deleting type'\r\n        );\r\n      } else {\r\n        const deviceType = await this.repository.deleteById(accountId, id);\r\n        await this.histService.createNew(deviceType);\r\n        return deviceType;\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getDeletedDeviceTypes(search: string) {\r\n    try {\r\n      return this.repository.findDeletedByPagination(search);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async restoreDeletedDeviceTypeById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Device type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data !== undefined) {\r\n        throw new BadRequestException(\r\n          'This device type ID is now active. Cannot restore it'\r\n        );\r\n      }\r\n      const deviceType = await this.repository.restoreDeletedById(\r\n        accountId,\r\n        id\r\n      );\r\n      await this.histService.createNew(deviceType);\r\n      return deviceType;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async permanentlyDeleteDeviceTypeById(id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Device type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data !== undefined) {\r\n        throw new BadRequestException(\r\n          'Please delete this type after permanently delete'\r\n        );\r\n      } else {\r\n        await this.histService.deleteAllHist(id);\r\n        return this.repository.permanentlyDeleteById(id);\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n}\r\n","import {Injectable} from \"@nestjs/common\";\r\nimport { DeviceHistRepository } from \"../repositories\";\r\nimport { Devices, DeviceHist } from \"../models\";\r\n\r\n@Injectable()\r\nexport class DeviceHistService {\r\n    constructor(private readonly repository: DeviceHistRepository) {}\r\n\r\n  async createNew(device: Devices): Promise<DeviceHist> {\r\n    return this.repository.createNew(device);\r\n  }\r\n}\r\n","import { BadRequestException, Injectable, Logger } from '@nestjs/common';\r\nimport { DevicesRepository } from '../repositories/devices.repository';\r\nimport { DevicesResponsePayload } from '../payload/response/devices.payload';\r\nimport { AddDeviceRequest, UpdateDeviceRequest } from '@app/models';\r\nimport { DevicesRequestPayload } from '../payload/request/devices.payload';\r\nimport { Devices } from '../models';\r\nimport { Direction } from '../models/search-pagination.payload';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\nimport { DeviceHistService } from './devices-hist.service';\r\nimport { DevicesPaginationParams } from '../controllers/devices-pagination.model';\r\nimport { DataAddRequestPayload } from '../payload/request/data-add.request.payload';\r\n\r\n@Injectable()\r\nexport class DevicesService {\r\n  private readonly logger = new Logger(DevicesService.name);\r\n\r\n  constructor(\r\n    private readonly repository: DevicesRepository,\r\n    private readonly histService: DeviceHistService\r\n  ) {}\r\n\r\n  async getAll(request: DevicesPaginationParams) {\r\n    try {\r\n      const result = await this.repository.searchDevices(request);\r\n      return result;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException('One or more parameters is invalid');\r\n    }\r\n  }\r\n\r\n  async getDevicesByDeviceType(deviceTypeId: string): Promise<Devices[]> {\r\n    try {\r\n      return await this.repository.getDevicesByDeviceType(deviceTypeId);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        'An error occurred while getting rooms by type ' + deviceTypeId\r\n      );\r\n    }\r\n  }\r\n\r\n  getDeviceNames() {\r\n    try {\r\n      return this.repository.findDeviceName();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  // getBookingRoomDeviceList(name: string, type: string, sort: string) {\r\n  //   if (!sort) sort = 'ASC';\r\n  //   if (sort !== 'ASC' && sort !== 'DESC') {\r\n  //     sort = 'ASC';\r\n  //   }\r\n\r\n  //   return this.repository.findDeviceListByBookingRoomRequest(name, type, sort);\r\n  // }\r\n\r\n  async findById(id: string): Promise<Devices> {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Device does not found with the provided id'\r\n        );\r\n      }\r\n      const result = await this.repository.findById(id);\r\n      if (!result) {\r\n        throw new BadRequestException(\r\n          'This device is already deleted or disabled'\r\n        );\r\n      }\r\n      return result;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ?? 'An error occurred while retrieving this Device'\r\n      );\r\n    }\r\n  }\r\n\r\n  async add(payload: AddDeviceRequest, userId: string): Promise<Devices> {\r\n    const isExisted = await this.repository.isExistedByName(payload.name);\r\n    if (isExisted) {\r\n      throw new BadRequestException('Device name is duplicated!');\r\n    }\r\n    try {\r\n      const deviceAdded = await this.repository.createNewDevice(\r\n        payload,\r\n        userId\r\n      );\r\n      await this.histService.createNew(deviceAdded);\r\n      return deviceAdded;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      if (\r\n        e.message.includes('constraint') &&\r\n        e.message.includes('devices_device_type_id_fk')\r\n      ) {\r\n        throw new BadRequestException(\r\n          'There is no device type with the provided id'\r\n        );\r\n      }\r\n      throw new BadRequestException('Error while creating a new device');\r\n    }\r\n  }\r\n\r\n  // addAll(models: any[]): Promise<any[]> {\r\n  //   return Promise.resolve([]);\r\n  // }\r\n\r\n  async updateById(accountId: string, id: string, body: DataAddRequestPayload) {\r\n    const isExisted = await this.repository.existsById(id);\r\n    if (!isExisted) {\r\n      throw new BadRequestException(\r\n        'Device does not found with the provided id'\r\n      );\r\n    }\r\n    const data = await this.repository.findById(id);\r\n    if (data === undefined) {\r\n      throw new BadRequestException(\r\n        'This device is already deleted or disabled'\r\n      );\r\n    }\r\n    try {\r\n      const deviceUpdated = await this.repository.updateById(\r\n        accountId,\r\n        id,\r\n        body\r\n      );\r\n      await this.histService.createNew(deviceUpdated);\r\n      return deviceUpdated;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      if (\r\n        e.message.includes('constraint') &&\r\n        e.message.includes('devices_device_type_id_fk')\r\n      ) {\r\n        throw new BadRequestException(\r\n          'There is no device type with the provided id'\r\n        );\r\n      }\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async disableById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Device does not found with the provided id'\r\n        );\r\n      }\r\n      const isDisabled = await this.repository.checkIfDeviceIsDisabledById(id);\r\n      if (isDisabled) {\r\n        throw new BadRequestException('This device is already disabled');\r\n      }\r\n      const isDeleted = await this.repository.checkIfDeviceIsDeletedById(id);\r\n      if (isDeleted) {\r\n        throw new BadRequestException('This device is already deleted, can not disable');\r\n      }\r\n      const device = await this.repository.disableById(accountId, id);\r\n      await this.histService.createNew(device);\r\n      return device;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getDisabledDevices(search: string): Promise<Devices[]> {\r\n    try {\r\n      return await this.repository.getDisabledDevices(search);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException('Error while disabling this device');\r\n    }\r\n  }\r\n\r\n  async handleRestoreDisabledDeviceById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Device does not found with the provided id'\r\n        );\r\n      }\r\n      const isDeleted = await this.repository.checkIfDeviceIsDeletedById(id);\r\n      if (isDeleted) {\r\n        throw new BadRequestException('This device is already deleted');\r\n      }\r\n      const isDisabled = await this.repository.checkIfDeviceIsDisabledById(id);\r\n      if (!isDisabled) {\r\n        throw new BadRequestException(\r\n          'This device ID is now active. Cannot restore it'\r\n        );\r\n      }\r\n      const device = await this.repository.restoreDisabledDeviceById(accountId, id);\r\n      await this.histService.createNew(device);\r\n      return device;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async deleteById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Device does not found with the provided id'\r\n        );\r\n      }\r\n      const isDeleted = await this.repository.checkIfDeviceIsDeletedById(id);\r\n      if (isDeleted) {\r\n        throw new BadRequestException('This device is already deleted');\r\n      }\r\n      const device = await this.repository.deleteById(accountId, id);\r\n      await this.histService.createNew(device);\r\n      return device;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getDeletedDevices(search: string): Promise<Devices[]> {\r\n    try {\r\n      return await this.repository.getDeletedDevices(search);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException('Error while get deleted devices');\r\n    }\r\n  }\r\n\r\n  async handleRestoreDeletedDeviceById(id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Device does not found with the provided id'\r\n        );\r\n      }\r\n      const isDisabled = await this.repository.checkIfDeviceIsDisabledById(id);\r\n      if (isDisabled) {\r\n        throw new BadRequestException('This device is already disabled');\r\n      }\r\n      const isDeleted = await this.repository.checkIfDeviceIsDeletedById(id);\r\n      if (!isDeleted) {\r\n        throw new BadRequestException(\r\n          'This device ID is now active. Cannot restore it'\r\n        );\r\n      }\r\n\r\n      const device = await this.repository.restoreDeletedDeviceById(id);\r\n      await this.histService.createNew(device);\r\n      return device;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  // getBookingRoomDeviceList(name: string, type: string, sort: string) {\r\n  //   if (!sort) sort = 'ASC';\r\n  //   if (sort !== 'ASC' && sort !== 'DESC') {\r\n  //     sort = 'ASC';\r\n  //   }\r\n\r\n  //   return this.repository.findDeviceListByBookingRoomRequest(name, type, sort);\r\n  // }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { Feedback, FeedbackHist } from '../models';\r\nimport { FeedbackHistRepository } from '../repositories';\r\n\r\n@Injectable()\r\nexport class FeedbackHistService {\r\n  constructor(private readonly repository: FeedbackHistRepository) {}\r\n  async createNew(feedback: Feedback): Promise<FeedbackHist> {\r\n    return this.repository.createNew(feedback);\r\n  }\r\n}\r\n","import { BadRequestException, Injectable, Logger } from '@nestjs/common';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\nimport { FeedbackTypeRepository } from '../repositories';\r\nimport { FeedbackService } from './feedback.service';\r\n\r\n@Injectable()\r\nexport class FeedbackTypeService {\r\n  private readonly logger = new Logger(FeedbackTypeService.name);\r\n\r\n  constructor(\r\n    private readonly repository: FeedbackTypeRepository,\r\n    // private readonly feedbackService: FeedbackService\r\n  ) {}\r\n  async getAllFeedbackTypes(param: PaginationParams) {\r\n    try {\r\n      return await this.repository.findByPagination(param);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getFeedbackTypeNames() {\r\n    try {\r\n      return this.repository.findFeedbackTypeName();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getFeedbackTypeById(id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Feedback type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException('This feedback type is already deleted');\r\n      }\r\n      return data;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  addNewFeedbackType(\r\n    accountId: string,\r\n    payload: { name: string; description: string }\r\n  ) {\r\n    try {\r\n      return this.repository.addNew(accountId, payload);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async updateFeedbackTypeById(\r\n    accountId: string,\r\n    id: string,\r\n    payload: MasterDataAddRequestPayload\r\n  ) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Feedback type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException('This feedback type is already deleted');\r\n      }\r\n      return this.repository.updateById(accountId, id, payload);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async deleteFeedbackTypeById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Feedback type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException('This type is already deleted');\r\n      }\r\n\r\n      return this.repository.deleteById(accountId, id);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getDeletedFeedbackTypes(search: string) {\r\n    try {\r\n      return this.repository.findDeletedByPagination(search);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async restoreDeletedFeedbackTypeById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Feedback type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data !== undefined) {\r\n        throw new BadRequestException(\r\n          'This feedback type ID is now active. Cannot restore it'\r\n        );\r\n      }\r\n      return this.repository.restoreDeletedById(\r\n        accountId,\r\n        id\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  // async permanentlyDeleteFeedbackTypeById(id: string) {\r\n  //   try {\r\n  //     const isExisted = await this.repository.existsById(id);\r\n  //     if (!isExisted) {\r\n  //       throw new BadRequestException(\r\n  //         'Feedback type does not found with the provided id'\r\n  //       );\r\n  //     }\r\n  //     const data = await this.repository.findById(id);\r\n  //     if (data !== undefined) {\r\n  //       throw new BadRequestException(\r\n  //         'Please delete this type after permanently delete'\r\n  //       );\r\n  //     } else {\r\n  //       return this.repository.permanentlyDeleteById(id);\r\n  //     }\r\n  //   } catch (e) {\r\n  //     this.logger.error(e.message);\r\n  //     throw new BadRequestException(e.message);\r\n  //   }\r\n  // }\r\n}\r\n","import { BadRequestException, Injectable, Logger } from '@nestjs/common';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { Feedback } from '../models';\r\nimport { FeedbackResolveRequestPayload } from '../payload/request/feedback-resolve.request.payload';\r\nimport { FeedbackSendRequestPayload } from '../payload/request/feedback-send.request.payload';\r\nimport { FeedbackRepository } from '../repositories';\r\nimport { FeedbackHistService } from './feedback-hist.service';\r\n\r\n@Injectable()\r\nexport class FeedbackService {\r\n  private readonly logger = new Logger(FeedbackService.name);\r\n\r\n  constructor(\r\n    private readonly repository: FeedbackRepository,\r\n    private readonly histService: FeedbackHistService\r\n  ) {}\r\n\r\n  getAllFeedbacks(param: PaginationParams) {\r\n    try {\r\n      return this.repository.findByPagination(param);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async addNewFeedback(\r\n    accountId: string,\r\n    payload: FeedbackSendRequestPayload\r\n  ) {\r\n    try {\r\n      const feedback = await this.repository.addNew(accountId, payload);\r\n      await this.histService.createNew(feedback);\r\n      return feedback;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getFeedbackById(id: string): Promise<Feedback> {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Feedback does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      return data;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async resolveFeedbackById(\r\n    accountId: string,\r\n    id: string,\r\n    payload: FeedbackResolveRequestPayload\r\n  ) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Feedback does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        }\r\n      });\r\n      if(data.status === \"RESOLVED\"){\r\n        throw new BadRequestException(\r\n          'Feedback was resolved!'\r\n        );\r\n      }\r\n      const feedback = await this.repository.resolveById(\r\n        accountId,\r\n        id,\r\n        payload\r\n      );\r\n      await this.histService.createNew(feedback);\r\n      return feedback;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async rejectFeedbackById(\r\n    accountId: string,\r\n    id: string,\r\n  ) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Feedback does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findOneOrFail({\r\n        where: {\r\n          id: id,\r\n        }\r\n      });\r\n      if(data.status === \"RESOLVED\"){\r\n        throw new BadRequestException(\r\n          'Feedback was resolved!'\r\n        );\r\n      }\r\n      const feedback = await this.repository.rejectById(\r\n        accountId,\r\n        id,\r\n      );\r\n      await this.histService.createNew(feedback);\r\n      return feedback;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n}\r\n","export * from './accounts.service';\r\nexport * from './authentication.service';\r\nexport * from './app.service';\r\nexport * from './base.service';\r\nexport * from './booking-room.service';\r\nexport * from './cloudinary.service';\r\nexport * from './devices-hist.service';\r\nexport * from './devices.service';\r\nexport * from './keycloak.service';\r\nexport * from './room-wishlist.service';\r\nexport * from './rooms.service';\r\nexport * from './notification-type.service';\r\nexport * from './notification.service';\r\nexport * from './feedback.service';\r\nexport * from './feedback-hist.service';\r\nexport * from './feedback-type.service';\r\n","import {\r\n  BadRequestException,\r\n  ForbiddenException,\r\n  HttpException,\r\n  HttpStatus,\r\n  Inject,\r\n  Injectable,\r\n  Logger,\r\n  Scope,\r\n  UnauthorizedException,\r\n} from '@nestjs/common';\r\nimport { HttpService } from '@nestjs/axios';\r\nimport { lastValueFrom, map, Observable } from 'rxjs';\r\nimport { KeycloakSigninSuccessResponse } from '../dto/keycloak-signin-success.response.dto';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { REQUEST } from '@nestjs/core';\r\nimport { APPLICATION_X_WWW_FORM_URLENCODED, Environment } from '@app/constants';\r\nimport { AccessTokenResponsePayload } from '../payload/response/refresh_token.response.payload';\r\nimport { RefreshTokenPayload } from '../payload/response/refresh-token.request.payload';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\n\r\n@Injectable({\r\n  scope: Scope.REQUEST,\r\n})\r\nexport class KeycloakService {\r\n  private readonly logger = new Logger(KeycloakService.name);\r\n\r\n  private readonly keycloakHost: string;\r\n  private readonly keycloakPort: number;\r\n  private readonly keycloakRealm: string;\r\n  private readonly grantTypePassword: string;\r\n  private readonly clientId: string;\r\n  private readonly masterUsername: string;\r\n  private readonly masterPassword: string;\r\n  private readonly grantTypeRefreshToken: string;\r\n  private readonly grantTypeTokenExchange: string;\r\n  private readonly clientSecret: string;\r\n\r\n  constructor(\r\n    private readonly configService: ConfigService,\r\n    private readonly httpService: HttpService,\r\n    @Inject(REQUEST) private readonly httpRequest: Request\r\n  ) {\r\n    this.keycloakHost = this.configService.get<string>(\r\n      Environment.keycloak.host\r\n    );\r\n    this.keycloakPort = this.configService.get<number>(\r\n      Environment.keycloak.port\r\n    );\r\n    this.keycloakRealm = this.configService.get<string>(\r\n      Environment.keycloak.client.realm\r\n    );\r\n    this.grantTypePassword = this.configService.get<string>(\r\n      Environment.keycloak.grant_type.password\r\n    );\r\n    this.clientId = this.configService.get<string>(\r\n      Environment.keycloak.client.id\r\n    );\r\n    this.masterUsername = this.configService.get<string>(\r\n      Environment.keycloak.master_username\r\n    );\r\n    this.masterPassword = this.configService.get<string>(\r\n      Environment.keycloak.master_password\r\n    );\r\n    this.grantTypeRefreshToken = this.configService.get<string>(\r\n      Environment.keycloak.grant_type.refresh_token\r\n    );\r\n    this.grantTypeTokenExchange = this.configService.get<string>(\r\n      Environment.keycloak.grant_type.token_exchange\r\n    );\r\n    this.clientSecret = this.configService.get<string>(\r\n      Environment.keycloak.client.secret\r\n    );\r\n  }\r\n\r\n  async getAuthenticationTokenByMasterAccount(\r\n    keycloakId: string\r\n  ): Promise<KeycloakSigninSuccessResponse> {\r\n    const { access_token } = await this.signInToKeycloak(\r\n      this.masterUsername,\r\n      this.masterPassword\r\n    );\r\n    const url = `http://${this.keycloakHost}:${this.keycloakPort}/auth/realms/${this.keycloakRealm}/protocol/openid-connect/token`;\r\n    const payload = new URLSearchParams({\r\n      grant_type: this.grantTypeTokenExchange,\r\n      client_id: this.clientId,\r\n      client_secret: this.clientSecret,\r\n      audience: this.clientId,\r\n      requested_subject: keycloakId,\r\n      subject_token: access_token,\r\n      requested_token_type: this.grantTypeRefreshToken,\r\n    });\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': APPLICATION_X_WWW_FORM_URLENCODED,\r\n      },\r\n    };\r\n    try {\r\n      const response = await lastValueFrom(\r\n        this.httpService.post(url, payload, config)\r\n      );\r\n      return response.data as KeycloakSigninSuccessResponse;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new HttpException(\r\n        e.response?.data['error_description'],\r\n        HttpStatus.UNAUTHORIZED\r\n      );\r\n    }\r\n  }\r\n\r\n  countUsers(token: string): Observable<number> {\r\n    const COUNT_USERS_URI =\r\n      'http://localhost:8080/auth/admin/realms/authentication/users/count';\r\n    try {\r\n      return this.httpService\r\n        .get(COUNT_USERS_URI, {\r\n          headers: {\r\n            Authorization: token,\r\n          },\r\n        })\r\n        .pipe(map((e) => e.data));\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getAllUsers(token: string): Promise<number> {\r\n    const USERS_URI =\r\n      'http://localhost:9090/auth/admin/realms/authentication/users';\r\n    try {\r\n      return await lastValueFrom(\r\n        this.httpService\r\n          .get(USERS_URI, {\r\n            headers: {\r\n              Authorization: token,\r\n            },\r\n          })\r\n          .pipe(map((e) => e.data))\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async signInToKeycloak(\r\n    username: string,\r\n    password: string\r\n  ): Promise<KeycloakSigninSuccessResponse> {\r\n    const url = `http://${this.keycloakHost}:${this.keycloakPort}/auth/realms/${this.keycloakRealm}/protocol/openid-connect/token`;\r\n    const signInPayload = new URLSearchParams({\r\n      client_id: this.configService.get<string>(Environment.keycloak.client.id),\r\n      client_secret: this.configService.get<string>(\r\n        Environment.keycloak.client.secret\r\n      ),\r\n      grant_type: this.configService.get<string>(\r\n        Environment.keycloak.grant_type.password\r\n      ),\r\n      username: username,\r\n      password: password,\r\n    });\r\n    try {\r\n      const response = await lastValueFrom(\r\n        this.httpService.post(url, signInPayload, {\r\n          headers: {\r\n            'Content-Type': APPLICATION_X_WWW_FORM_URLENCODED,\r\n          },\r\n        })\r\n      );\r\n      return response.data as KeycloakSigninSuccessResponse;\r\n    } catch (e) {\r\n      this.logger.error(e.response.data);\r\n      throw new HttpException(\r\n        e.response?.data['error_description'],\r\n        HttpStatus.UNAUTHORIZED\r\n      );\r\n    }\r\n  }\r\n\r\n  async getUserByUsername(\r\n    username: string,\r\n    accessToken?: string\r\n  ): Promise<KeycloakUserInstance> {\r\n    const token = accessToken ?? this.httpRequest.headers['authorization'];\r\n    const url = `http://${this.keycloakHost}:${this.keycloakPort}/auth/admin/realms/${this.keycloakRealm}/users?username=${username}`;\r\n    try {\r\n      const response = await lastValueFrom(\r\n        this.httpService.get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        })\r\n      );\r\n      return response.data[0];\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new UnauthorizedException('Invalid credentials');\r\n    }\r\n  }\r\n\r\n  async getUserById(authToken: string, id: string) {\r\n    const URL = `http://${this.keycloakHost}:${this.keycloakPort}/auth/admin/realms/${this.keycloakRealm}/users/${id}`;\r\n    try {\r\n      const resp = await lastValueFrom(\r\n        this.httpService.get(URL, {\r\n          headers: {\r\n            Authorization: authToken,\r\n          },\r\n        })\r\n      );\r\n      return resp.data;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new ForbiddenException(e.message);\r\n    }\r\n  }\r\n\r\n  createKeycloakUser(header: any, user): Promise<any> {\r\n    try {\r\n      return Promise.resolve();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  resetKeycloakUserById(req, id, rawPasswword: string): Promise<void> {\r\n    try {\r\n      return Promise.resolve();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  signOutKeycloakUser(header: any, id: string): Promise<void> {\r\n    try {\r\n      return Promise.resolve();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async refreshAccessToken(\r\n    payload: RefreshTokenPayload\r\n  ): Promise<AccessTokenResponsePayload> {\r\n    const URL = `http://${this.keycloakHost}:${this.keycloakPort}/auth/realms/${this.keycloakRealm}/protocol/openid-connect/token`;\r\n    console.log(payload.refreshToken);\r\n    const refreshTokenPayload = new URLSearchParams({\r\n      client_id: this.configService.get<string>(Environment.keycloak.client.id),\r\n      client_secret: this.configService.get<string>(\r\n        Environment.keycloak.client.secret\r\n      ),\r\n      grant_type: this.configService.get<string>(\r\n        Environment.keycloak.grant_type.native_refresh_token\r\n      ),\r\n      refresh_token: payload.refreshToken,\r\n    });\r\n\r\n    try {\r\n      const response = await lastValueFrom(\r\n        this.httpService\r\n          .post(URL, refreshTokenPayload, {\r\n            headers: {\r\n              'Content-Type': APPLICATION_X_WWW_FORM_URLENCODED,\r\n            },\r\n          })\r\n          .pipe(map((e) => e.data))\r\n      );\r\n      return {\r\n        accessToken: response['access_token'],\r\n        refreshToken: response['refresh_token'],\r\n      };\r\n    } catch (e) {\r\n      this.logger.error(e.response.data);\r\n      throw new BadRequestException(e.response.data);\r\n    }\r\n  }\r\n\r\n  async getUserInfo(accessToken: string): Promise<KeycloakUserInstance> {\r\n    if (!accessToken.includes('Bearer')) {\r\n      accessToken = `Bearer ${accessToken}`;\r\n    }\r\n    try {\r\n      const URL = `http://${this.keycloakHost}:${this.keycloakPort}/auth/realms/${this.keycloakRealm}/protocol/openid-connect/userinfo`;\r\n      const response = await lastValueFrom(\r\n        this.httpService.get(URL, {\r\n          headers: {\r\n            Authorization: accessToken,\r\n          },\r\n        })\r\n      );\r\n      return response.data;\r\n    } catch (e) {\r\n      this.logger.error(e.response.data);\r\n      throw new UnauthorizedException('Invalid user credentials');\r\n    }\r\n  }\r\n\r\n  async changePasswordByKeycloakId(\r\n    keycloakId: string,\r\n    password: string\r\n  ): Promise<void> {\r\n    try {\r\n      const { access_token } = await this.signInToKeycloak(\r\n        this.masterUsername,\r\n        this.masterPassword\r\n      );\r\n      const URL = `http://${this.keycloakHost}:${this.keycloakPort}/auth/admin/realms/${this.keycloakRealm}/users/${keycloakId}/reset-password`;\r\n      return await lastValueFrom(\r\n        this.httpService\r\n          .put(\r\n            URL,\r\n            {\r\n              value: password,\r\n            },\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${access_token}`,\r\n              },\r\n            }\r\n          )\r\n          .pipe(map((e) => e.data))\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { NotificationTypeRepository } from '../repositories';\r\n\r\n@Injectable()\r\nexport class NotificationTypeService {\r\n  constructor(private readonly repository: NotificationTypeRepository) {}\r\n}\r\n","import { BadRequestException, Injectable, Logger } from '@nestjs/common';\r\nimport { QueryRunner } from 'typeorm';\r\nimport { NotificationRepository } from '../repositories/notification.repository';\r\nimport { Notification } from '../models/notification.entity';\r\n\r\n@Injectable()\r\nexport class NotificationService {\r\n  private readonly logger = new Logger(NotificationService.name);\r\n\r\n  constructor(private readonly repository: NotificationRepository) {}\r\n\r\n  sendAcceptRequestNotification(\r\n    checkinDate: string,\r\n    checkinSlotName: string,\r\n    checkoutSlotName: string,\r\n    roomName: string,\r\n    receiver: string,\r\n    queryRunner: QueryRunner\r\n  ) {\r\n    try {\r\n      const notification = {\r\n        title: 'Your request booking was accepted',\r\n        message: `Your reservation request on ${checkinDate}, ${checkinSlotName} to ${checkoutSlotName} for room ${roomName} has been accepted.${' '}Please present the QR code at the reception to perform the check-in step`,\r\n      };\r\n\r\n      return this.repository.sendNotification(\r\n        notification,\r\n        receiver,\r\n        queryRunner\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error occurred while send notification'\r\n      );\r\n    }\r\n  }\r\n\r\n  async sendRejectRequestNotification(\r\n    checkinDate: string,\r\n    checkinSlotName: string,\r\n    checkoutSlotName: string,\r\n    roomName: string,\r\n    reason: string,\r\n    receiver: string,\r\n    queryRunner: QueryRunner\r\n  ) {\r\n    try {\r\n      const notification = {\r\n        title: 'Your request booking was rejected',\r\n        message: `Your reservation request on ${checkinDate}, ${checkinSlotName} to ${checkoutSlotName} for room ${roomName} has been rejected. Reason is ${reason}`,\r\n      };\r\n      return await this.repository.sendNotification(\r\n        notification,\r\n        receiver,\r\n        queryRunner\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error occurred while send notification'\r\n      );\r\n    }\r\n  }\r\n\r\n  async sendCancelRequestNotification(\r\n    checkinDate: string,\r\n    checkinSlotName: string,\r\n    checkoutSlotName: string,\r\n    roomName: string,\r\n    reason: string,\r\n    receiver: string,\r\n    queryRunner: QueryRunner\r\n  ) {\r\n    try {\r\n      const notification = {\r\n        title: 'Your request booking was cancelled',\r\n        message: `Your reservation request on ${checkinDate}, ${checkinSlotName} to ${checkoutSlotName} for room ${roomName} has been cancelled. Reason is ${reason}`,\r\n      };\r\n      return await this.repository.sendNotification(\r\n        notification,\r\n        receiver,\r\n        queryRunner\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error occurred while send notification'\r\n      );\r\n    }\r\n  }\r\n\r\n  // sendNotification(\r\n  //   payload: { title: string; message: string },\r\n  //   receiver: string,\r\n  //   queryRunner: QueryRunner\r\n  // ) {\r\n  //   try {\r\n  //     return this.repository.sendNotification(payload, receiver, queryRunner);\r\n  //   } catch (e) {\r\n  //     this.logger.error(e);\r\n  //     throw new BadRequestException(\r\n  //       e.message ?? 'Error occurred while send notification'\r\n  //     );\r\n  //   }\r\n  // }\r\n\r\n  getYourOwnNotifications(userId: string) {\r\n    try {\r\n      return this.repository.getYourOwnNotifications(userId);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error occurred while get notifications'\r\n      );\r\n    }\r\n  }\r\n\r\n  async getDetailNotificationId(id: string): Promise<Notification> {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Notification does not found with the provided id'\r\n        );\r\n      }\r\n      return this.repository.findById(id);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { RoleHist } from '../models/role-hist.entity';\r\nimport { Roles } from '../models/role.entity';\r\nimport { RoleHistRepository } from '../repositories/role-hist.repository';\r\n\r\n@Injectable()\r\nexport class RoleHistService {\r\n  constructor(private readonly repository: RoleHistRepository) {}\r\n\r\n  async createNew(role: Roles): Promise<RoleHist> {\r\n    return this.repository.createNew(role);\r\n  }\r\n\r\n  async deleteAllHist(id: string) {\r\n    return this.repository.deleteAllHist(id);\r\n   }\r\n}\r\n","import { BadRequestException, Injectable, Logger } from '@nestjs/common';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { RolesRepository } from '../repositories/roles.repository';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\nimport { Roles } from '../models/role.entity';\r\nimport { RoleHistService } from './role-hist.service';\r\nimport { AccountsService } from './accounts.service';\r\n\r\n@Injectable()\r\nexport class RoleService {\r\n  private readonly logger = new Logger(RoleService.name);\r\n\r\n  constructor(\r\n    private readonly repository: RolesRepository,\r\n    private readonly accountService: AccountsService,\r\n    private readonly histService: RoleHistService\r\n  ) {}\r\n\r\n  getRolesByPagination(payload: PaginationParams) {\r\n    try {\r\n      return this.repository.findByPagination(payload);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getRoleNames() {\r\n    try {\r\n      return this.repository.findRoleName();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getRoleById(id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Role does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException('This role is already deleted');\r\n      }\r\n      return data;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async addRole(\r\n    body: { name: string; description: string },\r\n    accountId: string\r\n  ) {\r\n    const isExisted = await this.repository.isExistedByName(body.name);\r\n    if (isExisted) {\r\n      throw new BadRequestException('Role name is duplicated!');\r\n    } else {\r\n      const role = await this.repository.addNew(accountId, body);\r\n      await this.histService.createNew(role);\r\n      return role;\r\n    }\r\n  }\r\n\r\n  async updateRoleById(\r\n    accountId: string,\r\n    payload: MasterDataAddRequestPayload,\r\n    id: string\r\n  ) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Role does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException(\r\n          'This role is already deleted or disabled'\r\n        );\r\n      }\r\n      const role = await this.repository.updateById(id, accountId, payload);\r\n      await this.histService.createNew(role);\r\n      return role;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async deleteRoleById(accountId: string, id: string) {\r\n    try {\r\n      const data = await this.repository.findById(id);\r\n      const lisyAccountOfThisRole =\r\n        await this.accountService.getAccountsByRoleId(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException('This role is already deleted');\r\n      } else if (\r\n        lisyAccountOfThisRole !== undefined &&\r\n        lisyAccountOfThisRole.length > 0\r\n      ) {\r\n        throw new BadRequestException(\r\n          'There are still account of this type, please change the type of those accounts before deleting role'\r\n        );\r\n      } else {\r\n        const role = await this.repository.deleteById(accountId, id);\r\n        await this.histService.createNew(role);\r\n        return role;\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getDeletedRoles(search: string): Promise<Roles[]> {\r\n    try {\r\n      return await this.repository.getDeletedRoles(search);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException('Error while delete this role');\r\n    }\r\n  }\r\n\r\n  async handleRestoreDeletedRoleById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Role does not exist with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data !== undefined) {\r\n        throw new BadRequestException(\r\n          'This Role ID is now active. Cannot restore it'\r\n        );\r\n      }\r\n      const role = await this.repository.restoreDeletedById(accountId, id);\r\n      await this.histService.createNew(role);\r\n      return role;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ??\r\n          'Error occurred while restore the delete status of this role'\r\n      );\r\n    }\r\n  }\r\n\r\n  async permanentDeleteRoleById(id: string) {\r\n    try {\r\n      const data = await this.repository.findById(id);\r\n      if (data !== undefined) {\r\n        throw new BadRequestException(\r\n          'Please delete this role after permanently delete'\r\n        );\r\n      } else {\r\n        await this.histService.deleteAllHist(id);\r\n        return this.repository.permanentlyDeleteById(id);\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { QueryRunner } from 'typeorm';\r\nimport { RoomHist, Rooms } from '../models';\r\nimport { RoomHistRepository } from '../repositories/room-hist.repository';\r\n\r\n@Injectable()\r\nexport class RoomHistService {\r\n    constructor(private readonly repository: RoomHistRepository) {}\r\n\r\n  async createNew(room: Rooms, queryRunner: QueryRunner): Promise<RoomHist> {\r\n    return this.repository.createNew(room, queryRunner);\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { RoomType, RoomTypeHist } from '../models';\r\nimport { RoomTypeHistRepository } from '../repositories/room-type-hist.repository';\r\n\r\n@Injectable()\r\nexport class RoomTypeHistService {\r\n    constructor(private readonly repository: RoomTypeHistRepository) {}\r\n\r\n  async createNew(roomType: RoomType): Promise<RoomTypeHist> {\r\n    return this.repository.createNew(roomType);\r\n  }\r\n\r\n  async deleteAllHist(id: string) {\r\n    return this.repository.deleteAllHist(id);\r\n   }\r\n}","import {\r\n  BadRequestException,\r\n  forwardRef,\r\n  Inject,\r\n  Injectable,\r\n  Logger,\r\n} from '@nestjs/common';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { RoomTypeRepository } from '../repositories/room-type.repository';\r\nimport { MasterDataAddRequestPayload } from '../payload/request/master-data-add.request.payload';\r\nimport { RoomType } from '../models/room-type.entity';\r\nimport { Pagination } from 'nestjs-typeorm-paginate';\r\nimport { RoomTypeHistService } from './room-type-hist.service';\r\nimport { RoomsService } from './rooms.service';\r\n\r\n@Injectable()\r\nexport class RoomTypeService {\r\n  private readonly logger = new Logger(RoomTypeService.name);\r\n\r\n  constructor(\r\n    @Inject(forwardRef(() => RoomsService))\r\n    private readonly roomService: RoomsService,\r\n    private readonly repository: RoomTypeRepository,\r\n    private readonly histService: RoomTypeHistService\r\n  ) {}\r\n\r\n  async existsById(id: string): Promise<boolean> {\r\n    return await this.repository.existsById(id);\r\n  }\r\n\r\n  async getRoomTypesWithPagination(\r\n    pagination: PaginationParams\r\n  ): Promise<Pagination<RoomType>> {\r\n    try {\r\n      return await this.repository.findRoomTypesByPagination(pagination);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getRoomTypeNames() {\r\n    try {\r\n      return this.repository.findRoomTypeName();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getRoomTypeById(id: string): Promise<RoomType> {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Room type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException('This room is already deleted');\r\n      }\r\n      return data;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async addRoomType(\r\n    accountId: string,\r\n    addRoomType: MasterDataAddRequestPayload\r\n  ): Promise<RoomType> {\r\n    try {\r\n      const roomType = await this.repository.addNew(accountId, addRoomType);\r\n      await this.histService.createNew(roomType);\r\n      return roomType;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async updateRoomTypeById(\r\n    accountId: string,\r\n    updatePayload: MasterDataAddRequestPayload,\r\n    id: string\r\n  ) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Room type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException('This room is already deleted');\r\n      }\r\n      const roomType = await this.repository.updateById(\r\n        accountId,\r\n        id,\r\n        updatePayload\r\n      );\r\n      await this.histService.createNew(roomType);\r\n      return roomType;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async deleteRoomTypeById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Room type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      const listRoomOfThisType = await this.roomService.getRoomsByRoomType(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException(\r\n          'This room type is already deleted or disabled'\r\n        );\r\n      } else if (\r\n        listRoomOfThisType !== undefined &&\r\n        listRoomOfThisType.length > 0\r\n      ) {\r\n        throw new BadRequestException(\r\n          'There are still rooms of this type, please change the type of those rooms before deleting type'\r\n        );\r\n      } else {\r\n        const roomType = await this.repository.deleteById(accountId, id);\r\n        await this.histService.createNew(roomType);\r\n        return roomType;\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getDeletedRoomTypes(search: string) {\r\n    try {\r\n      const roomType = await this.repository.findDeletedByPagination(search);\r\n      return roomType;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async restoreDeletedRoomTypeById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Room type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data !== undefined) {\r\n        throw new BadRequestException(\r\n          'This room type ID is now active. Cannot restore it'\r\n        );\r\n      }\r\n      const roomType = await this.repository.restoreDeletedById(accountId, id);\r\n      await this.histService.createNew(roomType);\r\n      return roomType;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async permanentDeleteRoomTypeById(id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Room type does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data !== undefined) {\r\n        throw new BadRequestException(\r\n          'Please delete this room type after permanently delete'\r\n        );\r\n      } else {\r\n        await this.histService.deleteAllHist(id);\r\n        return this.repository.permanentlyDeleteById(id);\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { RoomWishlistHistRepository } from '../repositories';\r\n\r\n@Injectable()\r\nexport class RoomWishlistHistService {\r\n  constructor(private readonly repository: RoomWishlistHistRepository) {}\r\n}\r\n","import { BadRequestException, Injectable, Logger } from '@nestjs/common';\r\nimport { RoomWishlistRepository } from '../repositories';\r\nimport { WishlistBookingRoomRequestDTO } from '../dto/wishlist-booking-room.request.dto';\r\nimport { AccountsService } from './accounts.service';\r\nimport { RoomWishlist } from '../models';\r\nimport { RemoveWishlistRequest } from '../payload/request/remove-from-booking-room-wishlist.request.payload';\r\nimport { RoomWishlistHistService } from './room-wishlist-hist.service';\r\nimport { SlotService } from './slot.service';\r\n\r\n@Injectable()\r\nexport class RoomWishlistService {\r\n  private readonly logger = new Logger(RoomWishlistService.name);\r\n\r\n  constructor(\r\n    private readonly repository: RoomWishlistRepository,\r\n    private readonly accountService: AccountsService,\r\n    private readonly histService: RoomWishlistHistService,\r\n    private readonly slotService: SlotService\r\n  ) {}\r\n\r\n  findAllWishlistBookingRooms(\r\n    roomName: string,\r\n    slotFrom: number,\r\n    slotTo: number,\r\n    accountId: string\r\n  ) {\r\n    return this.repository.findAll(roomName, slotFrom, slotTo, accountId);\r\n  }\r\n\r\n  async addToWishlist(\r\n    accountId: string,\r\n    wishlist: WishlistBookingRoomRequestDTO\r\n  ) {\r\n    console.log(wishlist.slotId);\r\n    const slot = await this.slotService.getNumOfSlot(wishlist.slotId);\r\n    console.log(slot);\r\n    const isWishlistExisted = await this.repository.checkIfWishlistAlreadyExist(\r\n      {\r\n        ...wishlist,\r\n        slot: slot.slotNum,\r\n      }\r\n    );\r\n    if (isWishlistExisted) {\r\n      throw new BadRequestException('This room wishlist is already existed!');\r\n    }\r\n\r\n    const entity: Partial<RoomWishlist> = {\r\n      createdBy: accountId,\r\n      roomId: wishlist.roomId,\r\n      slotNum: slot.slotNum,\r\n    };\r\n\r\n    return this.repository.save(entity, {\r\n      transaction: true,\r\n    });\r\n  }\r\n\r\n  async removeFromWishlist(accountId: string, payload: RemoveWishlistRequest) {\r\n    try {\r\n      const isWishlistExisted =\r\n        await this.repository.checkIfWishlistAlreadyExist(payload);\r\n      if (!isWishlistExisted) {\r\n        throw new BadRequestException('This room wishlist does not exist!');\r\n      }\r\n      return this.repository.removeFromWishlist(\r\n        accountId,\r\n        payload.roomId,\r\n        payload.slot\r\n      );\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  BadRequestException,\r\n  forwardRef,\r\n  Inject,\r\n  Injectable,\r\n  Logger,\r\n} from '@nestjs/common';\r\nimport { Rooms } from '../models';\r\nimport { RoomsRepository } from '../repositories';\r\nimport { KeycloakUserInstance } from '../dto/keycloak.user';\r\nimport { ChooseBookingRoomFilterPayload } from '../payload/request/choose-booking-room-filter.payload';\r\nimport { RoomsPaginationParams } from '../controllers/rooms-pagination.model';\r\nimport { RoomHistService } from './room-hist.service';\r\nimport { DataAddRequestPayload } from '../payload/request/data-add.request.payload';\r\nimport { DataSource } from 'typeorm';\r\nimport { BookingRoomService } from './booking-room.service';\r\n\r\n@Injectable()\r\nexport class RoomsService {\r\n  private readonly logger = new Logger(RoomsService.name);\r\n\r\n  constructor(\r\n    private readonly dataSource: DataSource,\r\n    private readonly repository: RoomsRepository,\r\n    private readonly histService: RoomHistService,\r\n    @Inject(forwardRef(() => BookingRoomService))\r\n    private readonly bookingRoomService: BookingRoomService\r\n  ) {}\r\n\r\n  async getAll(request: RoomsPaginationParams) {\r\n    try {\r\n      return await this.repository.searchRoom(request);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException('One or more parameters is invalid');\r\n    }\r\n  }\r\n\r\n  async getRoomNames() {\r\n    try {\r\n      return await this.repository.findRoomNames();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getRoomsByRoomType(roomTypeId: string): Promise<Rooms[]> {\r\n    try {\r\n      return await this.repository.getRoomsByRoomType(roomTypeId);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ??\r\n          'An error occurred while getting rooms by type ' + roomTypeId\r\n      );\r\n    }\r\n  }\r\n\r\n  async findById(id: string): Promise<Rooms> {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Room does not found with the provided id'\r\n        );\r\n      }\r\n      const result = await this.repository.findById(id);\r\n      if (!result) {\r\n        throw new BadRequestException(\r\n          'This room is already deleted or disabled'\r\n        );\r\n      }\r\n      return result;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ?? 'An error occurred while retrieving this room'\r\n      );\r\n    }\r\n  }\r\n\r\n  async add(\r\n    user: KeycloakUserInstance,\r\n    room: DataAddRequestPayload\r\n  ): Promise<Rooms> {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      const isExisted = await this.repository.isExistedByName(room.name);\r\n      if (isExisted) {\r\n        throw new BadRequestException('Room name is duplicated!');\r\n      }\r\n      const roomAdded = await this.repository.createNewRoom(\r\n        room,\r\n        user.account_id,\r\n        queryRunner\r\n      );\r\n      await this.histService.createNew(roomAdded, queryRunner);\r\n\r\n      await queryRunner.commitTransaction();\r\n      return roomAdded;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      await queryRunner.rollbackTransaction();\r\n      if (\r\n        e.message.includes('constraint') &&\r\n        e.message.includes('rooms_room_type_id_fk')\r\n      ) {\r\n        throw new BadRequestException(\r\n          'There is no room type with the provided id'\r\n        );\r\n      }\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error occurred while adding this room'\r\n      );\r\n    }\r\n  }\r\n\r\n  async updateById(accountId: string, id: string, body: DataAddRequestPayload) {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    const isExisted = await this.repository.existsById(id);\r\n    if (!isExisted) {\r\n      throw new BadRequestException('Room does not found with the provided id');\r\n    }\r\n    const data = await this.repository.findById(id);\r\n    if (data === undefined) {\r\n      throw new BadRequestException('This room is already deleted or disabled');\r\n    }\r\n    try {\r\n      const roomUpdated = await this.repository.updateById(\r\n        accountId,\r\n        id,\r\n        body,\r\n        queryRunner\r\n      );\r\n\r\n      await this.histService.createNew(roomUpdated, queryRunner);\r\n\r\n      await queryRunner.commitTransaction();\r\n      return roomUpdated;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      await queryRunner.rollbackTransaction();\r\n      if (\r\n        e.message.includes('constraint') &&\r\n        e.message.includes('rooms_room_type_id_fk')\r\n      ) {\r\n        throw new BadRequestException(\r\n          'There is no room type with the provided id'\r\n        );\r\n      }\r\n      throw new BadRequestException(\r\n        e.message ?? 'Error occurred while updating this room'\r\n      );\r\n    }\r\n  }\r\n\r\n  async disableById(accountId: string, id: string): Promise<any> {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Room does not found with the provided id'\r\n        );\r\n      }\r\n      const isDisabled = await this.repository.checkIfRoomIsDisabledById(id);\r\n      if (isDisabled) {\r\n        throw new BadRequestException('This room is already disabled');\r\n      }\r\n      const isDeleted = await this.repository.checkIfRoomIsDeletedById(id);\r\n      if (isDeleted) {\r\n        throw new BadRequestException(\r\n          'This room is already deleted, can not disable'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      const listRequestBooked =\r\n        await this.bookingRoomService.getRequestByRoomId(id);\r\n      if (listRequestBooked.length > 0) {\r\n        const reason = `Room ${data?.name} was deleted. Request in this room was auto cancelled`\r\n        for (let i = 0; i < listRequestBooked.length; i++) {\r\n          await this.bookingRoomService.cancelRequest(\r\n            accountId,\r\n            listRequestBooked[i].id,\r\n            reason,\r\n            queryRunner\r\n          );\r\n        }\r\n      }\r\n      const room = await this.repository.disableById(\r\n        accountId,\r\n        id,\r\n        queryRunner\r\n      );\r\n      await this.histService.createNew(room, queryRunner);\r\n\r\n      await queryRunner.commitTransaction();\r\n      return room;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      await queryRunner.rollbackTransaction();\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getDisabledRooms(search: string): Promise<Rooms[]> {\r\n    try {\r\n      return await this.repository.findDisabledRooms(search);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ?? 'An error occurred while getting disabled rooms'\r\n      );\r\n    }\r\n  }\r\n\r\n  async handleRestoreDisabledRoomById(accountId: string, id: string) {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Room does not found with the provided id'\r\n        );\r\n      }\r\n      const isDeleted = await this.repository.checkIfRoomIsDeletedById(id);\r\n      if (isDeleted) {\r\n        throw new BadRequestException('This room is already deleted');\r\n      }\r\n      const isDisabled = await this.repository.checkIfRoomIsDisabledById(id);\r\n      if (!isDisabled) {\r\n        throw new BadRequestException(\r\n          'This room ID is now active. Cannot restore it'\r\n        );\r\n      }\r\n      const room = await this.repository.restoreDisabledRoomById(\r\n        accountId,\r\n        id,\r\n        queryRunner\r\n      );\r\n\r\n      await this.histService.createNew(room, queryRunner);\r\n      await queryRunner.commitTransaction();\r\n      return room;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      await queryRunner.rollbackTransaction();\r\n      throw new BadRequestException(\r\n        e.message ??\r\n          'Error occurred while restore the disabled status of this room'\r\n      );\r\n    }\r\n  }\r\n\r\n  async deleteById(accountId: string, id: string) {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Room does not found with the provided id'\r\n        );\r\n      }\r\n      const isDeleted = await this.repository.checkIfRoomIsDeletedById(id);\r\n      if (isDeleted) {\r\n        throw new BadRequestException('This room is already deleted');\r\n      }\r\n      const data = await this.repository.findById(id);\r\n\r\n      const listRequestBooked =\r\n        await this.bookingRoomService.getRequestByRoomId(id);\r\n      if (listRequestBooked.length > 0) {\r\n        const reason = `Room ${data?.name} was deleted. Request in this room was auto cancelled`\r\n        for (let i = 0; i < listRequestBooked.length; i++) {\r\n          await this.bookingRoomService.cancelRequest(\r\n            accountId,\r\n            listRequestBooked[i].id,\r\n            reason,\r\n            queryRunner\r\n          );\r\n        }\r\n      }\r\n      const room = await this.repository.deleteById(accountId, id, queryRunner);\r\n      await this.histService.createNew(room, queryRunner);\r\n      await queryRunner.commitTransaction();\r\n\r\n      return room;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      await queryRunner.rollbackTransaction();\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getDeletedRooms(search: string): Promise<Rooms[]> {\r\n    try {\r\n      return await this.repository.findDeletedRooms(search);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ?? 'An error occurred while getting deleted rooms'\r\n      );\r\n    }\r\n  }\r\n\r\n  async handleRestoreDeletedRoomById(accountId: string, id: string) {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Room does not found with the provided id'\r\n        );\r\n      }\r\n      const isDisabled = await this.repository.checkIfRoomIsDisabledById(id);\r\n      if (isDisabled) {\r\n        throw new BadRequestException('This room is already disabled');\r\n      }\r\n      const isDeleted = await this.repository.checkIfRoomIsDeletedById(id);\r\n      if (!isDeleted) {\r\n        throw new BadRequestException(\r\n          'This room ID is now active. Cannot restore it'\r\n        );\r\n      }\r\n\r\n      const room = await this.repository.restoreDeletedRoomById(\r\n        accountId,\r\n        id,\r\n        queryRunner\r\n      );\r\n      await this.histService.createNew(room, queryRunner);\r\n      await queryRunner.commitTransaction();\r\n      return room;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      await queryRunner.rollbackTransaction();\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getAllWithoutPagination(): Promise<Rooms[]> {\r\n    try {\r\n      return this.repository\r\n        .createQueryBuilder('rooms')\r\n        .where('rooms.disabled_at IS NULL')\r\n        .andWhere('rooms.deleted_at IS NULL')\r\n        .getMany();\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(\r\n        e.message ?? 'An error occurred while adding this room'\r\n      );\r\n    }\r\n  }\r\n\r\n  getRoomsFilterByNameAndType(payload: ChooseBookingRoomFilterPayload) {\r\n    return this.repository.filterByNameAndType(payload);\r\n  }\r\n\r\n  filterRoomFreeByRoomBooked(listIdRoomBooked: string[]) {\r\n    return this.repository.filterRoomFreeByRoomBooked(listIdRoomBooked);\r\n  }\r\n}\r\n","import {\r\n  BadRequestException,\r\n  forwardRef,\r\n  Inject,\r\n  Injectable,\r\n  Logger,\r\n} from '@nestjs/common';\r\nimport { SlotRepository } from '../repositories/slot.repository';\r\nimport { PaginationParams } from '../controllers/pagination.model';\r\nimport { Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Slot } from '../models/slot.entity';\r\nimport { BookingRoomService } from './booking-room.service';\r\nimport { InjectDataSource } from '@nestjs/typeorm';\r\nimport { DataSource } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class SlotService {\r\n  private readonly logger = new Logger(SlotService.name);\r\n\r\n  constructor(\r\n    @InjectDataSource() private readonly dataSource: DataSource,\r\n    private readonly repository: SlotRepository,\r\n    @Inject(forwardRef(() => BookingRoomService))\r\n    private readonly bookingRoomService: BookingRoomService\r\n  ) {}\r\n\r\n  async getAllByPagination(\r\n    params: PaginationParams\r\n  ): Promise<Pagination<Slot> | Slot[]> {\r\n    try {\r\n      if (!params || !params.page) {\r\n        return await this.repository.findAll();\r\n      } else {\r\n        return await this.repository.findByPagination(params);\r\n      }\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getSlotNames() {\r\n    try {\r\n      return await this.repository.findSlotNames();\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getNumOfSlot(id: string) {\r\n    try {\r\n      const slot = await this.repository.getNumOfSlot(id);\r\n      return slot;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException('One or more parameters is invalid');\r\n    }\r\n  }\r\n\r\n  async getById(id: string) {\r\n    try {\r\n      return await this.repository.findById(id);\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  getAll(): Promise<Slot[]> {\r\n    return this.repository.findAll();\r\n  }\r\n\r\n  async addNewSlot(\r\n    accountId: string,\r\n    payload: {\r\n      name: string;\r\n      slotNum: number;\r\n      timeStart: string;\r\n      timeEnd: string;\r\n      description: string;\r\n    }\r\n  ) {\r\n    try {\r\n      const isHaveSlotSameNameActive =\r\n        await this.repository.isHaveSlotSameNameActive(payload.name);\r\n      if (isHaveSlotSameNameActive) {\r\n        throw new BadRequestException(\r\n          `Already have slot with name '${payload.name}' active. Try other name or delete slot have name '${payload.name}' before add new`\r\n        );\r\n      }\r\n      const isHaveSlotSameNumActive =\r\n        await this.repository.isHaveSlotSameNumActive(payload.slotNum);\r\n      if (isHaveSlotSameNumActive) {\r\n        throw new BadRequestException(\r\n          `There already exists a slot with the same sequence number active.`\r\n        );\r\n      }\r\n      const slot = await this.repository.addNew(accountId, payload);\r\n      // await this.histService.createNew(slot);\r\n      return slot;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async deleteSlotById(accountId: string, id: string) {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Slot does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (data === undefined) {\r\n        throw new BadRequestException('This slot is already deleted');\r\n      }\r\n\r\n      const listRequestBySlot =\r\n        await this.bookingRoomService.getRequestBySlotId(id);\r\n      if (listRequestBySlot?.length > 0) {\r\n        const reason = `${data.name} was deleted. Request in this slot was auto cancelled`\r\n        for (let i = 0; i < listRequestBySlot.length; i++) {\r\n          this.bookingRoomService.cancelRequest(\r\n            accountId,\r\n            listRequestBySlot[i].id,\r\n            reason,\r\n            queryRunner\r\n          );\r\n        }\r\n      }\r\n\r\n      const slot = await this.repository.deleteById(accountId, id, queryRunner);\r\n      // await this.histService.createNew(slot);\r\n      await queryRunner.commitTransaction();\r\n      return slot;\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      await queryRunner.rollbackTransaction();\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async getDeletedSlots(search: string) {\r\n    try {\r\n      const slot = await this.repository.findDeletedByPagination(search);\r\n      return slot;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n\r\n  async restoreDeletedSlotById(accountId: string, id: string) {\r\n    try {\r\n      const isExisted = await this.repository.existsById(id);\r\n      if (!isExisted) {\r\n        throw new BadRequestException(\r\n          'Slot does not found with the provided id'\r\n        );\r\n      }\r\n      const data = await this.repository.findById(id);\r\n      if (!data.deletedAt) {\r\n        throw new BadRequestException(\r\n          'This slot ID is now active. Cannot restore it'\r\n        );\r\n      } else {\r\n        const isHaveSlotSameNameActive =\r\n          await this.repository.isHaveSlotSameNameActive(data.name);\r\n        if (isHaveSlotSameNameActive) {\r\n          throw new BadRequestException(\r\n            `Already have slot with name '${data.name}' active.\r\n            Try other name or delete slot have name '${data.name}' before restore`\r\n          );\r\n        }\r\n\r\n        const isHaveSlotSameNumActive =\r\n          await this.repository.isHaveSlotSameNumActive(data.slotNum);\r\n        if (isHaveSlotSameNumActive) {\r\n          throw new BadRequestException(\r\n            `There already exists a slot with the same sequence number active.`\r\n          );\r\n        }\r\n      }\r\n\r\n      const roomType = await this.repository.restoreDeletedById(accountId, id);\r\n      // await this.histService.createNew(roomType);\r\n      return roomType;\r\n    } catch (e) {\r\n      this.logger.error(e.message);\r\n      throw new BadRequestException(e.message);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Logger } from \"@nestjs/common\";\r\nimport { Cron, CronExpression, Interval } from \"@nestjs/schedule\";\r\nimport { BookingRoomRepository } from \"../repositories\";\r\nimport { BookingRoomStatus } from \"../enum/booking-room-status.enum\";\r\nimport * as dayjs from \"dayjs\";\r\n\r\n@Injectable()\r\nexport class TasksService {\r\n  private readonly logger = new Logger(TasksService.name);\r\n\r\n  constructor(private readonly repository: BookingRoomRepository) {\r\n  }\r\n\r\n  //@Cron(CronExpression.EVERY_10_SECONDS)\r\n  async handleCheckRoomBookingStillInProgress() {\r\n    const currentTime = new Date().getTime() + 25200000;\r\n    const next5Mins = new Date(currentTime + (1000 * 60 * 5));\r\n    const result = await this.repository.findByBookingStatus(BookingRoomStatus.Booking, next5Mins);\r\n    console.log(result);\r\n\r\n  }\r\n}\r\n","import {BadRequestException} from \"@nestjs/common\";\r\n\r\nexport const ContainsMany = <Domain extends string, Domains extends Domain[]>(domains: [...Domains], options?: {message: string}) =>\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  (target: Object, propertyKey: string) => {\r\n    let value: string;\r\n    const getter = () => value\r\n    const setter = function (newVal: Domain) {\r\n      if (domains.includes(newVal)) {\r\n        value = newVal;\r\n      }\r\n      else {\r\n        if (!options) {\r\n          throw new BadRequestException(`Must be one of ${domains.join()}`);\r\n        }\r\n        throw new BadRequestException(options.message);\r\n      }\r\n    };\r\n    Object.defineProperty(target, propertyKey, {\r\n      get: getter,\r\n      set: setter\r\n    });\r\n  };\r\n","\r\nexport const getAccessTokenViaCookie = (request) => request.headers[\"cookie\"]?.split(\";\")\r\n  .map(k => k.trim()).find(k => k.startsWith(\"accessToken=\"))?.split(\"=\")[1] ?? \"\";\r\n","export * from './lib/color.constants';\r\nexport * from './lib/environment.constant';\r\nexport * from './lib/headers.constant';\r\nexport * from './lib/mediatype.constant';\r\nexport * from './lib/room-booking-status.constant';\r\n","export const INPUT_GRAY_COLOR = \"rgb(206, 212, 218)\";\r\nexport const FORM_GRAY_COLOR = \"rgb(248, 249, 250)\";\r\nexport const FPT_ORANGE_COLOR = \"#f06e28\";\r\nexport const BLACK = \"#000\";\r\nexport const WHITE = \"#fff\";\r\nexport const GRAY = \"#808080\";\r\nexport const LIGHT_GRAY = \"#f2f2f2\";\r\nexport const YELLOW = \"#f59f00\";\r\nexport const RED = \"rgb(250,82,82)\";\r\nexport const PINK = \"rgb(230, 73, 128)\";\r\nexport const GREEN = \"rgb(64,192,87)\";\r\nexport const LIME = \"rgb(130, 201, 30)\";\r\nexport const TEAL = \"rgb(18, 184, 134)\";\r\nexport const BLUE = \"#228be6\";\r\n","export const Environment = {\r\n  http: {\r\n    host: 'http.host',\r\n    port: 'http.port',\r\n  },\r\n  https: {\r\n    host: 'https.host',\r\n    port: 'https.port',\r\n  },\r\n  db: {\r\n    mysql: {\r\n      url: 'db.mysql.url',\r\n      port: 'db.mysql.port',\r\n      database: 'db.mysql.database',\r\n      username: 'db.mysql.username',\r\n      password: 'db.mysql.password',\r\n      synchronize: 'db.mysql.synchronize',\r\n    },\r\n    postgres: {\r\n      url: 'db.postgres.url',\r\n      port: 'db.postgres.port',\r\n      database: 'db.postgres.database',\r\n      username: 'db.postgres.username',\r\n      password: 'db.postgres.password',\r\n      synchronize: 'db.postgres.synchronize'\r\n    },\r\n    keycloak: {\r\n      url: 'db.keycloak.url',\r\n      port: 'db.keycloak.port',\r\n      database: 'db.keycloak.database',\r\n      username: 'db.keycloak.username',\r\n      password: 'db.keycloak.password',\r\n      synchronize: 'db.keycloak.synchronize',\r\n    },\r\n  },\r\n  keycloak: {\r\n    host: 'keycloak.host',\r\n    port: 'keycloak.port',\r\n    client: {\r\n      realm: 'keycloak.client.realm',\r\n      id: 'keycloak.client.id',\r\n      secret: 'keycloak.client.secret',\r\n    },\r\n    grant_type: {\r\n      password: \"keycloak.grant_type.password\",\r\n      token_exchange: \"keycloak.grant_type.token_exchange\",\r\n      refresh_token: \"keycloak.grant_type.refresh_token\",\r\n      native_refresh_token: \"keycloak.grant_type.native_refresh_token\"\r\n    },\r\n    master_username: 'keycloak.master_username',\r\n    master_password: 'keycloak.master_password'\r\n  },\r\n  redis: {\r\n    host: 'redis.host',\r\n    port: 'redis.port',\r\n    username: 'redis.username',\r\n    password: 'redis.password',\r\n  },\r\n  elasticsearch: {\r\n    host: \"elasticsearch.host\",\r\n    port: \"elasticsearch.port\",\r\n    username: \"elasticsearch.username\",\r\n    password: \"elasticsearch.password\"\r\n  },\r\n  firebase: {\r\n    apiKey: \"firebase.apiKey\",\r\n    authDomain: \"firebase.authDomain\",\r\n    projectId: \"firebase.projectId\",\r\n    storageBucket: \"firebase.storageBucket\",\r\n    messagingSenderId: \"firebase.messagingSenderId\",\r\n    appId: \"firebase.appId\",\r\n    measurementId: \"firebase.measurementId\"\r\n  },\r\n  cloudinary: {\r\n    name: \"cloudinary.name\",\r\n    apiKey: \"cloudinary.apiKey\",\r\n    apiSecret: \"cloudinary.apiSecret\",\r\n    secure: \"cloudinary.secure\"\r\n  }\r\n};\r\n","export const CONTENT_TYPE = \"Content-Type\";\r\nexport const AUTHORIZATION = \"Authorization\";\r\nexport const AUTHORIZATION_LOWERCASE = \"authorization\";\r\n","export const APPLICATION_X_WWW_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\r\nexport const APPLICATION_JSON = \"application/json\";\r\nexport const TEXT_PLAIN = \"text/plain\";\r\n","export const CHECKED_IN = 'CHECKED_IN';\r\nexport const CHECKED_OUT = 'CHECKED_OUT';\r\nexport const CANCELLED = 'CANCELLED';\r\nexport const PENDING = 'PENDING';\r\nexport const BOOKED = 'BOOKED';\r\n","module.exports = require(\"@nestjs/axios\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/platform-fastify\");","module.exports = require(\"@nestjs/schedule\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"cache-manager-redis-store\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"cloudinary\");","module.exports = require(\"dayjs\");","module.exports = require(\"fastify\");","module.exports = require(\"fastify-compress\");","module.exports = require(\"fastify-helmet\");","module.exports = require(\"fastify-multer\");","module.exports = require(\"firebase-admin\");","module.exports = require(\"fs\");","module.exports = require(\"google-auth-library\");","module.exports = require(\"joi\");","module.exports = require(\"js-yaml\");","module.exports = require(\"multer\");","module.exports = require(\"nestjs-typeorm-paginate\");","module.exports = require(\"rxjs\");","module.exports = require(\"streamifier\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"crypto\");","module.exports = require(\"net\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Logger, ValidationPipe } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\n\r\nimport { SwaggerModule } from '@nestjs/swagger';\r\nimport {\r\n  getSwaggerConfig,\r\n  SWAGGER_CONFIG,\r\n} from './app/constants/config/swagger.config';\r\nimport { AppModule } from './app/modules/app.module';\r\nimport { initializeFirebaseApp } from './app/config/firebase.config';\r\nimport * as net from 'net';\r\nimport { fastifyHelmet } from 'fastify-helmet';\r\nimport {\r\n  FastifyAdapter,\r\n  NestFastifyApplication,\r\n} from '@nestjs/platform-fastify';\r\nimport compression from 'fastify-compress';\r\nimport { contentParser } from 'fastify-multer';\r\n\r\nasync function bootstrap() {\r\n  const port = process.env.BACKEND_PORT || 5000;\r\n  const host = process.env.BACKEND_HOST || `0.0.0.0`;\r\n  const contextPath = process.env.BACKEND_CONTEXT_PATH || '/api';\r\n  const firebaseProjectId = initializeFirebaseApp();\r\n\r\n  const app = await NestFactory.create<NestFastifyApplication>(\r\n    AppModule.forRoot(),\r\n    new FastifyAdapter({\r\n      logger: true,\r\n    }),\r\n    { bufferLogs: true }\r\n  );\r\n  app.useGlobalPipes(\r\n    new ValidationPipe({\r\n      transform: true,\r\n    })\r\n  );\r\n  app.setGlobalPrefix(contextPath);\r\n  app.enableCors();\r\n  await app.register(contentParser);\r\n  await app.register(compression);\r\n  await app.register(fastifyHelmet, {\r\n    global: true,\r\n    contentSecurityPolicy: {\r\n      directives: {\r\n        defaultSrc: [`'self'`],\r\n        styleSrc: [\r\n          `'self'`,\r\n          `'unsafe-inline'`,\r\n          'cdn.jsdelivr.net',\r\n          'fonts.googleapis.com',\r\n        ],\r\n        fontSrc: [`'self'`, 'fonts.gstatic.com'],\r\n        imgSrc: [`'self'`, 'data:', 'cdn.jsdelivr.net'],\r\n        scriptSrc: [`'self'`, `https: 'unsafe-inline'`, `cdn.jsdelivr.net`],\r\n      },\r\n    },\r\n  });\r\n  // app.useStaticAssets({ root: join(__dirname, '../../fastify-file-upload') });\r\n  const document = SwaggerModule.createDocument(app, getSwaggerConfig());\r\n  SwaggerModule.setup(SWAGGER_CONFIG.contextPath, app, document);\r\n\r\n  await app.listen(port, host);\r\n\r\n  const client = net.connect({ port: 80, host: 'google.com' }, () => {\r\n    Logger.debug(`💻 [IP] External Address: ${client.localAddress}`);\r\n    Logger.debug(`⚙️ [IP] Loopback Address: localhost (127.0.0.1)`);\r\n    Logger.debug(\r\n      `[Firebase] Initialized with project id: ${firebaseProjectId}`\r\n    );\r\n\r\n    Logger.debug(\r\n      `[API] Running on: http://${client.localAddress}:${port}${contextPath}`\r\n    );\r\n  });\r\n}\r\n\r\nvoid bootstrap();\r\n"],"names":[],"sourceRoot":""}